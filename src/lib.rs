//! # 单词计数程序
//!
//! 该程序通过构建二叉搜索树（BST）来实现对输入文本中单词的计数和相关操作。支持从用户输入、文件读取、以及加载缓存三种方式读入文本，用户可以执行停用词过滤、遍历、查询、保存缓存和退出等操作。
//!
//! ## 1. 读入数据
//!
//! - 用户在程序开始时被提示选择读入文本的方式：输入文本、输入路径、或加载缓存。
//! - 根据用户选择，程序会要求用户提供相应的输入，包括文本内容、文本文件路径，或JSON文件路径。
//!
//! ## 2. 构建二叉查找树 (BST)
//!
//! - 如果选择加载缓存，则程序会读取 JSON 文件，并将其反序列化为 `BSTree<Word>` 类型。
//! - 如果选择输入文本或输入路径，则程序会根据用户提供的文本内容或文件路径构建一个 BST，其中存储了单词和它们的出现次数。
//!
//! ## 3. 主要功能
//!
//! - ### 输入停用词，删除二叉查找树中的相应结点
//!   - 用户提供停用词，程序从 BST 中删除对应的结点。
//!
//! - ### 遍历二叉查找树，输出每个单词及其出现次数
//!   - 用户选择遍历方式（前序、中序、后序），程序输出 BST 中每个结点的数据。
//!
//! - ### 输入查询词，搜索二叉查找树中的相应结点
//!   - 用户提供查询词，程序从 BST 中查找对应结点并输出其出现次数。
//!
//! - ### 保存为缓存
//!   - 用户输入文件名，程序将当前 BST 序列化为 JSON 格式并保存为文件。
//!
//! - ### 退出程序
//!   - 用户选择退出程序，程序正常结束。
//!
//! ## 4. 数据结构
//!
//! 使用二叉搜索树（BST）来存储单词及其出现次数。
//!
//! ## 5. 主要模块
//!
//! - `bst`: 包含 `BSTree` 结构体和与二叉搜索树相关的操作。
//! - `r#type`: 包含 `Order` 枚举类型和 `Word` 结构体。
//! - `utils`: 包含与文本处理相关的工具函数，如过滤单词、文件读取和写入。

pub mod bst;
pub mod r#type;
pub mod utils;
