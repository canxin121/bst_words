var searchIndex = JSON.parse('{\
"anstream":{"doc":"<strong>Auto-adapting <code>stdout</code> / <code>stderr</code> streams</strong>","t":"PPPFEGPFFCNNNNNNNNNNNNNNNNQQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQQQHHCNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKKRMM","n":["Always","AlwaysAnsi","Auto","AutoStream","Buffer","ColorChoice","Never","StripStream","WinconStream","adapter","always","always_ansi","auto","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","choice","clone","clone_into","current_choice","default","eprint","eprintln","eq","flush","flush","flush","fmt","fmt","fmt","fmt","from","from","from","from","global","into","into","into","into","into_inner","into_inner","into_inner","is_terminal","is_terminal","is_terminal","lock","lock","lock","lock","lock","lock","never","new","new","new","panic","print","println","stderr","stdout","stream","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write","write_all","write_all","write_all","write_fmt","write_fmt","write_fmt","write_global","write_vectored","write_vectored","write_vectored","StripBytes","StripBytesIter","StripStr","StripStrIter","StrippedBytes","StrippedStr","WinconBytes","WinconBytesIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","extend","extract_next","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","is_empty","new","new","new","new","next","next","next","next","next","strip_bytes","strip_next","strip_next","strip_str","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsLockedWrite","IsTerminal","RawStream","Write","as_locked_write","is_terminal"],"q":[[0,"anstream"],[93,"anstream::adapter"],[218,"anstream::stream"],[224,"std::io::error"],[225,"core::fmt"],[226,"core::fmt"],[227,"core::fmt"],[228,"std::io::stdio"],[229,"core::fmt"],[230,"alloc::vec"],[231,"core::option"],[232,"alloc::string"]],"d":["","","","<code>std::io::Write</code> that adapts ANSI escape codes to the …","","Selection for overriding color output Selection for …","","Only pass printable data to the inner <code>Write</code>","Only pass printable data to the inner <code>Write</code>","Gracefully degrade styled output","Force color, no matter what the inner <code>Write</code> supports.","Force ANSI escape codes to be passed through as-is, no …","Auto-adapt for the stream’s capabilities","","","","","","","","","Report the desired choice for the given stream","","","Prefer <code>AutoStream::choice</code>","","Prints to <code>stderr</code>.","Prints to <code>stderr</code>, with a newline.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the current <code>ColorChoice</code> state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the wrapped <code>RawStream</code>","Get the wrapped <code>RawStream</code>","Get the wrapped <code>RawStream</code>","","","","Get exclusive access to the <code>AutoStream</code>","Get exclusive access to the <code>AutoStream</code>","Get exclusive access to the <code>StripStream</code>","Get exclusive access to the <code>StripStream</code>","Get exclusive access to the <code>WinconStream</code>","Get exclusive access to the <code>WinconStream</code>","Only pass printable data to the inner <code>Write</code>.","Runtime control over styling behavior","Only pass printable data to the inner <code>Write</code>","Only pass printable data to the inner <code>Write</code>","Panics the current thread.","Prints to <code>stdout</code>.","Prints to <code>stdout</code>, with a newline.","Create an ANSI escape code compatible stderr","Create an ANSI escape code compatible stdout","Higher-level traits to describe writeable streams","","","","","","","","","","","","","","","","","","","","","","","Override the detected <code>ColorChoice</code>","","","","Incrementally strip non-contiguous data","See <code>StripBytes</code>","Incrementally strip non-contiguous data","See <code>StripStr</code>","See <code>strip_bytes</code>","See <code>strip_str</code>","Incrementally convert to wincon calls for non-contiguous …","See <code>WinconBytes</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Strip the next slice of bytes","Strip the next segment of data","<strong>Note:</strong> this does <em>not</em> exhaust the <code>Iterator</code>","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Create a <code>Vec</code> of the printable content","Report the bytes has been exhausted","Initial state","See <code>strip_bytes</code>","Initial state","Initial state","","","","","","Strip ANSI escapes from bytes, returning the printable …","Strip the next segment of data","Strip the next segment of data","Strip ANSI escapes from a <code>&amp;str</code>, returning the printable …","","","","","","Create a <code>String</code> of the printable content","","","","","","","","","","","","","","","","","","","","","","","","","","","","Required functionality for underlying <code>std::io::Write</code> for …","","",""],"i":[3,3,3,0,0,0,3,0,0,0,1,1,1,3,1,8,9,3,1,8,9,1,3,3,1,3,0,0,3,1,8,9,3,1,8,9,3,1,8,9,3,3,1,8,9,1,8,9,1,8,9,1,1,8,8,9,9,1,1,8,9,0,0,0,0,0,0,3,3,1,8,9,3,1,8,9,3,1,8,9,1,8,9,1,8,9,1,8,9,3,1,8,9,0,0,0,0,0,0,0,0,25,26,30,27,28,31,29,32,25,26,30,27,28,31,29,32,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,30,27,28,31,29,32,27,29,25,25,26,30,27,28,31,29,32,25,26,30,27,28,31,29,32,25,26,30,27,28,31,29,32,25,30,27,31,32,27,27,26,27,28,29,25,30,27,31,32,0,26,28,0,25,26,27,28,29,25,25,25,26,30,27,28,31,29,32,25,26,30,27,28,31,29,32,25,26,30,27,28,31,29,32,0,0,0,7,7,38],"f":[0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-1]]],2],[-1,[[1,[-1]]],2],[-1,[[1,[-1]]],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,3,2],[3,3],[[-1,-2],4,[],[]],[[[1,[-1]]],3,2],[[],3],0,0,[[3,3],5],[[[1,[-1]]],[[6,[4]]],[2,7]],[[[8,[-1]]],[[6,[4]]],[2,7]],[[[9,[-1]]],[[6,[4]]],[2,7]],[[3,10],[[12,[4,11]]]],[[[1,[-1]],10],13,[14,2]],[[[8,[-1]],10],13,[2,14]],[[[9,[-1]],10],13,[2,14]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,2],[[[8,[-1]]],-1,2],[[[9,[-1]]],-1,2],[[[1,[-1]]],5,2],[[[8,[-1]]],5,2],[[[9,[-1]]],5,2],[[[1,[15]]],[[1,[16]]]],[[[1,[17]]],[[1,[18]]]],[[[8,[15]]],[[8,[16]]]],[[[8,[17]]],[[8,[18]]]],[[[9,[17]]],[[9,[18]]]],[[[9,[15]]],[[9,[16]]]],[-1,[[1,[-1]]],2],[[-1,3],[[1,[-1]]],2],[-1,[[8,[-1]]],2],[-1,[[9,[-1]]],2],0,0,0,[[],[[1,[17]]]],[[],[[1,[15]]]],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[[1,[-1]],[21,[20]]],[[6,[22]]],[2,7]],[[[8,[-1]],[21,[20]]],[[6,[22]]],[2,7]],[[[9,[-1]],[21,[20]]],[[6,[22]]],[2,7]],[[[1,[-1]],[21,[20]]],[[6,[4]]],[2,7]],[[[8,[-1]],[21,[20]]],[[6,[4]]],[2,7]],[[[9,[-1]],[21,[20]]],[[6,[4]]],[2,7]],[[[1,[-1]],23],[[6,[4]]],[2,7]],[[[8,[-1]],23],[[6,[4]]],[2,7]],[[[9,[-1]],23],[[6,[4]]],[2,7]],[3,4],[[[1,[-1]],[21,[24]]],[[6,[22]]],[2,7]],[[[8,[-1]],[21,[24]]],[[6,[22]]],[2,7]],[[[9,[-1]],[21,[24]]],[[6,[22]]],[2,7]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[26,26],[27,27],[28,28],[29,29],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],25],[[],26],[[],27],[[],28],[[],29],[[25,25],5],[[26,26],5],[[30,30],5],[[27,27],5],[[28,28],5],[[31,31],5],[[29,29],5],[[32,32],5],[[27,[21,[20]]],4],[[29,[21,[20]]],32],[[25,10],13],[[25,10],13],[[26,10],13],[[30,10],13],[[27,10],13],[[28,10],13],[[31,10],13],[[29,10],13],[[32,10],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,[[33,[20]]]],[27,5],[[],26],[[[21,[20]]],27],[[],28],[[],29],[25,[[34,[-1]]],[]],[30,[[34,[-1]]],[]],[27,[[34,[-1]]],[]],[31,[[34,[-1]]],[]],[32,[[34,[-1]]],[]],[[[21,[20]]],27],[[26,35],30],[[28,[21,[20]]],31],[35,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,36],[-1,36,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0,0,0,[[[7,[],[[37,[-1]]]]],-1,2],[38,5]],"c":[],"p":[[5,"AutoStream",0],[10,"RawStream",218],[6,"ColorChoice",0],[1,"tuple"],[1,"bool"],[8,"Result",224],[10,"AsLockedWrite",218],[5,"StripStream",0],[5,"WinconStream",0],[5,"Formatter",225],[5,"Error",225],[6,"Result",226],[8,"Result",225],[10,"Debug",225],[5,"Stdout",227],[5,"StdoutLock",227],[5,"Stderr",227],[5,"StderrLock",227],[5,"TypeId",228],[1,"u8"],[1,"slice"],[1,"usize"],[5,"Arguments",225],[5,"IoSlice",229],[5,"StrippedStr",93],[5,"StripStr",93],[5,"StrippedBytes",93],[5,"StripBytes",93],[5,"WinconBytes",93],[5,"StripStrIter",93],[5,"StripBytesIter",93],[5,"WinconBytesIter",93],[5,"Vec",230],[6,"Option",231],[1,"str"],[5,"String",232],[17,"Write"],[10,"IsTerminal",218]],"b":[[51,"impl-AutoStream%3CStdout%3E"],[52,"impl-AutoStream%3CStderr%3E"],[53,"impl-StripStream%3CStdout%3E"],[54,"impl-StripStream%3CStderr%3E"],[55,"impl-WinconStream%3CStderr%3E"],[56,"impl-WinconStream%3CStdout%3E"],[142,"impl-Display-for-StrippedStr%3C\'s%3E"],[143,"impl-Debug-for-StrippedStr%3C\'s%3E"]]},\
"anstyle":{"doc":"ANSI Text Styling","t":"PPFGTTPPPPPPPPPPTGPTTTTFFPTTTPPFPFTFTPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Ansi","Ansi256","Ansi256Color","AnsiColor","BLINK","BOLD","Black","Blue","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","CURLY_UNDERLINE","Color","Cyan","DASHED_UNDERLINE","DIMMED","DOTTED_UNDERLINE","DOUBLE_UNDERLINE","EffectIter","Effects","Green","HIDDEN","INVERT","ITALIC","Magenta","Red","Reset","Rgb","RgbColor","STRIKETHROUGH","Style","UNDERLINE","White","Yellow","b","bg_color","bitor","bitor","bitor_assign","bitor_assign","blink","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","contains","default","default","default","dimmed","effects","eq","eq","eq","eq","eq","eq","eq","eq","eq","fg_color","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ansi","g","get_bg_color","get_effects","get_fg_color","get_underline_color","hash","hash","hash","hash","hash","hash","hash","hidden","index","insert","into","into","into","into","into","into","into","into","into_ansi","into_iter","invert","is_bright","is_plain","is_plain","italic","iter","new","new","next","on","on","on","on","on_default","on_default","on_default","on_default","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","remove","render","render","render","render_bg","render_bg","render_bg","render_bg","render_fg","render_fg","render_fg","render_fg","render_reset","set","strikethrough","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","underline_color","write_reset_to","write_to"],"q":[[0,"anstyle"],[235,"core::option"],[236,"core::cmp"],[237,"core::fmt"],[238,"core::fmt"],[239,"core::convert"],[240,"core::fmt"],[241,"core::clone"],[242,"core::result"],[243,"core::any"],[244,"std::io"],[245,"std::io::error"]],"d":["","","256 (8-bit) color support","Available 4-bit ANSI color palette codes","","","Black: #0 (foreground code <code>30</code>, background code <code>40</code>).","Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).","Bright black: #0 (foreground code <code>90</code>, background code <code>100</code>).","Bright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).","Bright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).","Bright green: #2 (foreground code <code>92</code>, background code <code>102</code>).","Bright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>…","Bright red: #1 (foreground code <code>91</code>, background code <code>101</code>).","Bright white: #7 (foreground code <code>97</code>, background code <code>107</code>).","Bright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>…","","Any ANSI color code scheme","Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).","","","","","","A set of text effects","Green: #2 (foreground code <code>32</code>, background code <code>42</code>).","","Swap foreground and background colors; inconsistent …","Not widely supported. Sometimes treated as inverse or blink","Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).","Red: #1 (foreground code <code>31</code>, background code <code>41</code>).","Reset terminal formatting","","24-bit ANSI RGB color codes","Characters legible but marked as if for deletion. Not …","ANSI Text styling","Style extensions exist for Kitty, VTE, mintty and iTerm2.","White: #7 (foreground code <code>37</code>, background code <code>47</code>).","Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).","","Set background color","","","","","Apply <code>blink</code> effect","Apply <code>bold</code> effect","","","","","","","","","","","","","","","","","Change the color to/from bright","Reset all effects in-place","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all of the effects in <code>other</code> are contained …","","","","Apply <code>dimmed</code> effect","Set text effects","","","","","","","","","","Set foreground color","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Apply <code>hidden</code> effect","","Inserts the specified effects in-place.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Apply <code>invert</code> effect","Report whether the color is bright","Check if no effects are enabled","Check if no effects are enabled","Apply <code>italic</code> effect","Iterate over enabled effects","No effects enabled","No effects enabled","","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","","","","","","","","","Removes the specified effects in-place.","Render the ANSI code","Render the ANSI code","Render the ANSI code","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Renders the relevant <code>Reset</code> code","Enable or disable the specified effects depending on the …","Apply <code>strikethrough</code> effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply <code>underline</code> effect","Set underline color","Write the relevant <code>Reset</code> code","Write the ANSI code"],"i":[4,4,0,0,6,6,8,8,8,8,8,8,8,8,8,8,6,0,8,6,6,6,6,0,0,8,6,6,6,8,8,0,4,0,6,0,6,8,8,1,3,6,3,6,3,3,3,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,8,6,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,4,8,10,1,6,12,3,6,6,12,3,3,3,4,8,10,1,6,11,12,3,3,3,4,8,10,1,6,11,12,3,4,4,4,4,4,4,8,10,10,10,1,1,6,11,12,3,3,10,1,3,3,3,3,4,8,10,1,6,12,3,3,10,6,4,8,10,1,6,11,12,3,10,11,3,8,6,3,3,6,6,3,11,4,8,10,1,4,8,10,1,4,8,10,1,6,12,3,1,6,6,12,3,4,8,10,1,4,8,10,1,3,6,3,6,3,6,3,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,3,3,3,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,[5,[4]]],3],[[6,6],6],[[3,6],3],[[6,6],7],[[3,6],7],[3,3],[3,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,9],8],[6,6],[4,4],[8,8],[10,10],[1,1],[6,6],[11,11],[12,12],[3,3],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[4,4],13],[[8,8],13],[[10,10],13],[[1,1],13],[[6,6],13],[[12,12],13],[[3,3],13],[[6,6],9],[[],6],[[],12],[[],3],[3,3],[[3,6],3],[[4,4],9],[[8,8],9],[[10,10],9],[[1,1],9],[[6,6],9],[[11,11],9],[[12,12],9],[[3,3],9],[[3,6],9],[[3,[5,[4]]],3],[[4,14],15],[[8,14],15],[[10,14],15],[[1,14],15],[[6,14],15],[[11,14],15],[[12,14],15],[[3,14],15],[8,4],[1,4],[2,4],[-1,-1,[]],[[[7,[2,2,2]]],4],[10,4],[-1,-1,[]],[2,10],[-1,-1,[]],[8,10],[-1,-1,[]],[[[7,[2,2,2]]],1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,3],[8,10],[1,2],[3,[[5,[4]]]],[3,6],[3,[[5,[4]]]],[3,[[5,[4]]]],[[4,-1],7,16],[[8,-1],7,16],[[10,-1],7,16],[[1,-1],7,16],[[6,-1],7,16],[[12,-1],7,16],[[3,-1],7,16],[3,3],[10,2],[[6,6],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,[[5,[8]]]],[-1,-2,[],[]],[3,3],[8,9],[6,9],[3,9],[3,3],[6,11],[[],6],[[],3],[11,[[5,[-1]]],[]],[[4,-1],3,[[17,[4]]]],[[8,-1],3,[[17,[4]]]],[[10,-1],3,[[17,[4]]]],[[1,-1],3,[[17,[4]]]],[4,3],[8,3],[10,3],[1,3],[[4,4],[[5,[13]]]],[[8,8],[[5,[13]]]],[[10,10],[[5,[13]]]],[[1,1],[[5,[13]]]],[[6,6],[[5,[13]]]],[[12,12],[[5,[13]]]],[[3,3],[[5,[13]]]],[1,2],[[6,6],6],[6,[[0,[18,19,20]]]],[12,[[0,[18,19,20]]]],[3,[[0,[18,19,20]]]],[4,[[0,[18,19,20]]]],[8,[[0,[18,19,20]]]],[10,[[0,[18,19,20]]]],[1,[[0,[18,19,20]]]],[4,[[0,[18,19,20]]]],[8,[[0,[18,19,20]]]],[10,[[0,[18,19,20]]]],[1,[[0,[18,19,20]]]],[3,[[0,[18,19,20]]]],[[6,6,9],6],[3,3],[[6,6],6],[[3,6],3],[[6,6],7],[[3,6],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[3,3],[[3,[5,[4]]],3],[[3,23],[[24,[7]]]],[[3,23],[[24,[7]]]]],"c":[],"p":[[5,"RgbColor",0],[1,"u8"],[5,"Style",0],[6,"Color",0],[6,"Option",235],[5,"Effects",0],[1,"tuple"],[6,"AnsiColor",0],[1,"bool"],[5,"Ansi256Color",0],[5,"EffectIter",0],[5,"Reset",0],[6,"Ordering",236],[5,"Formatter",237],[8,"Result",237],[10,"Hasher",238],[10,"Into",239],[10,"Display",237],[10,"Copy",240],[10,"Clone",241],[6,"Result",242],[5,"TypeId",243],[10,"Write",244],[8,"Result",245]],"b":[[101,"impl-PartialEq-for-Style"],[102,"impl-PartialEq%3CEffects%3E-for-Style"],[112,"impl-From%3CAnsiColor%3E-for-Color"],[113,"impl-From%3CRgbColor%3E-for-Color"],[114,"impl-From%3Cu8%3E-for-Color"],[116,"impl-From%3C(u8,+u8,+u8)%3E-for-Color"],[117,"impl-From%3CAnsi256Color%3E-for-Color"],[119,"impl-From%3Cu8%3E-for-Ansi256Color"],[121,"impl-From%3CAnsiColor%3E-for-Ansi256Color"]]},\
"anstyle_parse":{"doc":"Parser for implementing virtual terminal emulators","t":"FKIFFFKFMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPNNNNNNNNNNNNNNNNNNHNNNNNNNNNN","n":["AsciiParser","CharAccumulator","DefaultCharAccumulator","Params","ParamsIter","Parser","Perform","Utf8Parser","add","add","add","advance","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","csi_dispatch","default","default","default","default","eq","eq","eq","eq","esc_dispatch","execute","fmt","fmt","fmt","fmt","from","from","from","from","from","hook","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","new","next","osc_dispatch","print","put","size_hint","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unhook","Action","Anywhere","BeginUtf8","Clear","Collect","CsiDispatch","CsiEntry","CsiIgnore","CsiIntermediate","CsiParam","DcsEntry","DcsIgnore","DcsIntermediate","DcsParam","DcsPassthrough","EscDispatch","Escape","EscapeIntermediate","Execute","Ground","Hook","Ignore","Nop","OscEnd","OscPut","OscStart","OscString","Param","Print","Put","SosPmApcString","State","Unhook","Utf8","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","into","into","state_change","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"anstyle_parse"],[88,"anstyle_parse::state"],[151,"core::option"],[152,"core::clone"],[153,"core::default"],[154,"core::cmp"],[155,"core::fmt"],[156,"core::fmt"],[157,"core::any"]],"d":["Only allow parsing 7-bit ASCII","Build a <code>char</code> out of bytes","","","Immutable subparameter iterator.","Parser for raw <em>VTE</em> protocol which delegates actions to a …","Performs actions requested by the <code>Parser</code>","Allow parsing UTF-8","Build a <code>char</code> out of bytes","","","Advance the parser state","","","","","","","","","","","","","","","","","","","A final character has arrived for a CSI sequence","","","","","","","","","The final character of an escape sequence has arrived.","Execute a C0 or C1 control function.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Invoked when a final character arrives in first part of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if there are no parameters present.","Returns an iterator over all parameters and subparameters.","Returns the number of parameters.","Create a new Parser","","Dispatch an operating system command.","Draw a character to the screen and update states.","Pass bytes as part of a device control string to the …","","","","","","","","","","","","","","","","","","","","","","Called when a device control string is terminated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transition to next <code>State</code>","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,5,6,7,19,10,7,5,6,19,10,7,5,6,10,7,5,6,10,7,5,6,9,10,7,5,6,10,7,5,6,9,9,10,7,5,6,19,10,7,5,6,9,19,10,7,5,6,19,10,10,10,10,7,19,9,9,9,19,0,10,7,5,6,19,10,7,5,6,19,10,7,5,6,19,10,7,5,6,9,0,23,24,24,24,24,23,23,23,23,23,23,23,23,23,24,23,23,24,23,24,24,24,24,24,24,23,24,24,24,23,0,24,23,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,0,23,24,23,23,24,24,23,24,23,24],"f":[0,0,0,0,0,0,0,0,[[1,2],[[4,[3]]]],[[5,2],[[4,[3]]]],[[6,2],[[4,[3]]]],[[[7,[-1]],-2,2],8,1,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[[[7,[-1]]],[[7,[-1]]],11],[5,5],[6,6],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[9,10,[12,[2]],13,2],8],[[],10],[[],[[7,[-1]]],14],[[],5],[[],6],[[10,10],13],[[[7,[-1]],[7,[-1]]],13,15],[[5,5],13],[[6,6],13],[[9,[12,[2]],13,2],8],[[9,2],8],[[10,16],17],[[[7,[-1]],16],17,18],[[5,16],17],[[6,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[9,10,[12,[2]],13,2],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,-1,[]],[10,13],[10,19],[10,20],[[],7],[19,[[4,[-1]]],[]],[[9,[12,[[12,[2]]]],13],8],[[9,3],8],[[9,2],8],[19,[[8,[20,[4,[20]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[9,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[24,24],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[],23],[[],24],[[23,23],13],[[24,24],13],[[23,16],17],[[24,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[23,2],[[8,[23,24]]]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[21,[23,-1]]],[]],[-1,[[21,[-2]]],[],[]],[2,[[21,[24,-1]]],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]]],"c":[],"p":[[10,"CharAccumulator",0],[1,"u8"],[1,"char"],[6,"Option",151],[5,"AsciiParser",0],[5,"Utf8Parser",0],[5,"Parser",0],[1,"tuple"],[10,"Perform",0],[5,"Params",0],[10,"Clone",152],[1,"slice"],[1,"bool"],[10,"Default",153],[10,"PartialEq",154],[5,"Formatter",155],[8,"Result",155],[10,"Debug",155],[5,"ParamsIter",0],[1,"usize"],[6,"Result",156],[5,"TypeId",157],[6,"State",88],[6,"Action",88]],"b":[]},\
"anstyle_query":{"doc":"","t":"HHHHHHHCHH","n":["clicolor","clicolor_force","is_ci","no_color","term_supports_ansi_color","term_supports_color","truecolor","windows","enable_ansi_colors","enable_virtual_terminal_processing"],"q":[[0,"anstyle_query"],[8,"anstyle_query::windows"],[10,"core::option"],[11,"std::io::error"]],"d":["Check CLICOLOR status","Check CLICOLOR_FORCE status","Report whether this is running in CI","Check NO_COLOR status","Check <code>TERM</code> for ANSI color support","Check <code>TERM</code> for color support","Check COLORTERM for truecolor support","Windows-specific style queries","Enable ANSI escape codes …","Raw ENABLE_VIRTUAL_TERMINAL_PROCESSING on stdout/stderr"],"i":[0,0,0,0,0,0,0,0,0,0],"f":[[[],[[2,[1]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],0,[[],[[2,[1]]]],[[],[[4,[3]]]]],"c":[],"p":[[1,"bool"],[6,"Option",10],[1,"tuple"],[8,"Result",11]],"b":[]},\
"anstyle_wincon":{"doc":"Styling legacy Windows terminals","t":"KCCMHHHHH","n":["WinconStream","ansi","windows","write_colored","write_colored","get_colors","set_colors","stderr_initial_colors","stdout_initial_colors"],"q":[[0,"anstyle_wincon"],[4,"anstyle_wincon::ansi"],[5,"anstyle_wincon::windows"],[9,"anstyle::color"],[10,"core::option"],[11,"std::io::error"],[12,"std::io"],[13,"std::os::windows::io::handle"]],"d":["Extend <code>std::io::Write</code> with wincon styling","Low-level ANSI-styling","Low-level wincon-styling","Write colored text to the stream","Write ANSI colored text to the stream","Get the colors currently active on the console","Apply colors to future writes","Cached <code>get_colors</code> call for <code>std::io::stderr</code>","Cached <code>get_colors</code> call for <code>std::io::stdout</code>"],"i":[0,0,0,1,0,0,0,0,0],"f":[0,0,0,[[1,[3,[2]],[3,[2]],[5,[4]]],[[7,[6]]]],[[-1,[3,[2]],[3,[2]],[5,[4]]],[[7,[6]]],8],[-1,[[7,[[9,[2,2]]]]],10],[[-1,2,2],[[7,[9]]],10],[[],[[7,[[9,[2,2]]]]]],[[],[[7,[[9,[2,2]]]]]]],"c":[],"p":[[10,"WinconStream",0],[6,"AnsiColor",9],[6,"Option",10],[1,"u8"],[1,"slice"],[1,"usize"],[8,"Result",11],[10,"Write",12],[1,"tuple"],[10,"AsHandle",13]],"b":[]},\
"anyhow":{"doc":"github crates-io docs-rs","t":"FKPFHPIQNNNQNNNNNNNMNNNNNNNNQNNENNNNNNNNNNNNNNNNNNNNNNNNM","n":["Chain","Context","Err","Error","Ok","Ok","Result","anyhow","as_ref","as_ref","backtrace","bail","borrow","borrow","borrow_mut","borrow_mut","chain","clone","clone_into","context","context","default","deref","deref_mut","downcast","downcast_mut","downcast_ref","drop","ensure","fmt","fmt","format_err","from","from","from","from","into","into","into_iter","is","len","msg","new","new","next","next_back","root_cause","size_hint","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_context"],"q":[[0,"anyhow"],[57,"core::error"],[58,"std::backtrace"],[59,"core::fmt"],[60,"core::marker"],[61,"core::marker"],[62,"core::fmt"],[63,"core::fmt"],[64,"core::any"],[65,"core::ops::function"]],"d":["Iterator of a chain of source errors.","Provides the <code>context</code> method for <code>Result</code>.","Contains the error value","The <code>Error</code> type, a wrapper around a dynamic error type.","Equivalent to Ok::&lt;_, anyhow::Error&gt;(value).","Contains the success value","<code>Result&lt;T, Error&gt;</code>","Construct an ad-hoc error from a string or existing non-…","","","Get the backtrace for this Error.","Return early with an error.","","","","","An iterator of the chain of source errors contained by …","","","Wrap the error value with additional context.","Wrap the error value with additional context.","","","","Attempt to downcast the error object to a concrete type.","Downcast this error object by mutable reference.","Downcast this error object by reference.","","Return early with an error if a condition is not satisfied.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if <code>E</code> is the type held by this error object.","","Create a new error object from a printable error message.","Create a new error object from any error type.","","","","The lowest level cause of this error — this error’s …","","","","","","","","","","Wrap the error value with additional context that is …"],"i":[0,0,1,0,0,1,0,0,2,2,2,0,2,5,2,5,2,5,5,7,2,5,2,2,2,2,2,2,0,2,2,0,2,2,2,5,2,5,5,2,5,2,2,5,5,5,2,5,5,2,2,5,2,5,2,5,7],"f":[0,0,0,0,[-1,[[1,[-1]]],[]],0,0,0,[2,3],[2,3],[2,4],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,5],[5,5],[[-1,-2],6,[],[]],[[7,-1],[[1,[-2,2]]],[8,9,10],[]],[[2,-1],2,[8,9,10]],[[],5],[2,-1,[]],[2,-1,[]],[2,[[11,[-1,2]]],[8,12,9,10]],[2,[[13,[-1]]],[8,12,9,10]],[2,[[13,[-1]]],[8,12,9,10]],[2,6],0,[[2,14],15],[[2,14],15],0,[16,-1,[]],[-1,2,[3,9,10]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,17],[5,18],[-1,2,[8,12,9,10]],[-1,2,[3,9,10]],[3,5],[5,[[13,[-1]]],[]],[5,[[13,[-1]]],[]],[2,3],[5,[[6,[18,[13,[18]]]]]],[-1,-2,[],[]],[-1,19,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[[7,-2],[[1,[-3,2]]],[8,9,10],[[22,[],[[21,[-1]]]]],[]]],"c":[],"p":[[8,"Result",0],[5,"Error",0],[10,"Error",57],[5,"Backtrace",58],[5,"Chain",0],[1,"tuple"],[10,"Context",0],[10,"Display",59],[10,"Send",60],[10,"Sync",60],[6,"Result",61],[10,"Debug",59],[6,"Option",62],[5,"Formatter",59],[8,"Result",59],[1,"never"],[1,"bool"],[1,"usize"],[5,"String",63],[5,"TypeId",64],[17,"Output"],[10,"FnOnce",65]],"b":[[8,"impl-AsRef%3Cdyn+Error+%2B+Send+%2B+Sync%3E-for-Error"],[9,"impl-AsRef%3Cdyn+Error%3E-for-Error"],[29,"impl-Debug-for-Error"],[30,"impl-Display-for-Error"]]},\
"bst_words":{"doc":"单词计数程序","t":"CCCFFNNNNNNNNONNNNNNNNNNNONNOONNNNNNNNNNNPGPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHHH","n":["bst","type","utils","BSTNode","BSTree","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","delete","deserialize","deserialize","find","fmt","fmt","from","from","insert_fn","into","into","left","new","new","right","root","serialize","serialize","to_owned","to_owned","traverse","try_from","try_from","try_into","try_into","type_id","type_id","In","Order","Post","Pre","Word","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","count","deserialize","eq","fmt","fmt","from","from","into","into","new","partial_cmp","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","filter_word","read_from_file","write_str_to_file"],"q":[[0,"bst_words"],[3,"bst_words::bst"],[41,"bst_words::type"],[78,"bst_words::utils"],[81,"core::clone"],[82,"alloc::string"],[83,"core::result"],[84,"core::cmp"],[85,"core::fmt"],[86,"serde::de"],[87,"serde::de"],[88,"core::fmt"],[89,"core::ops::function"],[90,"serde::ser"],[91,"serde::ser"],[92,"core::cmp"],[93,"anyhow"],[94,"std::path"],[95,"core::convert"]],"d":["二叉搜索树","单词和遍历顺序定义","文件操作模块","…","表示二叉搜索树，包括根结点。","","","","","","","","","结点的数据","删除指定数据的结点。","","","查找指定数据的结点。","","","Returns the argument unchanged.","Returns the argument unchanged.","插入结点并执行指定操作。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","结点的左子结点","创建一个新的结点实例。","创建一个新的二叉搜索树实例。","结点的右子结点","树的根结点","","","","","遍历二叉搜索树，打印结点数据。","","","","","","","","…","","","表示一个单词，包括单词的值和出现次数。","将单词的出现次数加一。","","","","","","","","","","获取单词的出现次数。","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","创建一个新的 Word 实例。","","","","","","","","","","","","单词的值","从字符串中过滤出单词。","从指定文件中读取字符串。","将字符串写入指定文件。"],"i":[0,0,0,0,0,1,3,1,3,1,3,1,3,1,3,1,3,3,1,3,1,3,3,1,3,1,1,3,1,3,1,3,1,3,3,1,3,1,3,1,3,19,0,19,19,0,21,19,21,19,21,19,21,19,21,21,21,21,21,21,21,19,21,19,21,21,21,21,19,21,21,19,21,19,21,19,21,21,0,0,0],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],2],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,[[[3,[-1]],-1],[[6,[4,5]]],[7,2,8]],[-1,[[6,[[1,[-2]]]]],9,10],[-1,[[6,[[3,[-2]]]]],9,10],[[[3,[-1]],-1],[[11,[[1,[-1]]]]],[7,2,8]],[[[1,[-1]],12],13,14],[[[3,[-1]],12],13,14],[-1,-1,[]],[-1,-1,[]],[[[3,[-1]],-1,-2],4,[7,2,8],[[16,[[15,[[1,[-1]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[1,[-1]]],[]],[[],[[3,[-1]]],[7,2,8]],0,0,[[[1,[-1]],-2],6,17,18],[[[3,[-1]],-2],6,17,18],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]],19],4,[7,2,8]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],0,0,0,0,0,[21,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[21,21],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[21,21],22],[21,23],[-1,[[6,[21]]],9],[[21,21],24],[[21,12],13],[[21,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,21],[[21,21],[[11,[22]]]],[[21,-1],6,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],0,[5,[[0,[[27,[],[[25,[26]]]]]]]],[-1,[[6,[5,28]]],[[30,[29]]]],[[-1,26],[[6,[4,28]]],[[30,[29]]]]],"c":[],"p":[[5,"BSTNode",3],[10,"Clone",81],[5,"BSTree",3],[1,"tuple"],[5,"String",82],[6,"Result",83],[10,"Ord",84],[10,"Display",85],[10,"Deserializer",86],[10,"Deserialize",86],[6,"Option",87],[5,"Formatter",85],[8,"Result",85],[10,"Debug",85],[5,"Box",88],[10,"FnMut",89],[10,"Serialize",90],[10,"Serializer",90],[6,"Order",41],[5,"TypeId",91],[5,"Word",41],[6,"Ordering",84],[1,"u32"],[1,"bool"],[17,"Item"],[1,"str"],[10,"Iterator",92],[5,"Error",93],[5,"Path",94],[10,"AsRef",95]],"b":[[59,"impl-Debug-for-Word"],[60,"impl-Display-for-Word"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"Q","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"clap":{"doc":"<strong>Command Line Argument Parser for Rust</strong>","t":"PPPFGFFKPGFKPPPPPPIPPKPPPPFPPKPPPKPPPKGPNNNNNNNNNNNNNNQNNNNNNNNMMMMNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNMQMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNQNNMNNNNNNNNNNNNPPFGFGFFFPPPPPTPFPPFPPPPPKPFFFFPRFFFFFPGTPPPFFFFFKPFPPPRGFKFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNPPFGTTPPPPPPPPPPTGPTTTTFFPTTTPPFPFTFFTPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPGGPFPPPPFKGPPPPPPPPPFPPPPPPPPIFPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFPPPPFFGFPGFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOO","n":["Always","AnyPath","Append","Arg","ArgAction","ArgGroup","ArgMatches","Args","Auto","ColorChoice","Command","CommandFactory","CommandName","CommandString","CommandWithArguments","Count","DirPath","EmailAddress","Error","ExecutablePath","FilePath","FromArgMatches","Help","HelpLong","HelpShort","Hostname","Id","Never","Other","Parser","Set","SetFalse","SetTrue","Subcommand","Unknown","Url","Username","ValueEnum","ValueHint","Version","about","action","after_help","after_long_help","alias","alias","aliases","aliases","allow_external_subcommands","allow_hyphen_values","allow_missing_positional","allow_negative_numbers","arg","arg","arg","arg_required_else_help","args","args","args_conflicts_with_subcommands","args_override_self","args_present","as_ref","as_str","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","author","before_help","before_long_help","bin_name","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","color","command","command","command_for_update","conflicts_with","conflicts_with","conflicts_with_all","conflicts_with_all","contains_id","debug_assert","default","default","default","default","default","default","default","default_missing_value","default_missing_value_os","default_missing_values","default_missing_values_os","default_value","default_value_if","default_value_ifs","default_values","defer","disable_colored_help","disable_help_flag","disable_help_subcommand","disable_version_flag","display_name","display_order","display_order","dont_delimit_trailing_values","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","error","exclusive","external_subcommand_value_parser","find_subcommand","find_subcommand_mut","flatten_help","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_str","from_str","from_str","get_about","get_action","get_after_help","get_after_long_help","get_all_aliases","get_all_aliases","get_all_long_flag_aliases","get_all_short_aliases","get_all_short_flag_aliases","get_arg_conflicts_with","get_args","get_arguments","get_author","get_before_help","get_before_long_help","get_bin_name","get_color","get_count","get_default_values","get_display_name","get_external_subcommand_value_parser","get_flag","get_groups","get_help","get_help_heading","get_id","get_id","get_index","get_long","get_long_about","get_long_and_visible_aliases","get_long_flag","get_long_help","get_long_version","get_many","get_matches","get_matches_from","get_matches_mut","get_name","get_next_help_heading","get_num_args","get_occurrences","get_one","get_opts","get_positionals","get_possible_values","get_raw","get_raw_occurrences","get_short","get_short_and_visible_aliases","get_short_flag","get_styles","get_subcommand_help_heading","get_subcommand_value_name","get_subcommands","get_subcommands_mut","get_value_delimiter","get_value_hint","get_value_names","get_value_parser","get_value_terminator","get_version","get_visible_aliases","get_visible_aliases","get_visible_long_flag_aliases","get_visible_short_aliases","get_visible_short_flag_aliases","global","group","group","group_id","groups","groups","has_subcommand","has_subcommands","hash","hash","help","help_expected","help_heading","help_template","hide","hide","hide_default_value","hide_long_help","hide_possible_values","hide_possible_values","hide_short_help","id","id","ids","ignore_case","ignore_errors","index","index","index_of","indices_of","infer_long_args","infer_subcommands","into","into","into","into","into","into","into","into","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","is_allow_external_subcommands_set","is_allow_hyphen_values_set","is_allow_missing_positional_set","is_allow_negative_numbers_set","is_arg_required_else_help_set","is_args_conflicts_with_subcommands_set","is_disable_colored_help_set","is_disable_help_flag_set","is_disable_help_subcommand_set","is_disable_version_flag_set","is_dont_delimit_trailing_values_set","is_exclusive_set","is_flatten_help_set","is_global_set","is_hide_default_value_set","is_hide_long_help_set","is_hide_possible_values_set","is_hide_set","is_hide_set","is_hide_short_help_set","is_ignore_case_set","is_last_set","is_multicall_set","is_multiple","is_next_line_help_set","is_next_line_help_set","is_no_binary_name_set","is_positional","is_propagate_version_set","is_require_equals_set","is_required_set","is_required_set","is_subcommand_negates_reqs_set","is_subcommand_precedence_over_arg_set","is_subcommand_required_set","is_trailing_var_arg_set","last","long","long_about","long_flag","long_flag_alias","long_flag_aliases","long_help","long_version","max_term_width","multicall","multiple","mut_arg","mut_args","mut_group","mut_subcommand","name","new","new","new","next_display_order","next_help_heading","next_line_help","next_line_help","no_binary_name","num_args","override_help","override_usage","overrides_with","overrides_with_all","parse","parse_from","parser","partial_cmp","partial_cmp","possible_values","print_help","print_long_help","propagate_version","raw","remove_many","remove_occurrences","remove_one","remove_subcommand","render_help","render_long_help","render_long_version","render_usage","render_version","require_equals","required","required","required_if_eq","required_if_eq_all","required_if_eq_any","required_unless_present","required_unless_present_all","required_unless_present_any","requires","requires","requires_all","requires_if","requires_ifs","set_bin_name","short","short_alias","short_aliases","short_flag","short_flag_alias","short_flag_aliases","styles","subcommand","subcommand","subcommand_help_heading","subcommand_matches","subcommand_name","subcommand_negates_reqs","subcommand_precedence_over_arg","subcommand_required","subcommand_value_name","subcommands","takes_values","term_width","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_possible_value","to_possible_value","to_string","to_string","to_string","to_string","trailing_var_arg","try_contains_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_many","try_get_matches","try_get_matches_from","try_get_matches_from_mut","try_get_occurrences","try_get_one","try_get_raw","try_get_raw_occurrences","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_parse","try_parse_from","try_remove_many","try_remove_occurrences","try_remove_one","try_update_from","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from","update_from_arg_matches","update_from_arg_matches_mut","value_delimiter","value_hint","value_name","value_names","value_parser","value_parser","value_source","value_terminator","value_variants","value_variants","version","visible_alias","visible_alias","visible_aliases","visible_aliases","visible_long_flag_alias","visible_long_flag_aliases","visible_short_alias","visible_short_aliases","visible_short_flag_alias","visible_short_flag_aliases","AnyPath","Append","Arg","ArgAction","ArgGroup","ArgPredicate","BoolValueParser","BoolishValueParser","Command","CommandName","CommandString","CommandWithArguments","Count","DirPath","EMPTY","EmailAddress","EnumValueParser","Equals","ExecutablePath","FalseyValueParser","FilePath","Help","HelpLong","HelpShort","Hostname","IntoResettable","IsPresent","MapValueParser","NonEmptyStringValueParser","OsStr","OsStringValueParser","Other","Parser","PathBufValueParser","PossibleValue","PossibleValuesParser","RangedI64ValueParser","RangedU64ValueParser","Reset","Resettable","SINGLE","Set","SetFalse","SetTrue","Str","StringValueParser","StyledStr","Styles","TryMapValueParser","TypedValueParser","Unknown","UnknownArgumentValueParser","Url","Username","Value","Value","ValueHint","ValueParser","ValueParserFactory","ValueRange","Version","alias","aliases","and_suggest","ansi","as_os_str","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_error","get_header","get_help","get_invalid","get_literal","get_name","get_name_and_aliases","get_placeholder","get_usage","get_valid","hash","hash","hash","hash","header","help","hide","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","invalid","is_hide_set","literal","map","matches","max_values","min_values","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","os_string","parse","parse","parse","parse","parse","parse","parse_","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref_","parse_ref_","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path_buf","placeholder","plain","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","range","range","start_bound","string","styled","styling","suggest","suggest_arg","takes_values","to_os_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usage","valid","value_parser","write_char","write_str","Ansi","Ansi256","Ansi256Color","AnsiColor","BLINK","BOLD","Black","Blue","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","CURLY_UNDERLINE","Color","Cyan","DASHED_UNDERLINE","DIMMED","DOTTED_UNDERLINE","DOUBLE_UNDERLINE","EffectIter","Effects","Green","HIDDEN","INVERT","ITALIC","Magenta","Red","Reset","Rgb","RgbColor","STRIKETHROUGH","Style","Styles","UNDERLINE","White","Yellow","b","bg_color","bitor","bitor","bitor_assign","bitor_assign","blink","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","contains","default","default","default","dimmed","effects","eq","eq","eq","eq","eq","eq","eq","eq","eq","fg_color","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ansi","g","get_bg_color","get_effects","get_fg_color","get_underline_color","hash","hash","hash","hash","hash","hash","hash","hidden","index","insert","into","into","into","into","into","into","into","into","into_ansi","into_iter","invert","is_bright","is_plain","is_plain","italic","iter","new","new","next","on","on","on","on","on_default","on_default","on_default","on_default","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","remove","render","render","render","render_bg","render_bg","render_bg","render_bg","render_fg","render_fg","render_fg","render_fg","render_reset","set","strikethrough","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","underline_color","write_reset_to","write_to","ActualNumValues","ArgumentConflict","Bool","ContextKind","ContextValue","Custom","DefaultFormatter","DisplayHelp","DisplayHelpOnMissingArgumentOrSubcommand","DisplayVersion","Err","Error","ErrorFormatter","ErrorKind","ExpectedNumValues","Format","InvalidArg","InvalidSubcommand","InvalidSubcommand","InvalidUtf8","InvalidValue","InvalidValue","Io","KindFormatter","MinValues","MissingRequiredArgument","MissingSubcommand","NoEquals","None","Number","Ok","PriorArg","Result","RichFormatter","String","Strings","StyledStr","StyledStrs","Suggested","SuggestedArg","SuggestedCommand","SuggestedSubcommand","SuggestedValue","TooFewValues","TooManyValues","TrailingArg","UnknownArgument","Usage","ValidSubcommand","ValidValue","ValueValidation","WrongNumberOfValues","apply","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","exit","exit_code","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format_error","format_error","format_error","from","from","from","from","from","from","from","from","get","hash","hash","insert","into","into","into","into","into","into","kind","new","print","raw","render","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","use_stderr","with_cmd","ArgMatches","CommandLine","DefaultValue","Downcast","EnvVariable","IdsRef","Indices","MatchesError","RawValues","UnknownArgument","ValueSource","Values","ValuesRef","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","default","default","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","partial_cmp","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","actual","expected"],"q":[[0,"clap"],[500,"clap::builder"],[1039,"clap::builder::styling"],[1275,"clap::error"],[1417,"clap::parser"],[1536,"clap::parser::MatchesError"],[1538,"core::convert"],[1539,"core::iter::traits::collect"],[1540,"alloc::string"],[1541,"core::cmp"],[1542,"core::fmt"],[1543,"core::option"],[1544,"std::ffi::os_str"],[1545,"core::convert"],[1546,"alloc::vec"],[1547,"core::iter::traits::iterator"],[1548,"core::any"],[1549,"core::clone"],[1550,"core::marker"],[1551,"core::marker"],[1552,"clap_builder::parser::matches::arg_matches"],[1553,"core::ops::function"],[1554,"core::ops::function"],[1555,"clap_builder::parser::matches::arg_matches"],[1556,"core::convert"],[1557,"core::cmp"],[1558,"alloc::boxed"],[1559,"core::cmp"],[1560,"core::marker"]],"d":["Enables colored output regardless of whether or not the …","Any existing path.","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Container for parse results.","Parse a set of arguments into a user-defined container.","Enables colored output only when the output is going to a …","Represents the color preferences for program output","Build a command-line interface.","Create a <code>Command</code> relevant for a user-defined container.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Path to a directory.","Email address.","Command Line Argument Parser Error","Path to an executable file.","Path to a file.","Converts an instance of <code>ArgMatches</code> to a user-defined …","When encountered, display <code>Command::print_help</code>","When encountered, display <code>Command::print_long_help</code>","When encountered, display <code>Command::print_help</code>","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","<code>Arg</code> or <code>ArgGroup</code> identifier","Disables colored output no matter if the output is going …","None of the hints below apply. Disables shell completion …","Parse command-line arguments into <code>Self</code>.","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","Parse a sub-command into a user-defined enum.","Default value if hint is not specified. Follows shell …","Complete web address.","Name of a local operating system user.","Parse arguments into enums.","Provide shell with hint on how to complete an argument.","When encountered, display <code>Command::version</code>","Sets the program’s description for the short help (<code>-h</code>).","Specify how to react to an argument when parsing it.","Free-form help text for after auto-generated short help (<code>-h</code>…","Free-form help text for after auto-generated long help (…","Add an alias, which functions as a hidden long flag.","Sets a hidden alias to this subcommand.","Add aliases, which function as hidden long flags.","Sets multiple hidden aliases to this subcommand.","Assume unexpected positional arguments are a <code>subcommand</code>.","Allows values which start with a leading hyphen (<code>-</code>)","Allows one to implement two styles of CLIs where …","Allows negative numbers to pass as values.","Adds an argument to this group by name","Adds an argument to the list of valid possibilities.","Create an <code>Arg</code> from a usage string.","Exit gracefully if no arguments are present (e.g. <code>$ myprog</code>…","Adds multiple arguments to this group by name","Adds multiple arguments to the list of valid possibilities.","Specifies that use of an argument prevents the use of …","Replace prior occurrences of arguments rather than error","Check if any args were present on the command line","","Get the raw string of the <code>Id</code>","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","Sets the author(s) for the help message.","Free-form help text for before auto-generated short help (…","Free-form help text for before auto-generated long help (…","Overrides the runtime-determined name of the binary for …","","","","","","","","","","","","","","","","","","Prepare for introspecting on all included <code>Command</code>s","Define <code>Command</code> line arguments","","","","","","","","","","","","","","","","","","","Sets when to color output.","Build a <code>Command</code> that can instantiate <code>Self</code>.","Requires <code>cargo</code> feature flag to be enabled.","Build a <code>Command</code> that can update <code>self</code>.","This argument is mutually exclusive with the specified …","Specify an argument or group that must <strong>not</strong> be present when …","This argument is mutually exclusive with the specified …","Specify arguments or groups that must <strong>not</strong> be present when …","Check if values are present for the argument or group id","Catch problems earlier in the development cycle.","","","","","","","","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when not present.","Specifies the value of the argument if <code>arg</code> has been used …","Specifies multiple values and conditions in the same …","Value for the argument when not present.","Delay initialization for parts of the <code>Command</code>","Disables colorized help messages.","Disables <code>-h</code> and <code>--help</code> flag.","Disables the <code>help</code> <code>subcommand</code>.","Disables <code>-V</code> and <code>--version</code> flag.","Overrides the runtime-determined display name of the …","Allows custom ordering of args within the help message.","Set the placement of this subcommand within the help.","Disables the automatic delimiting of values after <code>--</code> or …","","","","","","","","","","","Error reporting","Custom error message for post-parsing validation","This argument must be passed alone; it conflicts with all …","Specifies how to parse external subcommand arguments.","Find subcommand such that its name or one of aliases …","Find subcommand such that its name or one of aliases …","Flatten subcommand help into the current command’s help","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Parse an argument into <code>Self</code>.","","","Get the help message specified via <code>Command::about</code>.","Behavior when parsing the argument","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get <em>all</em> aliases for this argument, if any, both visible …","Iterate through the set of <em>all</em> the aliases for this …","Iterate through the set of <em>all</em> the long aliases for this …","Get <em>all</em> short aliases for this argument, if any, both …","Iterate through the set of <em>all</em> the short aliases for this …","Get a list of all arguments the given argument conflicts …","Getters for all args. It will return a vector of <code>Id</code>","Iterate through the set of arguments.","Get the authors of the cmd.","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get the name of the binary.","Should we color the output?","Gets the value of a specific <code>ArgAction::Count</code> flag","Get the default values specified for this argument, if any","Get the name of the binary.","Configured parser for values passed to an external …","Gets the value of a specific <code>ArgAction::SetTrue</code> or …","Iterate through the set of groups.","Get the help specified for this argument, if any","Get the help heading specified for this argument, if any","Get the name of the argument","Get the name of the group","Get the index of this argument, if any","Get the long option name for this argument, if any","Get the help message specified via <code>Command::long_about</code>.","Get the long option name and its visible aliases, if any","Get the long flag of the subcommand.","Get the long help specified for this argument, if any","Get the long version of the cmd.","Iterate over values of a specific option or positional …","Parse <code>env::args_os</code>, exiting on failure.","Parse the specified arguments, exiting on failure.","Parse <code>env::args_os</code>, exiting on failure.","Get the name of the cmd.","Get the custom section heading specified via …","Get the number of values for this argument.","Iterate over the values passed to each occurrence of an …","Gets the value of a specific option or positional argument.","Iterate through the <em>options</em>.","Iterate through the <em>positionals</em> arguments.","Get the names of possible values for this argument. Only …","Iterate over the original argument values.","Iterate over the original values for each occurrence of an …","Get the short option name for this argument, if any","Get the short option name and its visible aliases, if any","Get the short flag of the subcommand.","Return the current <code>Styles</code> for the <code>Command</code>","Returns the help heading for listing subcommands.","Returns the subcommand value name.","Iterate through the set of subcommands, getting a …","Iterate through the set of subcommands, getting a mutable …","Get the delimiter between multiple values","Get the value hint of this argument","Get the names of values for this argument.","Configured parser for argument values","Get the value terminator for this argument. The …","Get the version of the cmd.","Get visible aliases for this argument, if any","Iterate through the <em>visible</em> aliases for this subcommand.","Iterate through the <em>visible</em> long aliases for this …","Get visible short aliases for this argument, if any","Iterate through the <em>visible</em> short aliases for this …","Specifies that an argument can be matched to all child …","The name of the <code>ArgGroup</code> the argument belongs to.","Adds an <code>ArgGroup</code> to the application.","Report the <code>ArgGroup::id</code> for this set of arguments","The names of <code>ArgGroup</code>’s the argument belongs to.","Adds multiple <code>ArgGroup</code>s to the <code>Command</code> at once.","Test whether <code>Self</code> can parse a specific subcommand","Returns <code>true</code> if this <code>Command</code> has subcommands.","","","Sets the description of the argument for short help (<code>-h</code>).","Panic if help descriptions are omitted.","Override the current help section.","Sets the help template to be used, overriding the default …","Do not display the argument in help message.","Specifies that this <code>subcommand</code> should be hidden from help …","Do not display the default value of the argument in the …","Hides an argument from long help (<code>--help</code>).","Do not display the possible values in the help message.","Tells <code>clap</code> <em>not</em> to print possible values when displaying …","Hides an argument from short help (<code>-h</code>).","Set the identifier used for referencing this argument in …","Sets the group name.","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","Match values against <code>PossibleValuesParser</code> without matching …","Try not to fail on parse errors, like missing option …","Specifies the index of a positional argument <strong>starting at</strong> 1.","","The first index of that an argument showed up.","All indices an argument appeared at when parsing.","Allow partial matches of long arguments or their aliases.","Allow partial matches of subcommand names and their aliases…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Report whether <code>Command::allow_external_subcommands</code> is set","Report whether <code>Arg::allow_hyphen_values</code> is set","Report whether <code>Command::allow_missing_positional</code> is set","Report whether <code>Arg::allow_negative_numbers</code> is set","Report whether <code>Command::arg_required_else_help</code> is set","Report whether <code>Command::args_conflicts_with_subcommands</code> is …","Report whether <code>Command::disable_colored_help</code> is set","Report whether <code>Command::disable_help_flag</code> is set","Report whether <code>Command::disable_help_subcommand</code> is set","Report whether <code>Command::disable_version_flag</code> is set","Report whether <code>Command::dont_delimit_trailing_values</code> is set","Reports whether <code>Arg::exclusive</code> is set","Get the custom section heading specified via …","Report whether <code>Arg::global</code> is set","Report whether <code>Arg::hide_default_value</code> is set","Report whether <code>Arg::hide_long_help</code> is set","Report whether <code>Arg::hide_possible_values</code> is set","Report whether <code>Arg::hide</code> is set","Report whether <code>Command::hide</code> is set","Report whether <code>Arg::hide_short_help</code> is set","Reports whether <code>Arg::ignore_case</code> is set","Reports whether <code>Arg::last</code> is set","Report whether <code>Command::multicall</code> is set","Return true if the group allows more than one of the …","Report whether <code>Arg::next_line_help</code> is set","Report whether <code>Command::next_line_help</code> is set","Report whether <code>Command::no_binary_name</code> is set","Checks whether this argument is a positional or not.","Report whether <code>Command::propagate_version</code> is set","Report whether <code>Arg::require_equals</code> is set","Reports whether <code>Arg::required</code> is set","Reports whether <code>ArgGroup::required</code> is set","Report whether <code>Command::subcommand_negates_reqs</code> is set","Report whether <code>Command::subcommand_precedence_over_arg</code> is …","Report whether <code>Command::subcommand_required</code> is set","Report whether <code>Arg::trailing_var_arg</code> is set","This arg is the last, or final, positional argument (i.e. …","Sets the long version of the argument without the …","Sets the program’s description for the long help (<code>--help</code>…","Sets the long version of the subcommand flag without the …","Add an alias, which functions as a “hidden” long flag …","Add aliases, which function as “hidden” long flag …","Sets the description of the argument for long help (<code>--help</code>…","Sets the version for the long version (<code>--version</code>) and help …","Limit the line length for wrapping help when using the …","Multiple-personality program dispatched on the binary name …","Allows more than one of the <code>Arg</code>s in this group to be used. …","Allows one to mutate an <code>Arg</code> after it’s been added to a …","Allows one to mutate all <code>Arg</code>s after they’ve been added …","Allows one to mutate an <code>ArgGroup</code> after it’s been added …","Allows one to mutate a <code>Command</code> after it’s been added as …","(Re)Sets the program’s name.","Create a new <code>Arg</code> with a unique name.","Create a <code>ArgGroup</code> using a unique name.","Creates a new instance of an <code>Command</code>.","Change the starting value for assigning future display …","Set the default section heading for future args.","Render the help on the line after the argument.","Places the help string for all arguments and subcommands …","Specifies that the parser should not assume the first …","Specifies the number of arguments parsed per occurrence","Overrides the <code>clap</code> generated help message (both <code>-h</code> and …","Overrides the <code>clap</code> generated usage string for help and …","Sets an overridable argument.","Sets multiple mutually overridable arguments by name.","Parse from <code>std::env::args_os()</code>, exit on error","Parse from iterator, exit on error","<code>Command</code> line argument parser","","","Report all <code>possible_values</code>","Prints the short help message (<code>-h</code>) to <code>io::stdout()</code>.","Prints the long help message (<code>--help</code>) to <code>io::stdout()</code>.","Specifies to use the version of the current command for …","Consume all following arguments.","Return values of a specific option or positional argument.","Return values for each occurrence of an option.","Returns the value of a specific option or positional …","Return the name and <code>ArgMatches</code> of the current subcommand.","Render the short help message (<code>-h</code>) to a <code>StyledStr</code>","Render the long help message (<code>--help</code>) to a <code>StyledStr</code>.","Version message rendered as if the user ran <code>--version</code>.","Usage statement","Version message rendered as if the user ran <code>-V</code>.","Requires that options use the <code>--option=val</code> syntax","Specifies that the argument must be present.","Require an argument from the group to be present when …","This argument is required only if the specified <code>arg</code> is …","Specify this argument is required based on multiple …","Specify this argument is required based on multiple …","Set this arg as required as long as the specified argument …","Sets this arg as required unless <em>all</em> of the specified …","Sets this arg as required unless <em>any</em> of the specified …","Sets an argument that is required when this one is present","Specify an argument or group that must be present when …","Specify arguments or groups that must be present when this …","Require another argument if this arg matches the …","Allows multiple conditional requirements.","Set binary name. Uses <code>&amp;mut self</code> instead of <code>self</code>.","Sets the short version of the argument without the …","Add an alias, which functions as a hidden short flag.","Add aliases, which functions as a hidden short flag.","Sets the short version of the subcommand flag without the …","Add an alias, which functions as  “hidden” short flag …","Add aliases, which function as “hidden” short flag …","Sets the <code>Styles</code> for terminal output","Adds a subcommand to the list of valid possibilities.","The name and <code>ArgMatches</code> of the current subcommand.","Sets the help heading used for subcommands when printing …","The <code>ArgMatches</code> for the current subcommand.","The name of the current subcommand.","Allows <code>subcommands</code> to override all requirements of the …","Prevent subcommands from being consumed as an arguments …","If no <code>subcommand</code> is present at runtime, error and exit …","Sets the value name used for subcommands when printing …","Adds multiple subcommands to the list of valid …","Returns whether this action accepts values on the …","Sets the terminal width at which to wrap help messages.","","","","","","","","","The canonical argument value.","","","","","","This is a “VarArg” and everything that follows should …","Non-panicking version of <code>ArgMatches::contains_id</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::get_many</code>","Parse <code>env::args_os</code>, returning a <code>clap::Result</code> on failure.","Parse the specified arguments, returning a <code>clap::Result</code> on …","Parse the specified arguments, returning a <code>clap::Result</code> on …","Non-panicking version of <code>ArgMatches::get_occurrences</code>","Non-panicking version of <code>ArgMatches::get_one</code>","Non-panicking version of <code>ArgMatches::get_raw</code>","Non-panicking version of <code>ArgMatches::get_raw_occurrences</code>","","","","","","","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Non-panicking version of <code>ArgMatches::remove_many</code>","Non-panicking version of <code>ArgMatches::remove_occurrences</code>","Non-panicking version of <code>ArgMatches::remove_one</code>","Update from iterator, return Err on error.","","","","","","","","","Update from iterator, exit on error","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Allow grouping of multiple values via a delimiter.","Provide the shell a hint about how to complete this …","Placeholder for the argument’s value in the help message …","Placeholders for the argument’s values in the help …","Specify the typed behavior of the argument.","Select a <code>ValueParser</code> implementation from the intended type","Report where argument value came from","Sentinel to <strong>stop</strong> parsing multiple values of a given …","All possible argument values, in display order.","","Sets the version for the short version (<code>-V</code>) and help …","Add an alias, which functions as a visible long flag.","Sets a visible alias to this subcommand.","Add aliases, which function as visible long flags.","Sets multiple visible aliases to this subcommand.","Add an alias, which functions as a “visible” long flag …","Add aliases, which function as <em>visible</em> long flag …","Add an alias, which functions as a visible short flag.","Add aliases, which function as visible short flags.","Add an alias, which functions as  “visible” short flag …","Add aliases, which function as <em>visible</em> short flag …","Any existing path.","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Operations to perform on argument values","Implementation for <code>ValueParser::bool</code>","Parse bool-like string values, everything else is <code>true</code>","Build a command-line interface.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Path to a directory.","Nor argument values, or a flag","Email address.","Parse an <code>ValueEnum</code> value.","Does the argument match the specified value?","Path to an executable file.","Parse false-like string values, everything else is <code>true</code>","Path to a file.","When encountered, display <code>Command::print_help</code>","When encountered, display <code>Command::print_long_help</code>","When encountered, display <code>Command::print_help</code>","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","Convert to the intended resettable type","Is the argument present?","Adapt a <code>TypedValueParser</code> from one value to another","Parse non-empty string values","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::os_string</code>","None of the hints below apply. Disables shell completion …","Generated parser, usually <code>ValueParser</code>.","Implementation for <code>ValueParser::path_buf</code>","A possible value of an argument.","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Parse number that fall within a range of values","Parse number that fall within a range of values","Reset builder value","Clearable builder value","A single argument value, the most common case for options","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::string</code>","Terminal-styling container","Terminal styling definitions","Adapt a <code>TypedValueParser</code> from one value to another","Parse/validate argument values","Default value if hint is not specified. Follows shell …","When encountered, report ErrorKind::UnknownArgument","Complete web address.","Name of a local operating system user.","Overwrite builder value","Argument’s value type","Provide shell with hint on how to complete an argument.","Parse/validate argument values","Register a type with value_parser!","Values per occurrence for an argument","When encountered, display <code>Command::version</code>","Sets a <em>hidden</em> alias for this argument value.","Sets multiple <em>hidden</em> aliases for this argument value.","Extend the suggestions","Display using ANSI Escape Code styling","Get the raw string as an <code>std::ffi::OsStr</code>","","","","","","","Get the raw string of the <code>Str</code>","<code>bool</code> parser for argument values","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error heading","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Error heading","General Heading style, e.g. <code>help_heading</code>","Get the help specified for this argument, if any","Highlight invalid usage","Literal command-line syntax, e.g. <code>--help</code>","Get the name of the argument value","Returns all valid values of the argument value.","Descriptions within command-line syntax, e.g. <code>value_name</code>","Usage heading","Highlight suggested usage","","","","","General Heading style, e.g. <code>help_heading</code>","Sets the help description of the value.","Hides this value from help and shell completions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to the intended resettable type","","","","","","","","","","","","","","","","","","","","","","","","Highlight invalid usage","Report if <code>PossibleValue::hide</code> is set","Literal command-line syntax, e.g. <code>--help</code>","Adapt a <code>TypedValueParser</code> from one value to another","Tests if the value is valid for this argument value","Most number of values the argument accepts","Fewest number of values the argument accepts","Custom parser for argument values","Create a <code>PossibleValue</code> with its name.","Create a range","Create an empty buffer","Implementation for <code>ValueParser::string</code>","Implementation for <code>ValueParser::os_string</code>","Implementation for <code>ValueParser::path_buf</code>","Parse an <code>ValueEnum</code>","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Select full range of <code>i64</code>","Select full range of <code>u64</code>","Implementation for <code>ValueParser::bool</code>","Parse false-like string values, everything else is <code>true</code>","Parse bool-like string values, everything else is <code>true</code>","Parse non-empty string values","<code>OsString</code> parser for argument values","Parse the argument value","","","","","","Parse the argument value","Parse the argument value","","","","","","","","","","","","","","","Parse the argument value","","","","","","<code>PathBuf</code> parser for argument values","Descriptions within command-line syntax, e.g. <code>value_name</code>","No terminal styling","Reflect on enumerated value properties","Reflect on enumerated value properties","","","","","","","","Narrow the supported range","Narrow the supported range","","<code>String</code> parser for argument values","Default terminal styling","Terminal <code>Styles</code> for help and error output","Provide a general suggestion","Suggest an alternative argument","Report whether the argument takes any values (ie is a flag)","Get the raw string as an <code>OsString</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adapt a <code>TypedValueParser</code> from one value to another","","Describes the content of <code>AnyValue</code>","","","","","","","","","","","","","","","","","","","","","","","Usage heading","Highlight suggested usage","Create the specified <code>Self::Parser</code>","","","","","256 (8-bit) color support","Available 4-bit ANSI color palette codes","","","Black: #0 (foreground code <code>30</code>, background code <code>40</code>).","Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).","Bright black: #0 (foreground code <code>90</code>, background code <code>100</code>).","Bright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).","Bright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).","Bright green: #2 (foreground code <code>92</code>, background code <code>102</code>).","Bright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>…","Bright red: #1 (foreground code <code>91</code>, background code <code>101</code>).","Bright white: #7 (foreground code <code>97</code>, background code <code>107</code>).","Bright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>…","","Any ANSI color code scheme","Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).","","","","","","A set of text effects","Green: #2 (foreground code <code>32</code>, background code <code>42</code>).","","Swap foreground and background colors; inconsistent …","Not widely supported. Sometimes treated as inverse or blink","Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).","Red: #1 (foreground code <code>31</code>, background code <code>41</code>).","Reset terminal formatting","","24-bit ANSI RGB color codes","Characters legible but marked as if for deletion. Not …","ANSI Text styling","Terminal styling definitions","Style extensions exist for Kitty, VTE, mintty and iTerm2.","White: #7 (foreground code <code>37</code>, background code <code>47</code>).","Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).","","Set background color","","","","","Apply <code>blink</code> effect","Apply <code>bold</code> effect","","","","","","","","","","","","","","","","","Change the color to/from bright","Reset all effects in-place","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all of the effects in <code>other</code> are contained …","","","","Apply <code>dimmed</code> effect","Set text effects","","","","","","","","","","Set foreground color","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Apply <code>hidden</code> effect","","Inserts the specified effects in-place.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Apply <code>invert</code> effect","Report whether the color is bright","Check if no effects are enabled","Check if no effects are enabled","Apply <code>italic</code> effect","Iterate over enabled effects","No effects enabled","No effects enabled","","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","","","","","","","","","Removes the specified effects in-place.","Render the ANSI code","Render the ANSI code","Render the ANSI code","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Renders the relevant <code>Reset</code> code","Enable or disable the specified effects depending on the …","Apply <code>strikethrough</code> effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply <code>underline</code> effect","Set underline color","Write the relevant <code>Reset</code> code","Write the ANSI code","Number of values present","Occurs when the user provides two values which conflict …","A single value","Semantics for a piece of error information","A piece of error information","An opaque message to the user","Richly formatted error context","Not a true “error” as it means <code>--help</code> or similar was …","Occurs when either an argument or a <code>Subcommand</code> is …","Not a true “error” as it means <code>--version</code> or similar …","Contains the error value","Command Line Argument Parser Error","Defines how to format an error for displaying to the user","Command line argument parser kind of error","Number of allowed values","Represents a Format error (which is a part of <code>Display</code>). …","The cause of the error","The cause of the error","Occurs when the user provides an unrecognized <code>Subcommand</code> …","Occurs when the user provides a value containing invalid …","Rejected values","Occurs when an <code>Arg</code> has a set of possible values, and the …","Represents an I/O error. Can occur when writing to <code>stderr</code> …","Report <code>ErrorKind</code>","Minimum number of allowed values","Occurs when the user does not provide one or more required …","Occurs when a subcommand is required (as defined by …","Occurs when the user doesn’t use equals for an option …","<code>ContextKind</code> is self-sufficient, no additional information …","A single value","Contains the success value","Existing arguments","Short hand for <code>Result</code> type","Richly formatted error context","A single value","Many values","A single value","many value","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Occurs when the user provides fewer values for an argument …","Occurs when a user provides more values for an argument …","Trailing argument","Occurs when a user provides a flag, option, argument or …","A usage string","Accepted subcommands","Accepted values","Occurs when the user provides a value for an argument with …","Occurs when the user provides a different number of values …","Apply an alternative formatter to the error","End-user description of the error case, where relevant","End-user description of the error case, where relevant","","","","","","","","","","","","","","","","","","","Additional information to further qualify the error","","","","Prints the error and exits.","Returns the exit code that <code>.exit</code> will exit the process …","","","","","","","","","Format the existing message with the Command’s context","Stylize the error for the terminal","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Lookup a piece of context","","","Insert a piece of context","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Type of error for programmatic processing","Create an error with a pre-defined message","Prints formatted and colored error to <code>stdout</code> or <code>stderr</code> …","Create an unformatted error","Render the error message to a <code>StyledStr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Should the message be written to <code>stdout</code> or not?","Apply <code>Command</code>’s formatting to the error","Container for parse results.","Value was passed in on the command-line","Value came <code>Arg::default_value</code>","Failed to downcast <code>AnyValue</code> to the specified type","Value came [<code>Arg::env</code>][crate::Arg::env]","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","Iterate over indices for where an argument appeared when …","Violation of <code>ArgMatches</code> assumptions","Iterate over raw argument values via <code>ArgMatches::get_raw</code>.","Argument not defined in <code>Command</code>","Origin of the argument’s value","Iterate over multiple values for an argument via …","Iterate over multiple values for an argument via …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type for value stored in <code>ArgMatches</code>","The target type to downcast to"],"i":[18,17,5,0,0,0,0,0,18,0,0,0,17,17,17,5,17,17,0,17,17,0,5,5,5,17,0,18,17,0,5,5,5,0,17,17,17,0,0,5,1,4,1,1,4,1,4,1,1,4,1,4,11,1,0,1,11,1,1,1,13,12,12,120,120,121,121,1,1,1,1,5,4,11,1,17,13,12,12,18,5,4,11,1,17,13,12,18,1,0,5,4,11,1,17,13,12,18,5,4,11,1,17,13,12,18,4,12,1,122,0,122,4,11,4,11,13,1,4,11,1,17,13,12,18,4,4,4,4,4,4,4,4,1,1,1,1,1,1,4,1,1,4,11,17,13,12,12,12,12,12,18,0,1,4,1,1,1,1,5,4,4,11,1,1,17,13,12,12,18,18,5,4,4,11,11,1,1,17,13,12,12,12,12,12,12,18,33,33,34,17,18,1,4,1,1,4,1,1,4,1,1,11,1,1,1,1,1,1,13,4,1,1,13,1,4,4,4,11,4,4,1,4,1,4,1,13,1,1,1,1,1,4,13,13,1,1,4,13,13,4,4,1,1,1,1,1,1,4,4,4,4,4,1,4,1,1,4,1,4,4,1,120,4,1,121,1,17,12,4,1,4,1,4,1,4,4,4,1,4,4,11,13,4,1,4,1,13,13,1,1,5,4,11,1,17,13,12,18,5,17,12,12,12,1,4,1,4,1,1,1,1,1,1,1,4,1,4,4,4,4,4,1,4,4,4,1,11,4,1,1,4,1,4,4,11,1,1,1,4,4,4,1,1,1,1,4,1,1,1,11,1,1,1,1,1,4,11,1,1,1,4,1,1,4,1,1,4,4,59,59,0,4,12,18,1,1,1,4,13,13,13,13,1,1,1,1,1,4,4,11,4,4,4,4,4,4,4,11,11,4,4,1,4,4,4,1,1,1,1,1,13,1,13,13,1,1,1,1,1,5,1,5,4,11,1,17,13,12,18,34,18,4,1,12,18,4,13,5,4,11,1,17,13,12,18,13,1,1,1,13,13,13,13,5,4,11,1,17,13,12,18,59,59,13,13,13,59,5,4,11,1,17,13,12,18,59,33,33,4,4,4,4,4,0,13,4,34,18,1,4,1,4,1,1,1,4,4,1,1,17,5,0,0,0,0,0,0,0,17,17,17,5,17,46,17,0,21,17,0,17,5,5,5,17,0,21,0,0,0,0,17,123,0,0,0,0,0,55,0,46,5,5,5,0,0,0,0,0,0,17,0,17,17,55,96,0,0,0,0,5,48,48,66,2,20,20,20,6,6,6,6,6,26,26,21,20,20,48,46,55,6,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,26,21,20,48,46,55,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,26,21,20,48,46,55,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,26,21,20,48,46,55,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,20,55,6,2,20,48,46,6,2,2,68,69,70,71,73,76,78,79,80,81,51,51,20,6,46,21,20,20,20,20,20,20,48,46,55,6,6,6,6,6,6,6,2,51,26,21,20,48,46,46,55,6,6,2,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,26,26,26,26,26,26,26,26,26,26,21,21,20,20,20,20,20,20,20,20,48,48,46,46,46,46,46,46,46,46,55,55,55,55,6,6,6,6,6,2,2,2,2,2,68,69,70,71,72,72,73,73,76,76,78,79,80,81,82,83,66,51,51,51,48,51,51,48,48,51,51,51,20,46,55,6,51,48,48,26,21,20,48,46,55,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,3,26,20,46,55,6,6,6,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,48,51,96,48,46,46,26,48,46,2,68,69,70,71,72,73,76,78,79,80,81,26,96,68,69,70,72,82,96,96,68,69,70,71,72,73,76,78,79,80,81,82,83,66,96,66,20,55,6,2,26,51,51,26,96,71,72,78,79,80,82,83,73,76,46,26,51,0,66,66,46,20,26,21,20,48,46,55,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,46,6,2,26,21,20,48,46,55,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,26,21,20,48,46,55,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,96,26,26,21,20,48,46,55,6,2,68,69,70,71,72,73,76,78,79,80,81,82,83,66,51,51,51,123,2,2,107,107,0,0,108,108,109,109,109,109,109,109,109,109,109,109,108,0,109,108,108,108,108,0,0,109,108,108,108,109,109,0,107,0,108,0,0,108,109,109,106,87,108,87,108,87,87,87,107,109,110,106,108,111,112,87,107,109,110,106,108,111,112,87,109,108,107,109,110,106,108,111,112,87,107,109,110,106,108,111,112,87,107,109,110,106,108,112,87,108,108,112,87,87,87,107,109,110,106,108,111,112,87,87,87,107,109,110,106,108,111,112,87,107,107,107,107,107,107,109,110,110,110,106,106,108,111,112,87,87,110,106,87,87,87,87,107,109,110,106,108,112,87,87,110,108,107,109,110,106,108,111,112,87,110,111,87,109,108,87,87,108,108,87,111,107,109,110,106,107,109,110,106,107,109,110,106,108,112,87,106,108,108,112,87,107,109,110,106,107,109,110,106,87,108,87,108,87,108,87,107,109,110,106,108,111,112,87,107,109,110,106,108,111,112,87,107,109,110,106,108,111,112,87,107,109,110,106,108,111,112,87,87,87,87,87,116,23,117,0,0,116,0,23,23,23,124,0,0,0,116,23,116,116,23,23,116,23,23,0,116,23,23,23,117,117,124,116,0,0,117,117,117,117,116,116,116,116,116,23,23,116,23,116,116,116,23,23,24,116,23,119,125,24,116,117,23,119,125,24,116,117,23,116,117,23,116,117,23,24,116,117,23,24,24,24,24,116,116,117,117,23,23,24,115,119,125,119,125,24,24,24,116,117,23,24,116,23,24,119,125,24,116,117,23,24,24,24,24,24,24,116,117,23,24,116,117,23,119,125,24,116,117,23,119,125,24,116,117,23,119,125,24,116,117,23,24,24,0,65,65,63,65,0,0,0,0,63,0,0,0,63,53,61,40,49,54,65,63,53,61,40,49,54,65,63,53,61,40,49,54,65,63,53,61,40,49,54,65,65,61,40,49,54,65,63,63,53,61,40,49,54,65,63,53,61,40,49,54,65,63,53,61,40,49,54,65,53,61,40,49,54,53,61,40,49,54,53,61,40,49,54,65,53,61,40,49,54,63,53,61,40,49,54,65,63,63,53,61,40,49,54,65,63,53,61,40,49,54,65,63,53,61,40,49,54,65,126,126],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-1],1,[[3,[2]]]],[[4,-1],4,[[3,[5]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[3,[2]]]],[[4,-1],4,[[3,[6]]]],[[1,-1],1,[[3,[6]]]],[[4,-2],4,[[7,[6]]],[[9,[],[[8,[-1]]]]]],[[1,-2],1,[[7,[6]]],[[9,[],[[8,[-1]]]]]],[[1,10],1],[[4,10],4],[[1,10],1],[[4,10],4],[[11,-1],11,[[3,[12]]]],[[1,-1],1,[[7,[4]]]],0,[[1,10],1],[[11,-2],11,[[7,[12]]],[[9,[],[[8,[-1]]]]]],[[1,-2],1,[[7,[4]]],[[9,[],[[8,[-1]]]]]],[[1,10],1],[[1,10],1],[13,10],[12,14],[12,14],[1,1],[1,1],[1,1],[1,1],[[1,-1],1,[[3,[6]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[3,[15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,16],0,[5,5],[4,4],[11,11],[1,1],[17,17],[13,13],[12,12],[18,18],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[4,4],19],[[12,12],19],[[1,18],1],[[],1],0,[[],1],[[4,-1],4,[[3,[12]]]],[[11,-1],11,[[3,[12]]]],[[4,-2],4,[[7,[12]]],[[9,[],[[8,[-1]]]]]],[[11,-2],11,[[7,[12]]],[[9,[],[[8,[-1]]]]]],[[13,14],10],[1,16],[[],4],[[],11],[[],1],[[],17],[[],13],[[],12],[[],18],[[4,-1],4,[[3,[20]]]],[[4,-1],4,[[7,[20]]]],[[4,-2],4,[[7,[20]]],[[9,[],[[8,[-1]]]]]],[[4,-2],4,[[7,[20]]],[[9,[],[[8,[-1]]]]]],[[4,-1],4,[[3,[20]]]],[[4,-1,-2,-3],4,[[7,[12]]],[[7,[21]]],[[3,[20]]]],[[4,-4],4,[[7,[12]]],[[7,[21]]],[[3,[20]]],[[9,[],[[8,[[16,[-1,-2,-3]]]]]]]],[[4,-2],4,[[7,[20]]],[[9,[],[[8,[-1]]]]]],[1,1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,-1],1,[[3,[15]]]],[[4,-1],4,[[3,[22]]]],[[1,-1],1,[[3,[22]]]],[[1,10],1],[[4,4],10],[[11,11],10],[[17,17],10],[[13,13],10],[[12,15],10],[[12,12],10],[[12,14],10],[[12,6],10],[[12,14],10],[[18,18],10],0,[[1,23,-1],24,25],[[4,10],4],[[1,-1],1,[[3,[26]]]],[[1,-1],[[27,[1]]],[[29,[28]]]],[[1,-1],[[27,[1]]],[[29,[28]]]],[[1,10],1],[[5,30],[[32,[16,31]]]],[[4,30],[[32,[16,31]]]],[[4,30],[[32,[16,31]]]],[[11,30],[[32,[16,31]]]],[[1,30],[[32,[16,31]]]],[[1,30],[[32,[16,31]]]],[[17,30],[[32,[16,31]]]],[[13,30],[[32,[16,31]]]],[[12,30],[[32,[16,31]]]],[[12,30],[[32,[16,31]]]],[[18,30],[[32,[16,31]]]],[[18,30],[[32,[16,31]]]],[-1,-1,[]],[4,4],[-1,-1,[]],[-1,-1,[]],[11,11],[1,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,12],[12,12],[6,12],[14,12],[14,12],[-1,-1,[]],[-1,-1,[]],[13,[[32,[33,24]]]],[13,[[32,[33,24]]]],[[14,10],[[32,[34,15]]]],[14,[[32,[17]]]],[14,[[32,[18]]]],[1,[[27,[2]]]],[4,5],[1,[[27,[2]]]],[1,[[27,[2]]]],[4,[[27,[[35,[14]]]]]],[1,[[0,[[36,[],[[8,[14]]]]]]]],[1,[[0,[[36,[],[[8,[14]]]]]]]],[4,[[27,[[35,[37]]]]]],[1,[[0,[[36,[],[[8,[37]]]]]]]],[[1,4],[[35,[4]]]],[11,[[0,[[36,[],[[8,[12]]]]]]]],[1,[[0,[[36,[],[[8,[4]]]]]]]],[1,[[27,[14]]]],[1,[[27,[2]]]],[1,[[27,[2]]]],[1,[[27,[14]]]],[1,18],[[13,14],38],[4,[[39,[20]]]],[1,[[27,[14]]]],[1,[[27,[26]]]],[[13,14],10],[1,[[0,[[36,[],[[8,[11]]]]]]]],[4,[[27,[2]]]],[4,[[27,[14]]]],[4,12],[11,12],[4,[[27,[22]]]],[4,[[27,[14]]]],[1,[[27,[2]]]],[4,[[27,[[35,[14]]]]]],[1,[[27,[14]]]],[4,[[27,[2]]]],[1,[[27,[14]]]],[[13,14],[[27,[[40,[-1]]]]],[41,42,43,44]],[1,13],[[1,-2],13,[[7,[45]],42],[[9,[],[[8,[-1]]]]]],[1,13],[1,14],[1,[[27,[14]]]],[4,[[27,[46]]]],[[13,14],[[27,[[47,[-1]]]]],[41,42,43,44]],[[13,14],[[27,[-1]]],[41,42,43,44]],[1,[[0,[[36,[],[[8,[4]]]]]]]],[1,[[0,[[36,[],[[8,[4]]]]]]]],[4,[[35,[48]]]],[[13,14],[[27,[49]]]],[[13,14],[[27,[50]]]],[4,[[27,[37]]]],[4,[[27,[[35,[37]]]]]],[1,[[27,[37]]]],[1,51],[1,[[27,[14]]]],[1,[[27,[14]]]],[1,[[0,[[36,[],[[8,[1]]]]]]]],[1,[[0,[[36,[],[[8,[1]]]]]]]],[4,[[27,[37]]]],[4,17],[4,[[27,[[39,[6]]]]]],[4,26],[4,[[27,[6]]]],[1,[[27,[14]]]],[4,[[27,[[35,[14]]]]]],[1,[[0,[[36,[],[[8,[14]]]]]]]],[1,[[0,[[36,[],[[8,[14]]]]]]]],[4,[[27,[[35,[37]]]]]],[1,[[0,[[36,[],[[8,[37]]]]]]]],[[4,10],4],[[4,-1],4,[[3,[12]]]],[[1,-1],1,[[7,[11]]]],[[],[[27,[12]]]],[[4,-2],4,[[7,[12]]],[[9,[],[[8,[-1]]]]]],[[1,-2],1,[[7,[11]]],[[9,[],[[8,[-1]]]]]],[14,10],[1,10],[[17,-1],16,52],[[12,-1],16,52],[[4,-1],4,[[3,[2]]]],[[1,10],1],[[4,-1],4,[[3,[6]]]],[[1,-1],1,[[3,[2]]]],[[4,10],4],[[1,10],1],[[4,10],4],[[4,10],4],[[4,10],4],[[1,10],1],[[4,10],4],[[4,-1],4,[[7,[12]]]],[[11,-1],11,[[7,[12]]]],[13,53],[[4,10],4],[[1,10],1],[[4,-1],4,[[3,[22]]]],[[1,12]],[[13,14],[[27,[22]]]],[[13,14],[[27,[54]]]],[[1,10],1],[[1,10],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,[[55,[5]]]],[17,[[55,[17]]]],[-1,[[55,[15]]],[]],[-1,[[55,[6]]],[]],[-1,[[55,[12]]],[]],[1,10],[4,10],[1,10],[4,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[4,10],[1,10],[4,10],[4,10],[4,10],[4,10],[4,10],[1,10],[4,10],[4,10],[4,10],[1,10],[11,10],[4,10],[1,10],[1,10],[4,10],[1,10],[4,10],[4,10],[11,10],[1,10],[1,10],[1,10],[4,10],[[4,10],4],[[4,-1],4,[[3,[6]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[7,[6]]]],[[1,-1],1,[[3,[6]]]],[[1,-2],1,[[7,[6]]],[[9,[],[[8,[-1]]]]]],[[4,-1],4,[[3,[2]]]],[[1,-1],1,[[3,[6]]]],[[1,22],1],[[1,10],1],[[11,10],11],[[1,-1,-2],1,[[29,[14]]],[[57,[4],[[56,[4]]]]]],[[1,-1],1,[[58,[4],[[56,[4]]]]]],[[1,-1,-2],1,[[29,[14]]],[[57,[11],[[56,[11]]]]]],[[1,-1,-2],1,[[29,[14]]],[[57,[1],[[56,[1]]]]]],[[1,-1],1,[[7,[6]]]],[-1,4,[[7,[12]]]],[-1,11,[[7,[12]]]],[-1,1,[[7,[6]]]],[[1,-1],1,[[3,[22]]]],[[1,-1],1,[[3,[6]]]],[[4,10],4],[[1,10],1],[[1,10],1],[[4,-1],4,[[3,[46]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[3,[2]]]],[[4,-1],4,[[3,[12]]]],[[4,-2],4,[[7,[12]]],[[9,[],[[8,[-1]]]]]],[[],59],[-2,59,[[7,[45]],42],[[9,[],[[8,[-1]]]]]],0,[[4,4],[[27,[19]]]],[[12,12],[[27,[19]]]],[[],[[0,[[36,[],[[8,[48]]]]]]]],[1,[[32,[16,60]]]],[1,[[32,[16,60]]]],[[1,10],1],[[4,10],4],[[13,14],[[27,[[61,[-1]]]]],[41,42,43,44]],[[13,14],[[27,[[62,[-1]]]]],[41,42,43,44]],[[13,14],[[27,[-1]]],[41,42,43,44]],[13,[[27,[[16,[15,13]]]]]],[1,2],[1,2],[1,15],[1,2],[1,15],[[4,10],4],[[4,10],4],[[11,10],11],[[4,-1,-2],4,[[7,[12]]],[[7,[20]]]],[[4,-3],4,[[7,[12]]],[[7,[20]]],[[9,[],[[8,[[16,[-1,-2]]]]]]]],[[4,-3],4,[[7,[12]]],[[7,[20]]],[[9,[],[[8,[[16,[-1,-2]]]]]]]],[[4,-1],4,[[3,[12]]]],[[4,-2],4,[[7,[12]]],[[9,[],[[8,[-1]]]]]],[[4,-2],4,[[7,[12]]],[[9,[],[[8,[-1]]]]]],[[4,-1],4,[[3,[12]]]],[[11,-1],11,[[3,[12]]]],[[11,-2],11,[[7,[12]]],[[9,[],[[8,[-1]]]]]],[[4,-1,-2],4,[[7,[21]]],[[7,[12]]]],[[4,-3],4,[[7,[21]]],[[7,[12]]],[[9,[],[[8,[[16,[-1,-2]]]]]]]],[[1,-1],16,[[7,[15]]]],[[4,-1],4,[[3,[37]]]],[[4,-1],4,[[3,[37]]]],[[4,-1],4,[[9,[],[[8,[37]]]]]],[[1,-1],1,[[3,[37]]]],[[1,-1],1,[[3,[37]]]],[[1,-1],1,[[9,[],[[8,[37]]]]]],[[1,51],1],[[1,-1],1,[[7,[1]]]],[13,[[27,[[16,[14,13]]]]]],[[1,-1],1,[[3,[6]]]],[[13,14],[[27,[13]]]],[13,[[27,[14]]]],[[1,10],1],[[1,10],1],[[1,10],1],[[1,-1],1,[[3,[6]]]],[[1,-2],1,[[7,[1]]],[[9,[],[[8,[-1]]]]]],[5,10],[[1,22],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,[[27,[48]]]],[18,[[27,[48]]]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[4,10],4],[[13,14],[[32,[10,63]]]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[[13,14],[[32,[[27,[[40,[-1]]]],63]]],[41,42,43,44]],[1,[[32,[13,24]]]],[[1,-2],[[32,[13,24]]],[[7,[45]],42],[[9,[],[[8,[-1]]]]]],[[1,-2],[[32,[13,24]]],[[7,[45]],42],[[9,[],[[8,[-1]]]]]],[[13,14],[[32,[[27,[[47,[-1]]]],63]]],[41,42,43,44]],[[13,14],[[32,[[27,[-1]],63]]],[41,42,43,44]],[[13,14],[[32,[[27,[49]],63]]]],[[13,14],[[32,[[27,[50]],63]]]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[[],[[32,[59,24]]]],[-2,[[32,[59,24]]],[[7,[45]],42],[[9,[],[[8,[-1]]]]]],[[13,14],[[32,[[27,[[61,[-1]]]],63]]],[41,42,43,44]],[[13,14],[[32,[[27,[[62,[-1]]]],63]]],[41,42,43,44]],[[13,14],[[32,[[27,[-1]],63]]],[41,42,43,44]],[[59,-2],[[32,[16,24]]],[[7,[45]],42],[[9,[],[[8,[-1]]]]]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[[59,-2],16,[[7,[45]],42],[[9,[],[[8,[-1]]]]]],[[33,13],[[32,[16,24]]]],[[33,13],[[32,[16,24]]]],[[4,-1],4,[[3,[37]]]],[[4,-1],4,[[3,[17]]]],[[4,-1],4,[[3,[6]]]],[[4,-2],4,[[7,[6]]],[[9,[],[[8,[-1]]]]]],[[4,-1],4,[[3,[26]]]],0,[[13,14],[[27,[65]]]],[[4,-1],4,[[3,[6]]]],[[],[[39,[34]]]],[[],[[39,[18]]]],[[1,-1],1,[[3,[6]]]],[[4,-1],4,[[3,[6]]]],[[1,-1],1,[[3,[6]]]],[[4,-2],4,[[7,[6]]],[[9,[],[[8,[-1]]]]]],[[1,-2],1,[[7,[6]]],[[9,[],[[8,[-1]]]]]],[[1,-1],1,[[3,[6]]]],[[1,-2],1,[[7,[6]]],[[9,[],[[8,[-1]]]]]],[[4,-1],4,[[3,[37]]]],[[4,-1],4,[[9,[],[[8,[37]]]]]],[[1,-1],1,[[3,[37]]]],[[1,-1],1,[[9,[],[[8,[37]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[48,-1],48,[[3,[6]]]],[[48,-2],48,[[7,[6]]],[[9,[],[[8,[-1]]]]]],[[66,-1],66,[[7,[2]]]],[2,[[0,[25]]]],[20,28],[20,67],[20,28],[6,28],[6,14],[6,67],[6,[[39,[38]]]],[6,14],[[],26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[21,21],[20,20],[48,48],[46,46],[[[55,[-1]]],[[55,[-1]]],42],[6,6],[2,2],[68,68],[69,69],[70,70],[[[71,[-1]]],[[71,[-1]]],[42,34,42,43,44]],[72,72],[[[73,[-1]]],[[73,[-1]]],[42,[75,[74]],42,43,44]],[[[76,[-1]]],[[76,[-1]]],[42,[75,[77]]]],[78,78],[79,79],[80,80],[81,81],[[[82,[-1,-2]]],[[82,[-1,-2]]],42,42],[[[83,[-1,-2]]],[[83,[-1,-2]]],42,42],[66,66],[51,51],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[20,20],19],[[[55,[-1]],[55,[-1]]],19,84],[[6,6],19],[[2,2],19],[[],20],[[],48],[[],46],[[],6],[[],2],[[],2],[[],68],[[],69],[[],70],[[],[[71,[-1]]],[34,42,43,44]],[[],[[73,[-1]]],[[75,[74]],42,43,44]],[[],[[76,[-1]]],[[75,[77]]]],[[],78],[[],79],[[],80],[[],81],[[],51],[[],51],[20,28],[6,14],[46,[[85,[22]]]],[[21,21],10],[[20,45],10],[[20,20],10],[[20,14],10],[[20,28],10],[[20,14],10],[[20,15],10],[[48,48],10],[[46,46],10],[[[55,[-1]],[55,[-1]]],10,86],[[6,14],10],[[6,6],10],[[6,12],10],[[6,28],10],[[6,14],10],[[6,28],10],[[6,15],10],[[2,2],10],[[51,87],51],[[26,30],[[32,[16,31]]]],[[21,30],[[32,[16,31]]]],[[20,30],[[32,[16,31]]]],[[48,30],[[32,[16,31]]]],[[46,30],[[32,[16,31]]]],[[46,30],[[32,[16,31]]]],[[[55,[-1]],30],[[32,[16,31]]],88],[[6,30],[[32,[16,31]]]],[[6,30],[[32,[16,31]]]],[[2,30],[[32,[16,31]]]],[[2,30],[[32,[16,31]]]],[[68,30],[[32,[16,31]]]],[[69,30],[[32,[16,31]]]],[[70,30],[[32,[16,31]]]],[[[71,[-1]],30],[[32,[16,31]]],[88,34,42,43,44]],[[72,30],[[32,[16,31]]]],[[[73,[-1]],30],[[32,[16,31]]],[88,[75,[74]],42,43,44]],[[[76,[-1]],30],[[32,[16,31]]],[88,[75,[77]]]],[[78,30],[[32,[16,31]]]],[[79,30],[[32,[16,31]]]],[[80,30],[[32,[16,31]]]],[[81,30],[[32,[16,31]]]],[[[82,[-1,-2]],30],[[32,[16,31]]],88,88],[[[83,[-1,-2]],30],[[32,[16,31]]],88,88],[[66,30],[[32,[16,31]]]],[[51,30],[[32,[16,31]]]],[-1,-1,[]],[[[89,[-1]]],26,[[7,[48]]]],[[[90,[74]]],26],[[[91,[74]]],26],[[[35,[-1]]],26,[[7,[48]]]],[92,26],[[[93,[74]]],26],[[[94,[74]]],26],[[[95,[74]]],26],[-1,26,[96,43,44]],[-1,21,[[7,[20]]]],[-1,-1,[]],[20,20],[-1,-1,[]],[14,20],[6,20],[6,20],[28,20],[28,20],[14,20],[-1,48,[[7,[6]]]],[-1,-1,[]],[22,46],[[[95,[22]]],46],[[[93,[22]]],46],[[[90,[22]]],46],[92,46],[[[94,[22]]],46],[-1,-1,[]],[[[91,[22]]],46],[[[27,[-1]]],[[55,[-1]]],[]],[-1,[[55,[-1]]],[]],[97,-1,[]],[-1,-1,[]],[6,6],[12,6],[14,6],[-1,-1,[]],[14,6],[14,2],[15,2],[-1,-1,[]],[14,2],[15,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-2,72,[[7,[48]]],[[9,[],[[8,[-1]]]]]],[-1,-1,[]],[-1,[[73,[-2]]],[[98,[74]]],[[75,[74]],42,43,44]],[-1,-1,[]],[-1,-1,[]],[-1,[[76,[-2]]],[[98,[77]]],[[75,[77]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[51,87],[51,87],[48,[[27,[2]]]],[51,87],[51,87],[48,14],[48,[[0,[[36,[],[[8,[14]]]]]]]],[51,87],[51,87],[51,87],[[20,-1],16,52],[[46,-1],16,52],[[[55,[-1]],-2],16,99,52],[[6,-1],16,52],[[51,87],51],[[48,-1],48,[[3,[2]]]],[[48,10],48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[55,[-1]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[20]]],[]],[-1,[[55,[46]]],[]],[[[55,[-1]]],[[55,[-1]]],[]],[-1,[[55,[15]]],[]],[-1,[[55,[6]]],[]],[-1,[[55,[12]]],[]],[-1,[[55,[20]]],[]],[-1,[[55,[2]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[-1,[[55,[26]]],[]],[[51,87],51],[48,10],[[51,87],51],[[[96,[],[[100,[-1]]]],-3],[[82,[[96,[],[[100,[-1]]]],-3]]],[43,44,42],[43,44,42],[[101,[-1],[[56,[-2]]]],42]],[[48,14,10],10],[46,22],[46,22],[-1,26,96],[-1,48,[[7,[6]]]],[-1,46,[[7,[46]]]],[[],2],[[],68],[[],69],[[],70],[[],[[71,[-1]]],[34,42,43,44]],[-1,72,[[7,[72]]]],[[],[[73,[-1]]],[[75,[74]],42,43,44]],[[],[[76,[-1]]],[[75,[77]]]],[[],78],[[],79],[[],80],[[],81],[[],26],[[[96,[],[[100,[-1]]]],1,[27,[4]],45],[[32,[-1,24]]],[43,44,42]],[[68,1,[27,[4]],45],[[32,[24]]]],[[69,1,[27,[4]],45],[[32,[24]]]],[[70,1,[27,[4]],45],[[32,[24]]]],[[72,1,[27,[4]],45],[[32,[15,24]]]],[[[82,[-1,-3]],1,[27,[4]],45],[[32,[24]]],96,[43,44,42],[[101,[],[[56,[-2]]]],42,43,44]],[[[96,[],[[100,[-1]]]],1,[27,[4]],45,65],[[32,[-1,24]]],[43,44,42]],[[[96,[],[[100,[-1]]]],1,[27,[4]],28],[[32,[-1,24]]],[43,44,42]],[[68,1,[27,[4]],28],[[32,[24]]]],[[69,1,[27,[4]],28],[[32,[24]]]],[[70,1,[27,[4]],28],[[32,[24]]]],[[[71,[-1]],1,[27,[4]],28],[[32,[24]]],[34,42,43,44]],[[72,1,[27,[4]],28],[[32,[24]]]],[[[73,[-1]],1,[27,[4]],28],[[32,[24]]],[[75,[74]],42,43,44]],[[[76,[-1]],1,[27,[4]],28],[[32,[24]]],[[75,[77]],42,43,44]],[[78,1,[27,[4]],28],[[32,[24]]]],[[79,1,[27,[4]],28],[[32,[24]]]],[[80,1,[27,[4]],28],[[32,[24]]]],[[81,1,[27,[4]],28],[[32,[24]]]],[[[82,[-1,-3]],1,[27,[4]],28],[[32,[24]]],96,[43,44,42],[[101,[],[[56,[-2]]]],42,43,44]],[[[83,[-1,-4]],1,[27,[4]],28],[[32,[24]]],96,[43,44,42],[[7,[[103,[102]]]]],[[101,[],[[56,[[32,[-2,-3]]]]]],42,43,44]],[[66,1,[27,[4]],28],[[32,[24]]]],[[[96,[],[[100,[-1]]]],1,[27,[4]],28,65],[[32,[-1,24]]],[43,44,42]],[[66,1,[27,[4]],28,65],[[32,[24]]]],[[20,20],[[27,[19]]]],[[[55,[-1]],[55,[-1]]],[[27,[19]]],104],[[6,6],[[27,[19]]]],[[2,2],[[27,[19]]]],[[],26],[[51,87],51],[[],51],[26,[[27,[[103,[36]]]]]],[[[96,[],[[100,[-1]]]]],[[27,[[103,[36]]]]],[43,44,42]],[[[71,[-1]]],[[27,[[103,[36]]]]],[34,42,43,44]],[72,[[27,[[103,[36]]]]]],[78,[[27,[[103,[36]]]]]],[79,[[27,[[103,[36]]]]]],[80,[[27,[[103,[36]]]]]],[[[82,[-1,-3]]],[[27,[[103,[36]]]]],96,[43,44,42],[[101,[],[[56,[-2]]]],42,43,44]],[[[83,[-1,-4]]],[[27,[[103,[36]]]]],96,[43,44,42],[[7,[[103,[102]]]]],[[101,[],[[56,[[32,[-2,-3]]]]]],42,43,44]],[[[73,[-1]],-2],[[73,[-1]]],[[75,[74]],42,43,44],[[98,[74]]]],[[[76,[-1]],-2],[[76,[-1]]],[[75,[77]]],[[98,[77]]]],[46,[[85,[22]]]],[[],26],[[],51],0,[-1,66,[[7,[2]]]],[-1,66,[[7,[6]]]],[46,10],[20,45],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[[[96,[],[[100,[-1]]]],-4],[[83,[[96,[],[[100,[-1]]]],-4]]],[43,44,42],[43,44,42],[[7,[[103,[102]]]]],[[101,[-1],[[56,[[32,[-2,-3]]]]]],42,43,44]],[-1,64,[]],[26,105],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[[51,87],51],[[51,87],51],[[],-1,[]],[[2,37],[[32,[16,31]]]],[[2,14],[[32,[16,31]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[106,38],[[87,[27,[107]]],87],[[108,108],108],[[87,108],87],[[108,108],16],[[87,108],16],[87,87],[87,87],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[109,10],109],[108,108],[107,107],[109,109],[110,110],[106,106],[108,108],[111,111],[112,112],[87,87],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[107,107],19],[[109,109],19],[[110,110],19],[[106,106],19],[[108,108],19],[[112,112],19],[[87,87],19],[[108,108],10],[[],108],[[],112],[[],87],[87,87],[[87,108],87],[[107,107],10],[[109,109],10],[[110,110],10],[[106,106],10],[[108,108],10],[[111,111],10],[[112,112],10],[[87,87],10],[[87,108],10],[[87,[27,[107]]],87],[[107,30],[[32,[16,31]]]],[[109,30],[[32,[16,31]]]],[[110,30],[[32,[16,31]]]],[[106,30],[[32,[16,31]]]],[[108,30],[[32,[16,31]]]],[[111,30],[[32,[16,31]]]],[[112,30],[[32,[16,31]]]],[[87,30],[[32,[16,31]]]],[[[16,[38,38,38]]],107],[106,107],[38,107],[109,107],[110,107],[-1,-1,[]],[-1,-1,[]],[109,110],[38,110],[-1,-1,[]],[[[16,[38,38,38]]],106],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[108,87],[-1,-1,[]],[109,110],[106,38],[87,[[27,[107]]]],[87,108],[87,[[27,[107]]]],[87,[[27,[107]]]],[[107,-1],16,52],[[109,-1],16,52],[[110,-1],16,52],[[106,-1],16,52],[[108,-1],16,52],[[112,-1],16,52],[[87,-1],16,52],[87,87],[110,38],[[108,108],108],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[110,[[27,[109]]]],[-1,-2,[],[]],[87,87],[109,10],[108,10],[87,10],[87,87],[108,111],[[],108],[[],87],[111,27],[[107,-1],87,[[7,[107]]]],[[109,-1],87,[[7,[107]]]],[[110,-1],87,[[7,[107]]]],[[106,-1],87,[[7,[107]]]],[107,87],[109,87],[110,87],[106,87],[[107,107],[[27,[19]]]],[[109,109],[[27,[19]]]],[[110,110],[[27,[19]]]],[[106,106],[[27,[19]]]],[[108,108],[[27,[19]]]],[[112,112],[[27,[19]]]],[[87,87],[[27,[19]]]],[106,38],[[108,108],108],[108,[[0,[25,113,42]]]],[112,[[0,[25,113,42]]]],[87,[[0,[25,113,42]]]],[107,[[0,[25,113,42]]]],[109,[[0,[25,113,42]]]],[110,[[0,[25,113,42]]]],[106,[[0,[25,113,42]]]],[107,[[0,[25,113,42]]]],[109,[[0,[25,113,42]]]],[110,[[0,[25,113,42]]]],[106,[[0,[25,113,42]]]],[87,[[0,[25,113,42]]]],[[108,108,10],108],[87,87],[[108,108],108],[[87,108],87],[[108,108],16],[[87,108],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[87,87],[[87,[27,[107]]],87],[[87,114],[[32,[16,60]]]],[[87,114],[[32,[16,60]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[24,[-1]]],[[24,[-2]]],115,115],[116,[[27,[14]]]],[23,[[27,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[117,117],[23,23],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[[24,[-1]]],[[0,[[36,[],[[8,[[16,[116,117]]]]]]]]],115],[[116,116],10],[[117,117],10],[[23,23],10],[[[24,[-1]]],97,115],[[[24,[-1]]],118,115],[[[24,[-1]],30],[[32,[16,31]]],115],[[[24,[-1]],30],[[32,[16,31]]],115],[[116,30],[[32,[16,31]]]],[[116,30],[[32,[16,31]]]],[[117,30],[[32,[16,31]]]],[[117,30],[[32,[16,31]]]],[[23,30],[[32,[16,31]]]],[[23,30],[[32,[16,31]]]],[[[24,[-1]],1],[[24,[-1]]],115],[[[24,[115]]],2],[[[24,[119]]],2],[24,2],[-1,-1,[]],[-1,-1,[]],[60,[[24,[-1]]],115],[-1,-1,[]],[31,[[24,[-1]]],115],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[24,[-1]],116],[[27,[117]]],115],[[116,-1],16,52],[[23,-1],16,52],[[[24,[-1]],116,117],[[27,[117]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[-1]]],23,115],[23,[[24,[-1]]],115],[[[24,[-1]]],[[32,[16,60]]],115],[[23,-1],[[24,[-2]]],25,115],[[[24,[-1]]],2,115],[[[24,[-1]]],[[27,[102]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[[[24,[-1]]],10,115],[[[24,[-1]],1],[[24,[-1]]],115],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,63],[53,53],[[[61,[-1]]],[[61,[-1]]],42],[[[40,[-1]]],[[40,[-1]]],42],[49,49],[54,54],[65,65],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[65,65],19],[[],[[61,[-1]]],[]],[[],[[40,[-1]]],[]],[[],49],[[],54],[[65,65],10],[[63,30],[[32,[16,31]]]],[[63,30],[[32,[16,31]]]],[[53,30],[[32,[16,31]]]],[[[61,[-1]],30],[[32,[16,31]]],88],[[[40,[-1]],30],[[32,[16,31]]],88],[[49,30],[[32,[16,31]]]],[[54,30],[[32,[16,31]]]],[[65,30],[[32,[16,31]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,[[27,[12]]]],[[[61,[-1]]],27,[]],[[[40,[-1]]],27,[]],[49,[[27,[28]]]],[54,[[27,[22]]]],[53,[[27,[12]]]],[[[61,[-1]]],27,[]],[[[40,[-1]]],27,[]],[49,[[27,[28]]]],[54,[[27,[22]]]],[[65,65],[[27,[19]]]],[53,[[16,[22,[27,[22]]]]]],[[[61,[-1]]],[[16,[22,[27,[22]]]]],[]],[[[40,[-1]]],[[16,[22,[27,[22]]]]],[]],[49,[[16,[22,[27,[22]]]]]],[54,[[16,[22,[27,[22]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],0,0],"c":[],"p":[[5,"Command",0],[5,"StyledStr",500],[10,"IntoResettable",500],[5,"Arg",0],[6,"ArgAction",0],[5,"Str",500],[10,"Into",1538],[17,"Item"],[10,"IntoIterator",1539],[1,"bool"],[5,"ArgGroup",0],[5,"Id",0],[5,"ArgMatches",0],[1,"str"],[5,"String",1540],[1,"tuple"],[6,"ValueHint",0],[6,"ColorChoice",0],[6,"Ordering",1541],[5,"OsStr",500],[6,"ArgPredicate",500],[1,"usize"],[6,"ErrorKind",1275],[5,"Error",1275],[10,"Display",1542],[5,"ValueParser",500],[6,"Option",1543],[5,"OsStr",1544],[10,"AsRef",1538],[5,"Formatter",1542],[5,"Error",1542],[6,"Result",1545],[10,"FromArgMatches",0],[10,"ValueEnum",0],[5,"Vec",1546],[10,"Iterator",1547],[1,"char"],[1,"u8"],[1,"slice"],[5,"ValuesRef",1417],[10,"Any",1548],[10,"Clone",1549],[10,"Send",1550],[10,"Sync",1550],[5,"OsString",1544],[5,"ValueRange",500],[5,"OccurrencesRef",1551],[5,"PossibleValue",500],[5,"RawValues",1417],[5,"RawOccurrences",1551],[5,"Styles",500],[10,"Hasher",1552],[5,"IdsRef",1417],[5,"Indices",1417],[6,"Resettable",500],[17,"Output"],[10,"FnOnce",1553],[10,"FnMut",1553],[10,"Parser",0],[5,"Error",1554],[5,"Values",1417],[5,"Occurrences",1551],[6,"MatchesError",1417],[5,"TypeId",1548],[6,"ValueSource",1417],[5,"UnknownArgumentValueParser",500],[5,"Path",1555],[5,"StringValueParser",500],[5,"OsStringValueParser",500],[5,"PathBufValueParser",500],[5,"EnumValueParser",500],[5,"PossibleValuesParser",500],[5,"RangedI64ValueParser",500],[1,"i64"],[10,"TryFrom",1538],[5,"RangedU64ValueParser",500],[1,"u64"],[5,"BoolValueParser",500],[5,"FalseyValueParser",500],[5,"BoolishValueParser",500],[5,"NonEmptyStringValueParser",500],[5,"MapValueParser",500],[5,"TryMapValueParser",500],[10,"Ord",1541],[6,"Bound",1556],[10,"PartialEq",1541],[5,"Style",1039],[10,"Debug",1542],[1,"array"],[5,"Range",1556],[5,"RangeToInclusive",1556],[5,"RangeFull",1556],[5,"RangeFrom",1556],[5,"RangeInclusive",1556],[5,"RangeTo",1556],[10,"TypedValueParser",500],[1,"never"],[10,"RangeBounds",1556],[10,"Hash",1552],[17,"Value"],[10,"Fn",1553],[10,"Error",1557],[5,"Box",1558],[10,"PartialOrd",1541],[5,"AnyValueId",1559],[5,"RgbColor",1039],[6,"Color",1039],[5,"Effects",1039],[6,"AnsiColor",1039],[5,"Ansi256Color",1039],[5,"EffectIter",1039],[5,"Reset",1039],[10,"Copy",1550],[10,"Write",1560],[10,"ErrorFormatter",1275],[6,"ContextKind",1275],[6,"ContextValue",1275],[1,"i32"],[5,"KindFormatter",1275],[10,"Args",0],[10,"Subcommand",0],[10,"CommandFactory",0],[10,"ValueParserFactory",500],[8,"Result",1275],[5,"DefaultFormatter",1275],[15,"Downcast",1536]],"b":[[146,"impl-PartialEq%3CString%3E-for-Id"],[147,"impl-PartialEq-for-Id"],[148,"impl-PartialEq%3Cstr%3E-for-Id"],[149,"impl-PartialEq%3CStr%3E-for-Id"],[150,"impl-PartialEq%3C%26str%3E-for-Id"],[160,"impl-Display-for-Arg"],[161,"impl-Debug-for-Arg"],[163,"impl-Display-for-Command"],[164,"impl-Debug-for-Command"],[167,"impl-Display-for-Id"],[168,"impl-Debug-for-Id"],[169,"impl-Display-for-ColorChoice"],[170,"impl-Debug-for-ColorChoice"],[180,"impl-From%3C%26Str%3E-for-Id"],[181,"impl-From%3C%26Id%3E-for-Id"],[182,"impl-From%3CStr%3E-for-Id"],[183,"impl-From%3C%26%26str%3E-for-Id"],[184,"impl-From%3C%26str%3E-for-Id"],[566,"impl-AsRef%3CPath%3E-for-OsStr"],[567,"impl-AsRef%3COsStr%3E-for-OsStr"],[568,"impl-AsRef%3COsStr%3E-for-Str"],[569,"impl-AsRef%3Cstr%3E-for-Str"],[570,"impl-AsRef%3CPath%3E-for-Str"],[571,"impl-AsRef%3C%5Bu8%5D%3E-for-Str"],[676,"impl-Default-for-%26StyledStr"],[677,"impl-Default-for-StyledStr"],[688,"impl-Default-for-%26Styles"],[689,"impl-Default-for-Styles"],[694,"impl-PartialEq%3COsString%3E-for-OsStr"],[695,"impl-PartialEq-for-OsStr"],[696,"impl-PartialEq%3C%26str%3E-for-OsStr"],[697,"impl-PartialEq%3C%26OsStr%3E-for-OsStr"],[698,"impl-PartialEq%3Cstr%3E-for-OsStr"],[699,"impl-PartialEq%3CString%3E-for-OsStr"],[703,"impl-PartialEq%3C%26str%3E-for-Str"],[704,"impl-PartialEq-for-Str"],[705,"impl-PartialEq%3CId%3E-for-Str"],[706,"impl-PartialEq%3C%26OsStr%3E-for-Str"],[707,"impl-PartialEq%3Cstr%3E-for-Str"],[708,"impl-PartialEq%3COsStr%3E-for-Str"],[709,"impl-PartialEq%3CString%3E-for-Str"],[716,"impl-Display-for-ValueRange"],[717,"impl-Debug-for-ValueRange"],[719,"impl-Display-for-Str"],[720,"impl-Debug-for-Str"],[721,"impl-Display-for-StyledStr"],[722,"impl-Debug-for-StyledStr"],[739,"impl-From%3C%5BP;+C%5D%3E-for-ValueParser"],[740,"impl-From%3CRange%3Ci64%3E%3E-for-ValueParser"],[741,"impl-From%3CRangeToInclusive%3Ci64%3E%3E-for-ValueParser"],[742,"impl-From%3CVec%3CP%3E%3E-for-ValueParser"],[743,"impl-From%3CRangeFull%3E-for-ValueParser"],[744,"impl-From%3CRangeFrom%3Ci64%3E%3E-for-ValueParser"],[745,"impl-From%3CRangeInclusive%3Ci64%3E%3E-for-ValueParser"],[746,"impl-From%3CRangeTo%3Ci64%3E%3E-for-ValueParser"],[747,"impl-From%3CP%3E-for-ValueParser"],[750,"impl-From%3C%26OsStr%3E-for-OsStr"],[752,"impl-From%3C%26%26str%3E-for-OsStr"],[753,"impl-From%3C%26Str%3E-for-OsStr"],[754,"impl-From%3CStr%3E-for-OsStr"],[755,"impl-From%3C%26OsStr%3E-for-OsStr"],[756,"impl-From%3C%26%26OsStr%3E-for-OsStr"],[757,"impl-From%3C%26str%3E-for-OsStr"],[760,"impl-From%3Cusize%3E-for-ValueRange"],[761,"impl-From%3CRangeTo%3Cusize%3E%3E-for-ValueRange"],[762,"impl-From%3CRangeFrom%3Cusize%3E%3E-for-ValueRange"],[763,"impl-From%3CRange%3Cusize%3E%3E-for-ValueRange"],[764,"impl-From%3CRangeFull%3E-for-ValueRange"],[765,"impl-From%3CRangeInclusive%3Cusize%3E%3E-for-ValueRange"],[767,"impl-From%3CRangeToInclusive%3Cusize%3E%3E-for-ValueRange"],[768,"impl-From%3COption%3CT%3E%3E-for-Resettable%3CT%3E"],[769,"impl-From%3CT%3E-for-Resettable%3CT%3E"],[772,"impl-From%3C%26Str%3E-for-Str"],[773,"impl-From%3CId%3E-for-Str"],[774,"impl-From%3C%26str%3E-for-Str"],[776,"impl-From%3C%26%26str%3E-for-Str"],[777,"impl-From%3C%26%26str%3E-for-StyledStr"],[778,"impl-From%3CString%3E-for-StyledStr"],[780,"impl-From%3C%26str%3E-for-StyledStr"],[781,"impl-From%3C%26String%3E-for-StyledStr"],[1141,"impl-PartialEq-for-Style"],[1142,"impl-PartialEq%3CEffects%3E-for-Style"],[1152,"impl-From%3C(u8,+u8,+u8)%3E-for-Color"],[1153,"impl-From%3CRgbColor%3E-for-Color"],[1154,"impl-From%3Cu8%3E-for-Color"],[1155,"impl-From%3CAnsiColor%3E-for-Color"],[1156,"impl-From%3CAnsi256Color%3E-for-Color"],[1159,"impl-From%3CAnsiColor%3E-for-Ansi256Color"],[1160,"impl-From%3Cu8%3E-for-Ansi256Color"],[1354,"impl-Display-for-Error%3CF%3E"],[1355,"impl-Debug-for-Error%3CF%3E"],[1356,"impl-Debug-for-ContextKind"],[1357,"impl-Display-for-ContextKind"],[1358,"impl-Display-for-ContextValue"],[1359,"impl-Debug-for-ContextValue"],[1360,"impl-Display-for-ErrorKind"],[1361,"impl-Debug-for-ErrorKind"],[1368,"impl-From%3CError%3E-for-Error%3CF%3E"],[1370,"impl-From%3CError%3E-for-Error%3CF%3E"],[1464,"impl-Debug-for-MatchesError"],[1465,"impl-Display-for-MatchesError"]]},\
"clap_builder":{"doc":"clap_builder","t":"PEEEEKPGEKIKFPKKKEQNNMMMMNNNNNCNNNNNMQMNNNNNNNNCNNNNNNNNNNNMNNNNNNNMNNNNNNNNNNCNNNNMNNNNNNNNNNNNNNNNNMNNQMNPPFGFGFFFPPPPPTPFPPFPPPPPKPFFFFPRFFFFFPGTPPPFFFEFKPFPPPRGFKFPEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNPPFGTTPPPPPPPPPPTGPTTTTFFPTTTPPFPFTFFTPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPGGPEPPPPFKGPPPPPPPPPFPPPPPPPPIFPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFPPPPFFGFPGFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOO","n":["Always","Arg","ArgAction","ArgGroup","ArgMatches","Args","Auto","ColorChoice","Command","CommandFactory","Error","FromArgMatches","Id","Never","Parser","Subcommand","ValueEnum","ValueHint","arg","as_ref","as_str","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","builder","clone","clone","clone_into","clone_into","cmp","command","command","command_for_update","default","default","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_str","from_str","from_str","group_id","group_id","has_subcommand","hash","into","into","into_resettable","into_resettable","into_resettable","parse","parse","parse_from","parse_from","parser","partial_cmp","possible_values","to_owned","to_owned","to_possible_value","to_possible_value","to_string","to_string","try_from","try_from","try_into","try_into","try_parse","try_parse","try_parse_from","try_parse_from","try_update_from","try_update_from","type_id","type_id","update_from","update_from","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","value_parser","value_variants","value_variants","AnyPath","Append","Arg","ArgAction","ArgGroup","ArgPredicate","BoolValueParser","BoolishValueParser","Command","CommandName","CommandString","CommandWithArguments","Count","DirPath","EMPTY","EmailAddress","EnumValueParser","Equals","ExecutablePath","FalseyValueParser","FilePath","Help","HelpLong","HelpShort","Hostname","IntoResettable","IsPresent","MapValueParser","NonEmptyStringValueParser","OsStr","OsStringValueParser","Other","Parser","PathBufValueParser","PossibleValue","PossibleValuesParser","RangedI64ValueParser","RangedU64ValueParser","Reset","Resettable","SINGLE","Set","SetFalse","SetTrue","Str","StringValueParser","StyledStr","Styles","TryMapValueParser","TypedValueParser","Unknown","UnknownArgumentValueParser","Url","Username","Value","Value","ValueHint","ValueParser","ValueParserFactory","ValueRange","Version","_AnonymousValueParser","_AutoValueParser","about","action","after_help","after_long_help","alias","alias","alias","aliases","aliases","aliases","allow_external_subcommands","allow_hyphen_values","allow_missing_positional","allow_negative_numbers","and_suggest","ansi","arg","arg","arg_required_else_help","args","args","args_conflicts_with_subcommands","args_override_self","as_os_str","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","author","before_help","before_long_help","bin_name","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","color","conflicts_with","conflicts_with","conflicts_with_all","conflicts_with_all","debug_assert","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_missing_value","default_missing_value_os","default_missing_values","default_missing_values_os","default_value","default_value_if","default_value_ifs","default_values","defer","deref","deref","disable_colored_help","disable_help_flag","disable_help_subcommand","disable_version_flag","display_name","display_order","display_order","dont_delimit_trailing_values","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","exclusive","external_subcommand_value_parser","find_subcommand","find_subcommand_mut","flatten_help","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get_about","get_action","get_after_help","get_after_long_help","get_all_aliases","get_all_aliases","get_all_long_flag_aliases","get_all_short_aliases","get_all_short_flag_aliases","get_arg_conflicts_with","get_args","get_arguments","get_author","get_before_help","get_before_long_help","get_bin_name","get_color","get_default_values","get_display_name","get_external_subcommand_value_parser","get_groups","get_help","get_help","get_help_heading","get_id","get_id","get_index","get_long","get_long_about","get_long_and_visible_aliases","get_long_flag","get_long_help","get_long_version","get_matches","get_matches_from","get_matches_mut","get_name","get_name","get_name_and_aliases","get_next_help_heading","get_num_args","get_opts","get_positionals","get_possible_values","get_short","get_short_and_visible_aliases","get_short_flag","get_styles","get_subcommand_help_heading","get_subcommand_value_name","get_subcommands","get_subcommands_mut","get_value_delimiter","get_value_hint","get_value_names","get_value_parser","get_value_terminator","get_version","get_visible_aliases","get_visible_aliases","get_visible_long_flag_aliases","get_visible_short_aliases","get_visible_short_flag_aliases","global","group","group","groups","groups","has_subcommands","hash","hash","hash","hash","hash","help","help","help_expected","help_heading","help_template","hide","hide","hide","hide_default_value","hide_long_help","hide_possible_values","hide_possible_values","hide_short_help","id","id","ignore_case","ignore_errors","index","index","infer_long_args","infer_subcommands","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","is_allow_external_subcommands_set","is_allow_hyphen_values_set","is_allow_missing_positional_set","is_allow_negative_numbers_set","is_arg_required_else_help_set","is_args_conflicts_with_subcommands_set","is_disable_colored_help_set","is_disable_help_flag_set","is_disable_help_subcommand_set","is_disable_version_flag_set","is_dont_delimit_trailing_values_set","is_exclusive_set","is_flatten_help_set","is_global_set","is_hide_default_value_set","is_hide_long_help_set","is_hide_possible_values_set","is_hide_set","is_hide_set","is_hide_set","is_hide_short_help_set","is_ignore_case_set","is_last_set","is_multicall_set","is_multiple","is_next_line_help_set","is_next_line_help_set","is_no_binary_name_set","is_positional","is_propagate_version_set","is_require_equals_set","is_required_set","is_required_set","is_subcommand_negates_reqs_set","is_subcommand_precedence_over_arg_set","is_subcommand_required_set","is_trailing_var_arg_set","last","long","long_about","long_flag","long_flag_alias","long_flag_aliases","long_help","long_version","map","map","matches","max_term_width","max_values","min_values","multicall","multiple","mut_arg","mut_args","mut_group","mut_subcommand","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_display_order","next_help_heading","next_line_help","next_line_help","no_binary_name","num_args","os_string","override_help","override_usage","overrides_with","overrides_with_all","parse","parse","parse","parse","parse","parse","parse","parse_","parse_","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref_","parse_ref_","parse_ref_","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path_buf","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","print_help","print_long_help","propagate_version","range","range","raw","render_help","render_long_help","render_long_version","render_usage","render_version","require_equals","required","required","required_if_eq","required_if_eq_all","required_if_eq_any","required_unless_present","required_unless_present_all","required_unless_present_any","requires","requires","requires_all","requires_if","requires_ifs","set_bin_name","short","short_alias","short_aliases","short_flag","short_flag_alias","short_flag_aliases","start_bound","string","styles","styling","subcommand","subcommand_help_heading","subcommand_negates_reqs","subcommand_precedence_over_arg","subcommand_required","subcommand_value_name","subcommands","suggest","suggest_arg","takes_values","takes_values","term_width","to_os_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","trailing_var_arg","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_matches","try_get_matches_from","try_get_matches_from_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map","try_map","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_delimiter","value_hint","value_name","value_names","value_parser","value_parser","value_terminator","version","visible_alias","visible_alias","visible_aliases","visible_aliases","visible_long_flag_alias","visible_long_flag_aliases","visible_short_alias","visible_short_aliases","visible_short_flag_alias","visible_short_flag_aliases","write_char","write_str","Ansi","Ansi256","Ansi256Color","AnsiColor","BLINK","BOLD","Black","Blue","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","CURLY_UNDERLINE","Color","Cyan","DASHED_UNDERLINE","DIMMED","DOTTED_UNDERLINE","DOUBLE_UNDERLINE","EffectIter","Effects","Green","HIDDEN","INVERT","ITALIC","Magenta","Red","Reset","Rgb","RgbColor","STRIKETHROUGH","Style","Styles","UNDERLINE","White","Yellow","b","bg_color","bitor","bitor","bitor_assign","bitor_assign","blink","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","contains","default","default","default","default","default","dimmed","effects","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","fg_color","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ansi","g","get_bg_color","get_effects","get_error","get_fg_color","get_header","get_invalid","get_literal","get_placeholder","get_underline_color","get_usage","get_valid","hash","hash","hash","hash","hash","hash","hash","header","hidden","index","insert","into","into","into","into","into","into","into","into","into","into_ansi","into_iter","invalid","invert","is_bright","is_plain","is_plain","italic","iter","literal","new","new","next","on","on","on","on","on_default","on_default","on_default","on_default","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","placeholder","plain","r","remove","render","render","render","render_bg","render_bg","render_bg","render_bg","render_fg","render_fg","render_fg","render_fg","render_reset","set","strikethrough","styled","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","underline_color","usage","valid","write_reset_to","write_to","ActualNumValues","ArgumentConflict","Bool","ContextKind","ContextValue","Custom","DefaultFormatter","DisplayHelp","DisplayHelpOnMissingArgumentOrSubcommand","DisplayVersion","Err","Error","ErrorFormatter","ErrorKind","ExpectedNumValues","Format","InvalidArg","InvalidSubcommand","InvalidSubcommand","InvalidUtf8","InvalidValue","InvalidValue","Io","KindFormatter","MinValues","MissingRequiredArgument","MissingSubcommand","NoEquals","None","Number","Ok","PriorArg","Result","RichFormatter","String","Strings","StyledStr","StyledStrs","Suggested","SuggestedArg","SuggestedCommand","SuggestedSubcommand","SuggestedValue","TooFewValues","TooManyValues","TrailingArg","UnknownArgument","Usage","ValidSubcommand","ValidValue","ValueValidation","WrongNumberOfValues","apply","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","exit","exit_code","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format_error","format_error","format_error","from","from","from","from","from","from","from","from","get","hash","hash","insert","into","into","into","into","into","into","kind","new","print","raw","render","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","use_stderr","with_cmd","ArgMatches","CommandLine","DefaultValue","Downcast","EnvVariable","IdsRef","Indices","MatchesError","RawValues","UnknownArgument","ValueSource","Values","ValuesRef","args_present","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains_id","default","default","default","default","default","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_count","get_flag","get_many","get_occurrences","get_one","get_raw","get_raw_occurrences","ids","index_of","indices_of","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","partial_cmp","remove_many","remove_occurrences","remove_one","remove_subcommand","size_hint","size_hint","size_hint","size_hint","size_hint","subcommand","subcommand_matches","subcommand_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_contains_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_many","try_get_occurrences","try_get_one","try_get_raw","try_get_raw_occurrences","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_remove_many","try_remove_occurrences","try_remove_one","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_source","actual","expected"],"q":[[0,"clap_builder"],[107,"clap_builder::builder"],[964,"clap_builder::builder::styling"],[1229,"clap_builder::error"],[1371,"clap_builder::parser"],[1532,"clap_builder::parser::MatchesError"],[1534,"core::cmp"],[1535,"alloc::string"],[1536,"core::fmt"],[1537,"core::fmt"],[1538,"core::option"],[1539,"core::hash"],[1540,"std::ffi::os_str"],[1541,"core::convert"],[1542,"core::clone"],[1543,"core::iter::traits::collect"],[1544,"core::iter::traits::iterator"],[1545,"core::any"],[1546,"core::fmt"],[1547,"core::marker"],[1548,"core::marker"],[1549,"core::cmp"],[1550,"core::ops::range"],[1551,"core::ops::function"],[1552,"alloc::boxed"],[1553,"core::cmp"],[1554,"core::marker"],[1555,"std::io::error"]],"d":["Enables colored output regardless of whether or not the …","","","","","Parse a set of arguments into a user-defined container.","Enables colored output only when the output is going to a …","Represents the color preferences for program output","","Create a <code>Command</code> relevant for a user-defined container.","Command Line Argument Parser Error","Converts an instance of <code>ArgMatches</code> to a user-defined …","<code>Arg</code> or <code>ArgGroup</code> identifier","Disables colored output no matter if the output is going …","Parse command-line arguments into <code>Self</code>.","Parse a sub-command into a user-defined enum.","Parse arguments into enums.","","Create an <code>Arg</code> from a usage string.","","Get the raw string of the <code>Id</code>","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","","","","","","Define <code>Command</code> line arguments","","","","","","Build a <code>Command</code> that can instantiate <code>Self</code>.","Requires <code>cargo</code> feature flag to be enabled.","Build a <code>Command</code> that can update <code>self</code>.","","","","","","","","","Error reporting","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Parse an argument into <code>Self</code>.","Parse an argument into <code>Self</code>.","","Report the <code>ArgGroup::id</code> for this set of arguments","Report the <code>ArgGroup::id</code> for this set of arguments","Test whether <code>Self</code> can parse a specific subcommand","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Parse from <code>std::env::args_os()</code>, exit on error","Parse from <code>std::env::args_os()</code>, exit on error","Parse from iterator, exit on error","Parse from iterator, exit on error","<code>Command</code> line argument parser","","Report all <code>possible_values</code>","","","The canonical argument value.","","","","","","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Parse from iterator, return Err on error.","Update from iterator, return Err on error.","Update from iterator, return Err on error.","","","Update from iterator, exit on error","Update from iterator, exit on error","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Select a <code>ValueParser</code> implementation from the intended type","All possible argument values, in display order.","","Any existing path.","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Operations to perform on argument values","Implementation for <code>ValueParser::bool</code>","Parse bool-like string values, everything else is <code>true</code>","Build a command-line interface.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Path to a directory.","Nor argument values, or a flag","Email address.","Parse an <code>ValueEnum</code> value.","Does the argument match the specified value?","Path to an executable file.","Parse false-like string values, everything else is <code>true</code>","Path to a file.","When encountered, display <code>Command::print_help</code>","When encountered, display <code>Command::print_long_help</code>","When encountered, display <code>Command::print_help</code>","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","Convert to the intended resettable type","Is the argument present?","Adapt a <code>TypedValueParser</code> from one value to another","Parse non-empty string values","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::os_string</code>","None of the hints below apply. Disables shell completion …","Generated parser, usually <code>ValueParser</code>.","Implementation for <code>ValueParser::path_buf</code>","A possible value of an argument.","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Parse number that fall within a range of values","Parse number that fall within a range of values","Reset builder value","Clearable builder value","A single argument value, the most common case for options","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::string</code>","Terminal-styling container","","Adapt a <code>TypedValueParser</code> from one value to another","Parse/validate argument values","Default value if hint is not specified. Follows shell …","When encountered, report ErrorKind::UnknownArgument","Complete web address.","Name of a local operating system user.","Overwrite builder value","Argument’s value type","Provide shell with hint on how to complete an argument.","Parse/validate argument values","Register a type with value_parser!","Values per occurrence for an argument","When encountered, display <code>Command::version</code>","","","Sets the program’s description for the short help (<code>-h</code>).","Specify how to react to an argument when parsing it.","Free-form help text for after auto-generated short help (<code>-h</code>…","Free-form help text for after auto-generated long help (…","Add an alias, which functions as a hidden long flag.","Sets a hidden alias to this subcommand.","Sets a <em>hidden</em> alias for this argument value.","Add aliases, which function as hidden long flags.","Sets multiple hidden aliases to this subcommand.","Sets multiple <em>hidden</em> aliases for this argument value.","Assume unexpected positional arguments are a <code>subcommand</code>.","Allows values which start with a leading hyphen (<code>-</code>)","Allows one to implement two styles of CLIs where …","Allows negative numbers to pass as values.","Extend the suggestions","Display using ANSI Escape Code styling","Adds an argument to this group by name","Adds an argument to the list of valid possibilities.","Exit gracefully if no arguments are present (e.g. <code>$ myprog</code>…","Adds multiple arguments to this group by name","Adds multiple arguments to the list of valid possibilities.","Specifies that use of an argument prevents the use of …","Replace prior occurrences of arguments rather than error","Get the raw string as an <code>std::ffi::OsStr</code>","","","","","","","Get the raw string of the <code>Str</code>","Sets the author(s) for the help message.","Free-form help text for before auto-generated short help (…","Free-form help text for before auto-generated long help (…","Overrides the runtime-determined name of the binary for …","<code>bool</code> parser for argument values","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Prepare for introspecting on all included <code>Command</code>s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets when to color output.","This argument is mutually exclusive with the specified …","Specify an argument or group that must <strong>not</strong> be present when …","This argument is mutually exclusive with the specified …","Specify arguments or groups that must <strong>not</strong> be present when …","Catch problems earlier in the development cycle.","","","","","","","","","","","","","","","","","","","","","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when not present.","Specifies the value of the argument if <code>arg</code> has been used …","Specifies multiple values and conditions in the same …","Value for the argument when not present.","Delay initialization for parts of the <code>Command</code>","","","Disables colorized help messages.","Disables <code>-h</code> and <code>--help</code> flag.","Disables the <code>help</code> <code>subcommand</code>.","Disables <code>-V</code> and <code>--version</code> flag.","Overrides the runtime-determined display name of the …","Allows custom ordering of args within the help message.","Set the placement of this subcommand within the help.","Disables the automatic delimiting of values after <code>--</code> or …","","","","","","","","","","","","","","","","","","","","","","","Custom error message for post-parsing validation","This argument must be passed alone; it conflicts with all …","Specifies how to parse external subcommand arguments.","Find subcommand such that its name or one of aliases …","Find subcommand such that its name or one of aliases …","Flatten subcommand help into the current command’s help","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get the help message specified via <code>Command::about</code>.","Behavior when parsing the argument","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get <em>all</em> aliases for this argument, if any, both visible …","Iterate through the set of <em>all</em> the aliases for this …","Iterate through the set of <em>all</em> the long aliases for this …","Get <em>all</em> short aliases for this argument, if any, both …","Iterate through the set of <em>all</em> the short aliases for this …","Get a list of all arguments the given argument conflicts …","Getters for all args. It will return a vector of <code>Id</code>","Iterate through the set of arguments.","Get the authors of the cmd.","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get the name of the binary.","Should we color the output?","Get the default values specified for this argument, if any","Get the name of the binary.","Configured parser for values passed to an external …","Iterate through the set of groups.","Get the help specified for this argument, if any","Get the help specified for this argument, if any","Get the help heading specified for this argument, if any","Get the name of the argument","Get the name of the group","Get the index of this argument, if any","Get the long option name for this argument, if any","Get the help message specified via <code>Command::long_about</code>.","Get the long option name and its visible aliases, if any","Get the long flag of the subcommand.","Get the long help specified for this argument, if any","Get the long version of the cmd.","Parse <code>env::args_os</code>, exiting on failure.","Parse the specified arguments, exiting on failure.","Parse <code>env::args_os</code>, exiting on failure.","Get the name of the cmd.","Get the name of the argument value","Returns all valid values of the argument value.","Get the custom section heading specified via …","Get the number of values for this argument.","Iterate through the <em>options</em>.","Iterate through the <em>positionals</em> arguments.","Get the names of possible values for this argument. Only …","Get the short option name for this argument, if any","Get the short option name and its visible aliases, if any","Get the short flag of the subcommand.","Return the current <code>Styles</code> for the <code>Command</code>","Returns the help heading for listing subcommands.","Returns the subcommand value name.","Iterate through the set of subcommands, getting a …","Iterate through the set of subcommands, getting a mutable …","Get the delimiter between multiple values","Get the value hint of this argument","Get the names of values for this argument.","Configured parser for argument values","Get the value terminator for this argument. The …","Get the version of the cmd.","Get visible aliases for this argument, if any","Iterate through the <em>visible</em> aliases for this subcommand.","Iterate through the <em>visible</em> long aliases for this …","Get visible short aliases for this argument, if any","Iterate through the <em>visible</em> short aliases for this …","Specifies that an argument can be matched to all child …","The name of the <code>ArgGroup</code> the argument belongs to.","Adds an <code>ArgGroup</code> to the application.","The names of <code>ArgGroup</code>’s the argument belongs to.","Adds multiple <code>ArgGroup</code>s to the <code>Command</code> at once.","Returns <code>true</code> if this <code>Command</code> has subcommands.","","","","","","Sets the description of the argument for short help (<code>-h</code>).","Sets the help description of the value.","Panic if help descriptions are omitted.","Override the current help section.","Sets the help template to be used, overriding the default …","Do not display the argument in help message.","Specifies that this <code>subcommand</code> should be hidden from help …","Hides this value from help and shell completions.","Do not display the default value of the argument in the …","Hides an argument from long help (<code>--help</code>).","Do not display the possible values in the help message.","Tells <code>clap</code> <em>not</em> to print possible values when displaying …","Hides an argument from short help (<code>-h</code>).","Set the identifier used for referencing this argument in …","Sets the group name.","Match values against <code>PossibleValuesParser</code> without matching …","Try not to fail on parse errors, like missing option …","Specifies the index of a positional argument <strong>starting at</strong> 1.","","Allow partial matches of long arguments or their aliases.","Allow partial matches of subcommand names and their aliases…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to the intended resettable type","","","","","","","","","","","","","","","","","","","","","","","","","","Report whether <code>Command::allow_external_subcommands</code> is set","Report whether <code>Arg::allow_hyphen_values</code> is set","Report whether <code>Command::allow_missing_positional</code> is set","Report whether <code>Arg::allow_negative_numbers</code> is set","Report whether <code>Command::arg_required_else_help</code> is set","Report whether <code>Command::args_conflicts_with_subcommands</code> is …","Report whether <code>Command::disable_colored_help</code> is set","Report whether <code>Command::disable_help_flag</code> is set","Report whether <code>Command::disable_help_subcommand</code> is set","Report whether <code>Command::disable_version_flag</code> is set","Report whether <code>Command::dont_delimit_trailing_values</code> is set","Reports whether <code>Arg::exclusive</code> is set","Get the custom section heading specified via …","Report whether <code>Arg::global</code> is set","Report whether <code>Arg::hide_default_value</code> is set","Report whether <code>Arg::hide_long_help</code> is set","Report whether <code>Arg::hide_possible_values</code> is set","Report whether <code>Arg::hide</code> is set","Report whether <code>Command::hide</code> is set","Report if <code>PossibleValue::hide</code> is set","Report whether <code>Arg::hide_short_help</code> is set","Reports whether <code>Arg::ignore_case</code> is set","Reports whether <code>Arg::last</code> is set","Report whether <code>Command::multicall</code> is set","Return true if the group allows more than one of the …","Report whether <code>Arg::next_line_help</code> is set","Report whether <code>Command::next_line_help</code> is set","Report whether <code>Command::no_binary_name</code> is set","Checks whether this argument is a positional or not.","Report whether <code>Command::propagate_version</code> is set","Report whether <code>Arg::require_equals</code> is set","Reports whether <code>Arg::required</code> is set","Reports whether <code>ArgGroup::required</code> is set","Report whether <code>Command::subcommand_negates_reqs</code> is set","Report whether <code>Command::subcommand_precedence_over_arg</code> is …","Report whether <code>Command::subcommand_required</code> is set","Report whether <code>Arg::trailing_var_arg</code> is set","This arg is the last, or final, positional argument (i.e. …","Sets the long version of the argument without the …","Sets the program’s description for the long help (<code>--help</code>…","Sets the long version of the subcommand flag without the …","Add an alias, which functions as a “hidden” long flag …","Add aliases, which function as “hidden” long flag …","Sets the description of the argument for long help (<code>--help</code>…","Sets the version for the long version (<code>--version</code>) and help …","Adapt a <code>TypedValueParser</code> from one value to another","Adapt a <code>TypedValueParser</code> from one value to another","Tests if the value is valid for this argument value","Limit the line length for wrapping help when using the …","Most number of values the argument accepts","Fewest number of values the argument accepts","Multiple-personality program dispatched on the binary name …","Allows more than one of the <code>Arg</code>s in this group to be used. …","Allows one to mutate an <code>Arg</code> after it’s been added to a …","Allows one to mutate all <code>Arg</code>s after they’ve been added …","Allows one to mutate an <code>ArgGroup</code> after it’s been added …","Allows one to mutate a <code>Command</code> after it’s been added as …","(Re)Sets the program’s name.","Custom parser for argument values","Create a new <code>Arg</code> with a unique name.","Create a <code>ArgGroup</code> using a unique name.","Creates a new instance of an <code>Command</code>.","Create a <code>PossibleValue</code> with its name.","Create a range","Create an empty buffer","Implementation for <code>ValueParser::string</code>","Implementation for <code>ValueParser::os_string</code>","Implementation for <code>ValueParser::path_buf</code>","Parse an <code>ValueEnum</code>","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Select full range of <code>i64</code>","Select full range of <code>u64</code>","Implementation for <code>ValueParser::bool</code>","Parse false-like string values, everything else is <code>true</code>","Parse bool-like string values, everything else is <code>true</code>","Parse non-empty string values","Change the starting value for assigning future display …","Set the default section heading for future args.","Render the help on the line after the argument.","Places the help string for all arguments and subcommands …","Specifies that the parser should not assume the first …","Specifies the number of arguments parsed per occurrence","<code>OsString</code> parser for argument values","Overrides the <code>clap</code> generated help message (both <code>-h</code> and …","Overrides the <code>clap</code> generated usage string for help and …","Sets an overridable argument.","Sets multiple mutually overridable arguments by name.","Parse the argument value","Parse the argument value","","","","","","Parse the argument value","Parse the argument value","Parse the argument value","","","","","","","","","","","","","","","Parse the argument value","Parse the argument value","","","","","","","<code>PathBuf</code> parser for argument values","Reflect on enumerated value properties","Reflect on enumerated value properties","Reflect on enumerated value properties","","","","","","","","Prints the short help message (<code>-h</code>) to <code>io::stdout()</code>.","Prints the long help message (<code>--help</code>) to <code>io::stdout()</code>.","Specifies to use the version of the current command for …","Narrow the supported range","Narrow the supported range","Consume all following arguments.","Render the short help message (<code>-h</code>) to a <code>StyledStr</code>","Render the long help message (<code>--help</code>) to a <code>StyledStr</code>.","Version message rendered as if the user ran <code>--version</code>.","Usage statement","Version message rendered as if the user ran <code>-V</code>.","Requires that options use the <code>--option=val</code> syntax","Specifies that the argument must be present.","Require an argument from the group to be present when …","This argument is required only if the specified <code>arg</code> is …","Specify this argument is required based on multiple …","Specify this argument is required based on multiple …","Set this arg as required as long as the specified argument …","Sets this arg as required unless <em>all</em> of the specified …","Sets this arg as required unless <em>any</em> of the specified …","Sets an argument that is required when this one is present","Specify an argument or group that must be present when …","Specify arguments or groups that must be present when this …","Require another argument if this arg matches the …","Allows multiple conditional requirements.","Set binary name. Uses <code>&amp;mut self</code> instead of <code>self</code>.","Sets the short version of the argument without the …","Add an alias, which functions as a hidden short flag.","Add aliases, which functions as a hidden short flag.","Sets the short version of the subcommand flag without the …","Add an alias, which functions as  “hidden” short flag …","Add aliases, which function as “hidden” short flag …","","<code>String</code> parser for argument values","Sets the <code>Styles</code> for terminal output","Terminal <code>Styles</code> for help and error output","Adds a subcommand to the list of valid possibilities.","Sets the help heading used for subcommands when printing …","Allows <code>subcommands</code> to override all requirements of the …","Prevent subcommands from being consumed as an arguments …","If no <code>subcommand</code> is present at runtime, error and exit …","Sets the value name used for subcommands when printing …","Adds multiple subcommands to the list of valid …","Provide a general suggestion","Suggest an alternative argument","Returns whether this action accepts values on the …","Report whether the argument takes any values (ie is a flag)","Sets the terminal width at which to wrap help messages.","Get the raw string as an <code>OsString</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is a “VarArg” and everything that follows should …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse <code>env::args_os</code>, returning a <code>clap::Result</code> on failure.","Parse the specified arguments, returning a <code>clap::Result</code> on …","Parse the specified arguments, returning a <code>clap::Result</code> on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adapt a <code>TypedValueParser</code> from one value to another","Adapt a <code>TypedValueParser</code> from one value to another","","Describes the content of <code>AnyValue</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","Allow grouping of multiple values via a delimiter.","Provide the shell a hint about how to complete this …","Placeholder for the argument’s value in the help message …","Placeholders for the argument’s values in the help …","Create the specified <code>Self::Parser</code>","Specify the typed behavior of the argument.","Sentinel to <strong>stop</strong> parsing multiple values of a given …","Sets the version for the short version (<code>-V</code>) and help …","Add an alias, which functions as a visible long flag.","Sets a visible alias to this subcommand.","Add aliases, which function as visible long flags.","Sets multiple visible aliases to this subcommand.","Add an alias, which functions as a “visible” long flag …","Add aliases, which function as <em>visible</em> long flag …","Add an alias, which functions as a visible short flag.","Add aliases, which function as visible short flags.","Add an alias, which functions as  “visible” short flag …","Add aliases, which function as <em>visible</em> short flag …","","","","","256 (8-bit) color support","Available 4-bit ANSI color palette codes","","","Black: #0 (foreground code <code>30</code>, background code <code>40</code>).","Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).","Bright black: #0 (foreground code <code>90</code>, background code <code>100</code>).","Bright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).","Bright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).","Bright green: #2 (foreground code <code>92</code>, background code <code>102</code>).","Bright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>…","Bright red: #1 (foreground code <code>91</code>, background code <code>101</code>).","Bright white: #7 (foreground code <code>97</code>, background code <code>107</code>).","Bright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>…","","Any ANSI color code scheme","Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).","","","","","","A set of text effects","Green: #2 (foreground code <code>32</code>, background code <code>42</code>).","","Swap foreground and background colors; inconsistent …","Not widely supported. Sometimes treated as inverse or blink","Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).","Red: #1 (foreground code <code>31</code>, background code <code>41</code>).","Reset terminal formatting","","24-bit ANSI RGB color codes","Characters legible but marked as if for deletion. Not …","ANSI Text styling","Terminal styling definitions","Style extensions exist for Kitty, VTE, mintty and iTerm2.","White: #7 (foreground code <code>37</code>, background code <code>47</code>).","Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).","","Set background color","","","","","Apply <code>blink</code> effect","Apply <code>bold</code> effect","","","","","","","","","","","","","","","","","","","Change the color to/from bright","Reset all effects in-place","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all of the effects in <code>other</code> are contained …","","","","","","Apply <code>dimmed</code> effect","Set text effects","","","","","","","","","","Error heading","Set foreground color","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Error heading","","General Heading style, e.g. <code>help_heading</code>","Highlight invalid usage","Literal command-line syntax, e.g. <code>--help</code>","Descriptions within command-line syntax, e.g. <code>value_name</code>","","Usage heading","Highlight suggested usage","","","","","","","","General Heading style, e.g. <code>help_heading</code>","Apply <code>hidden</code> effect","","Inserts the specified effects in-place.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Highlight invalid usage","Apply <code>invert</code> effect","Report whether the color is bright","Check if no effects are enabled","Check if no effects are enabled","Apply <code>italic</code> effect","Iterate over enabled effects","Literal command-line syntax, e.g. <code>--help</code>","No effects enabled","No effects enabled","","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","","","","","","","","Descriptions within command-line syntax, e.g. <code>value_name</code>","No terminal styling","","Removes the specified effects in-place.","Render the ANSI code","Render the ANSI code","Render the ANSI code","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Renders the relevant <code>Reset</code> code","Enable or disable the specified effects depending on the …","Apply <code>strikethrough</code> effect","Default terminal styling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply <code>underline</code> effect","Set underline color","Usage heading","Highlight suggested usage","Write the relevant <code>Reset</code> code","Write the ANSI code","Number of values present","Occurs when the user provides two values which conflict …","A single value","Semantics for a piece of error information","A piece of error information","An opaque message to the user","","Not a true “error” as it means <code>--help</code> or similar was …","Occurs when either an argument or a <code>Subcommand</code> is …","Not a true “error” as it means <code>--version</code> or similar …","Contains the error value","Command Line Argument Parser Error","Defines how to format an error for displaying to the user","Command line argument parser kind of error","Number of allowed values","Represents a Format error (which is a part of <code>Display</code>). …","The cause of the error","The cause of the error","Occurs when the user provides an unrecognized <code>Subcommand</code> …","Occurs when the user provides a value containing invalid …","Rejected values","Occurs when an <code>Arg</code> has a set of possible values, and the …","Represents an I/O error. Can occur when writing to <code>stderr</code> …","Report <code>ErrorKind</code>","Minimum number of allowed values","Occurs when the user does not provide one or more required …","Occurs when a subcommand is required (as defined by …","Occurs when the user doesn’t use equals for an option …","<code>ContextKind</code> is self-sufficient, no additional information …","A single value","Contains the success value","Existing arguments","Short hand for <code>Result</code> type","Richly formatted error context","A single value","Many values","A single value","many value","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Occurs when the user provides fewer values for an argument …","Occurs when a user provides more values for an argument …","Trailing argument","Occurs when a user provides a flag, option, argument or …","A usage string","Accepted subcommands","Accepted values","Occurs when the user provides a value for an argument with …","Occurs when the user provides a different number of values …","Apply an alternative formatter to the error","End-user description of the error case, where relevant","End-user description of the error case, where relevant","","","","","","","","","","","","","","","","","","","Additional information to further qualify the error","","","","Prints the error and exits.","Returns the exit code that <code>.exit</code> will exit the process …","","","","","","","","","Format the existing message with the Command’s context","Stylize the error for the terminal","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Lookup a piece of context","","","Insert a piece of context","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Type of error for programmatic processing","Create an error with a pre-defined message","Prints formatted and colored error to <code>stdout</code> or <code>stderr</code> …","Create an unformatted error","Render the error message to a <code>StyledStr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Should the message be written to <code>stdout</code> or not?","Apply <code>Command</code>’s formatting to the error","Container for parse results.","Value was passed in on the command-line","Value came <code>Arg::default_value</code>","Failed to downcast <code>AnyValue</code> to the specified type","Value came [<code>Arg::env</code>][crate::Arg::env]","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","Iterate over indices for where an argument appeared when …","Violation of <code>ArgMatches</code> assumptions","Iterate over raw argument values via <code>ArgMatches::get_raw</code>.","Argument not defined in <code>Command</code>","Origin of the argument’s value","Iterate over multiple values for an argument via …","Iterate over multiple values for an argument via …","Check if any args were present on the command line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if values are present for the argument or group id","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the value of a specific <code>ArgAction::Count</code> flag","Gets the value of a specific <code>ArgAction::SetTrue</code> or …","Iterate over values of a specific option or positional …","Iterate over the values passed to each occurrence of an …","Gets the value of a specific option or positional argument.","Iterate over the original argument values.","Iterate over the original values for each occurrence of an …","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","The first index of that an argument showed up.","All indices an argument appeared at when parsing.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Return values of a specific option or positional argument.","Return values for each occurrence of an option.","Returns the value of a specific option or positional …","Return the name and <code>ArgMatches</code> of the current subcommand.","","","","","","The name and <code>ArgMatches</code> of the current subcommand.","The <code>ArgMatches</code> for the current subcommand.","The name of the current subcommand.","","","","","","","","","","Non-panicking version of <code>ArgMatches::contains_id</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::get_many</code>","Non-panicking version of <code>ArgMatches::get_occurrences</code>","Non-panicking version of <code>ArgMatches::get_one</code>","Non-panicking version of <code>ArgMatches::get_raw</code>","Non-panicking version of <code>ArgMatches::get_raw_occurrences</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::remove_many</code>","Non-panicking version of <code>ArgMatches::remove_occurrences</code>","Non-panicking version of <code>ArgMatches::remove_one</code>","","","","","","","","","Report where argument value came from","Type for value stored in <code>ArgMatches</code>","The target type to downcast to"],"i":[4,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,1,1,121,121,122,122,1,1,4,1,4,0,1,4,1,4,1,123,0,123,1,4,1,1,1,1,1,4,0,1,1,4,4,1,1,1,1,1,1,4,13,13,13,16,16,4,121,121,122,1,1,4,1,1,1,20,20,20,20,0,1,4,1,4,16,4,1,4,1,4,1,4,20,20,20,20,20,20,1,4,20,20,13,13,13,0,16,4,44,33,0,0,0,0,0,0,0,44,44,44,33,44,43,44,0,42,44,0,44,33,33,33,44,0,42,0,0,0,0,44,124,0,0,0,0,0,19,0,43,33,33,33,0,0,0,0,0,0,44,0,44,44,19,77,0,0,0,0,33,0,0,3,32,3,3,32,3,26,32,3,26,3,32,3,32,34,30,36,3,3,36,3,3,3,37,37,37,7,7,7,7,7,3,3,3,3,41,41,33,32,36,42,3,37,37,26,43,19,7,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,41,33,32,36,42,3,37,26,43,19,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,3,41,33,32,36,42,3,37,26,43,19,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,41,33,32,36,42,3,37,26,43,19,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,32,37,19,7,30,3,32,36,32,36,3,32,36,3,37,26,43,7,30,30,44,45,46,47,48,52,55,57,58,59,60,32,32,32,32,32,32,32,32,3,37,7,3,3,3,3,3,32,3,3,43,32,36,42,37,37,37,37,37,37,26,43,19,7,7,7,7,7,7,7,30,44,3,32,3,3,3,3,41,33,32,32,36,42,3,3,37,26,43,43,19,7,7,30,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,41,41,41,41,41,41,41,41,41,41,33,32,32,36,36,42,42,3,3,37,37,37,37,37,37,37,37,26,26,43,43,43,43,43,43,43,43,19,19,19,19,7,7,7,7,7,30,30,30,30,30,44,45,46,47,48,51,51,52,52,55,55,57,58,59,60,61,62,34,44,3,32,3,3,32,3,3,32,3,3,36,3,3,3,3,3,3,32,3,3,3,32,26,32,32,36,32,32,3,32,3,32,3,3,3,3,3,26,26,3,32,3,3,32,32,32,3,3,3,3,3,3,32,32,32,32,32,3,32,3,3,32,3,32,32,3,32,3,3,37,43,19,7,44,32,26,3,32,3,32,3,26,32,32,32,3,32,32,36,32,3,32,3,3,3,41,33,32,36,42,3,37,26,43,19,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,31,41,33,37,43,19,7,7,7,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,3,32,3,32,3,3,3,3,3,3,3,32,3,32,32,32,32,32,3,26,32,32,32,3,36,32,3,3,32,3,32,32,36,3,3,3,32,32,32,3,3,3,3,32,3,77,77,26,3,43,43,3,36,3,3,3,3,3,41,32,36,3,26,43,30,45,46,47,48,51,52,55,57,58,59,60,3,3,32,3,3,32,41,3,3,32,32,77,77,45,46,47,51,61,77,77,77,45,46,47,48,51,52,55,57,58,59,60,61,62,34,77,77,34,32,37,19,7,30,41,41,77,77,48,51,57,58,59,61,62,3,3,3,52,55,32,3,3,3,3,3,32,32,36,32,32,32,32,32,32,32,36,36,32,32,3,32,32,32,3,3,3,43,41,3,0,3,3,3,3,3,3,3,34,34,33,43,3,37,41,33,32,36,42,3,37,26,43,19,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,32,3,43,7,30,32,41,33,32,36,42,3,37,26,43,19,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,3,3,3,41,33,32,36,42,3,37,26,43,19,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,77,77,41,41,33,32,36,42,3,37,26,43,19,7,30,44,45,46,47,48,51,52,55,57,58,59,60,61,62,34,32,32,32,32,124,32,32,3,32,3,32,3,3,3,32,32,3,3,30,30,98,98,0,0,99,99,100,100,100,100,100,100,100,100,100,100,99,0,100,99,99,99,99,0,0,100,99,99,99,100,100,0,98,0,99,0,0,99,100,100,96,97,99,97,99,97,97,97,98,100,101,96,99,102,103,97,83,98,100,101,96,99,102,103,97,83,100,99,98,100,101,96,99,102,103,97,83,98,100,101,96,99,102,103,97,83,98,100,101,96,99,103,97,99,99,103,97,83,83,97,97,98,100,101,96,99,102,103,97,97,83,97,98,100,101,96,99,102,103,97,83,98,98,98,98,98,98,100,101,101,101,96,96,99,102,103,97,97,83,101,96,97,97,83,97,83,83,83,83,97,83,83,98,100,101,96,99,103,97,83,97,101,99,98,100,101,96,99,102,103,97,83,101,102,83,97,100,99,97,97,99,83,99,97,102,98,100,101,96,98,100,101,96,98,100,101,96,99,103,97,83,83,96,99,99,103,97,98,100,101,96,98,100,101,96,97,99,97,83,99,97,99,97,98,100,101,96,99,102,103,97,83,98,100,101,96,99,102,103,97,83,98,100,101,96,99,102,103,97,83,98,100,101,96,99,102,103,97,83,97,97,83,83,97,97,109,67,110,0,0,109,0,67,67,67,95,0,0,0,109,67,109,109,67,67,109,67,67,0,109,67,67,67,110,110,95,109,0,0,110,110,110,110,109,109,109,109,109,67,67,109,67,109,109,109,67,67,107,109,67,112,113,107,109,110,67,112,113,107,109,110,67,109,110,67,109,110,67,107,109,110,67,107,107,107,107,109,109,110,110,67,67,107,108,112,113,112,113,107,107,107,109,110,67,107,109,67,107,112,113,107,109,110,67,107,107,107,107,107,107,109,110,67,107,109,110,67,112,113,107,109,110,67,112,113,107,109,110,67,112,113,107,109,110,67,107,107,0,90,90,114,90,0,0,0,0,114,0,0,0,12,114,12,115,116,117,118,119,90,114,12,115,116,117,118,119,90,114,12,115,116,117,118,119,90,114,12,115,116,117,118,119,90,90,12,12,116,117,118,119,12,90,114,114,12,115,116,117,118,119,90,114,12,115,116,117,118,119,90,12,12,12,12,12,12,12,12,12,12,114,12,115,116,117,118,119,90,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,90,12,12,12,12,115,116,117,118,119,12,12,12,114,12,115,116,117,118,119,90,114,12,114,12,115,116,117,118,119,90,12,12,12,12,12,114,12,115,116,117,118,119,90,12,12,12,114,12,115,116,117,118,119,90,12,125,125],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[3,3],[3,3],[3,3],[3,3],[-1,-2,[],[]],[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[4,4],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,1],6],[[],3],0,[[],3],[[],1],[[],4],[[1,7],8],[[1,2],8],[[1,2],8],[[1,9],8],[[1,1],8],[[4,4],8],0,[[1,10],11],[[1,10],11],[[4,10],11],[[4,10],11],[7,1],[7,1],[1,1],[-1,-1,[]],[2,1],[2,1],[-1,-1,[]],[12,[[15,[13,14]]]],[12,[[15,[13,14]]]],[12,[[15,[13,14]]]],[[2,8],[[15,[16,9]]]],[[2,8],[[15,[16,9]]]],[2,[[15,[4,-1]]],[]],[[],[[17,[1]]]],[[],[[17,[1]]]],[2,8],[[1,-1],5,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[19,[9]]],[]],[-1,[[19,[7]]],[]],[-1,[[19,[1]]],[]],[[],20],[[],20],[-2,20,[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[-2,20,[[22,[21]],23],[[25,[],[[24,[-1]]]]]],0,[[1,1],[[17,[6]]]],[[],[[0,[[27,[],[[24,[26]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[16,[[17,[26]]]],[4,[[17,[26]]]],[-1,9,[]],[-1,9,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[],[[15,[20,14]]]],[[],[[15,[20,14]]]],[-2,[[15,[20,14]]],[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[-2,[[15,[20,14]]],[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[[20,-2],[[15,[5,14]]],[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[[20,-2],[[15,[5,14]]],[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[-1,28,[]],[-1,28,[]],[[20,-2],5,[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[[20,-2],5,[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[[13,12],[[15,[5,14]]]],[[13,12],[[15,[5,14]]]],[[13,12],[[15,[5,14]]]],0,[[],[[29,[16]]]],[[],[[29,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,-1],3,[[31,[30]]]],[[32,-1],32,[[31,[33]]]],[[3,-1],3,[[31,[30]]]],[[3,-1],3,[[31,[30]]]],[[32,-1],32,[[31,[7]]]],[[3,-1],3,[[31,[7]]]],[[26,-1],26,[[31,[7]]]],[[32,-2],32,[[22,[7]]],[[25,[],[[24,[-1]]]]]],[[3,-2],3,[[22,[7]]],[[25,[],[[24,[-1]]]]]],[[26,-2],26,[[22,[7]]],[[25,[],[[24,[-1]]]]]],[[3,8],3],[[32,8],32],[[3,8],3],[[32,8],32],[[34,-1],34,[[22,[30]]]],[30,[[0,[35]]]],[[36,-1],36,[[31,[1]]]],[[3,-1],3,[[22,[32]]]],[[3,8],3],[[36,-2],36,[[22,[1]]],[[25,[],[[24,[-1]]]]]],[[3,-2],3,[[22,[32]]],[[25,[],[[24,[-1]]]]]],[[3,8],3],[[3,8],3],[37,38],[37,39],[37,38],[7,39],[7,[[29,[40]]]],[7,2],[7,38],[7,2],[[3,-1],3,[[31,[7]]]],[[3,-1],3,[[31,[30]]]],[[3,-1],3,[[31,[30]]]],[[3,-1],3,[[31,[9]]]],[[],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,5],[41,41],[33,33],[32,32],[36,36],[42,42],[3,3],[37,37],[26,26],[43,43],[[[19,[-1]]],[[19,[-1]]],23],[7,7],[30,30],[44,44],[45,45],[46,46],[47,47],[[[48,[-1]]],[[48,[-1]]],[23,16,23,49,50]],[51,51],[[[52,[-1]]],[[52,[-1]]],[23,[54,[53]],23,49,50]],[[[55,[-1]]],[[55,[-1]]],[23,[54,[56]]]],[57,57],[58,58],[59,59],[60,60],[[[61,[-1,-2]]],[[61,[-1,-2]]],23,23],[[[62,[-1,-2]]],[[62,[-1,-2]]],23,23],[34,34],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[32,32],6],[[37,37],6],[[[19,[-1]],[19,[-1]]],6,63],[[7,7],6],[[30,30],6],[[3,4],3],[[32,-1],32,[[31,[1]]]],[[36,-1],36,[[31,[1]]]],[[32,-2],32,[[22,[1]]],[[25,[],[[24,[-1]]]]]],[[36,-2],36,[[22,[1]]],[[25,[],[[24,[-1]]]]]],[3,5],[[],32],[[],36],[[],3],[[],37],[[],26],[[],43],[[],7],[[],30],[[],30],[[],44],[[],45],[[],46],[[],47],[[],[[48,[-1]]],[16,23,49,50]],[[],[[52,[-1]]],[[54,[53]],23,49,50]],[[],[[55,[-1]]],[[54,[56]]]],[[],57],[[],58],[[],59],[[],60],[[32,-1],32,[[31,[37]]]],[[32,-1],32,[[22,[37]]]],[[32,-2],32,[[22,[37]]],[[25,[],[[24,[-1]]]]]],[[32,-2],32,[[22,[37]]],[[25,[],[[24,[-1]]]]]],[[32,-1],32,[[31,[37]]]],[[32,-1,-2,-3],32,[[22,[1]]],[[22,[42]]],[[31,[37]]]],[[32,-4],32,[[22,[1]]],[[22,[42]]],[[31,[37]]],[[25,[],[[24,[[5,[-1,-2,-3]]]]]]]],[[32,-2],32,[[22,[37]]],[[25,[],[[24,[-1]]]]]],[3,3],[37,38],[7,2],[[3,8],3],[[3,8],3],[[3,8],3],[[3,8],3],[[3,-1],3,[[31,[9]]]],[[32,-1],32,[[31,[64]]]],[[3,-1],3,[[31,[64]]]],[[3,8],3],[43,[[65,[64]]]],[[32,32],8],[[36,36],8],[[42,42],8],[[37,21],8],[[37,2],8],[[37,37],8],[[37,2],8],[[37,38],8],[[37,9],8],[[26,26],8],[[43,43],8],[[[19,[-1]],[19,[-1]]],8,66],[[7,38],8],[[7,2],8],[[7,1],8],[[7,38],8],[[7,9],8],[[7,7],8],[[7,2],8],[[30,30],8],[[44,44],8],[[3,67,-1],14,35],[[32,8],32],[[3,-1],3,[[31,[41]]]],[[3,-1],[[17,[3]]],[[68,[38]]]],[[3,-1],[[17,[3]]],[[68,[38]]]],[[3,8],3],[[41,10],[[15,[5,69]]]],[[33,10],11],[[32,10],11],[[32,10],[[15,[5,69]]]],[[36,10],11],[[42,10],11],[[3,10],11],[[3,10],11],[[37,10],11],[[26,10],11],[[43,10],11],[[43,10],11],[[[19,[-1]],10],11,70],[[7,10],11],[[7,10],11],[[30,10],11],[[30,10],11],[[44,10],11],[[45,10],11],[[46,10],11],[[47,10],11],[[[48,[-1]],10],11,[70,16,23,49,50]],[[51,10],11],[[[52,[-1]],10],11,[70,[54,[53]],23,49,50]],[[[55,[-1]],10],11,[70,[54,[56]]]],[[57,10],11],[[58,10],11],[[59,10],11],[[60,10],11],[[[61,[-1,-2]],10],11,70,70],[[[62,[-1,-2]],10],11,70,70],[[34,10],11],[[[71,[53]]],41],[[[72,[-1]]],41,[[22,[26]]]],[[[73,[-1]]],41,[[22,[26]]]],[[[74,[53]]],41],[[[75,[53]]],41],[[[76,[53]]],41],[-1,41,[77,49,50]],[-1,-1,[]],[[[78,[53]]],41],[79,41],[-1,-1,[]],[-1,-1,[]],[32,32],[-1,-1,[]],[36,36],[-1,42,[[22,[37]]]],[-1,-1,[]],[3,3],[-1,-1,[]],[2,37],[38,37],[-1,-1,[]],[7,37],[37,37],[38,37],[2,37],[7,37],[-1,26,[[22,[7]]]],[-1,-1,[]],[79,43],[64,43],[-1,-1,[]],[[[76,[64]]],43],[[[71,[64]]],43],[[[74,[64]]],43],[[[75,[64]]],43],[[[78,[64]]],43],[80,-1,[]],[[[17,[-1]]],[[19,[-1]]],[]],[-1,[[19,[-1]]],[]],[-1,-1,[]],[7,7],[1,7],[-1,-1,[]],[2,7],[2,7],[9,30],[2,30],[-1,-1,[]],[9,30],[2,30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-2,51,[[22,[26]]],[[25,[],[[24,[-1]]]]]],[-1,[[52,[-2]]],[[81,[53]]],[[54,[53]],23,49,50]],[-1,-1,[]],[-1,[[55,[-2]]],[[81,[56]]],[[54,[56]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[15,[44,-1]]],[]],[3,[[17,[30]]]],[32,33],[3,[[17,[30]]]],[3,[[17,[30]]]],[32,[[17,[[72,[2]]]]]],[3,[[0,[[27,[],[[24,[2]]]]]]]],[3,[[0,[[27,[],[[24,[2]]]]]]]],[32,[[17,[[72,[82]]]]]],[3,[[0,[[27,[],[[24,[82]]]]]]]],[[3,32],[[72,[32]]]],[36,[[0,[[27,[],[[24,[1]]]]]]]],[3,[[0,[[27,[],[[24,[32]]]]]]]],[3,[[17,[2]]]],[3,[[17,[30]]]],[3,[[17,[30]]]],[3,[[17,[2]]]],[3,4],[32,[[29,[37]]]],[3,[[17,[2]]]],[3,[[17,[41]]]],[3,[[0,[[27,[],[[24,[36]]]]]]]],[32,[[17,[30]]]],[26,[[17,[30]]]],[32,[[17,[2]]]],[32,1],[36,1],[32,[[17,[64]]]],[32,[[17,[2]]]],[3,[[17,[30]]]],[32,[[17,[[72,[2]]]]]],[3,[[17,[2]]]],[32,[[17,[30]]]],[3,[[17,[2]]]],[3,12],[[3,-2],12,[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[3,12],[3,2],[26,2],[26,[[0,[[27,[],[[24,[2]]]]]]]],[3,[[17,[2]]]],[32,[[17,[43]]]],[3,[[0,[[27,[],[[24,[32]]]]]]]],[3,[[0,[[27,[],[[24,[32]]]]]]]],[32,[[72,[26]]]],[32,[[17,[82]]]],[32,[[17,[[72,[82]]]]]],[3,[[17,[82]]]],[3,83],[3,[[17,[2]]]],[3,[[17,[2]]]],[3,[[0,[[27,[],[[24,[3]]]]]]]],[3,[[0,[[27,[],[[24,[3]]]]]]]],[32,[[17,[82]]]],[32,44],[32,[[17,[[29,[7]]]]]],[32,41],[32,[[17,[7]]]],[3,[[17,[2]]]],[32,[[17,[[72,[2]]]]]],[3,[[0,[[27,[],[[24,[2]]]]]]]],[3,[[0,[[27,[],[[24,[2]]]]]]]],[32,[[17,[[72,[82]]]]]],[3,[[0,[[27,[],[[24,[82]]]]]]]],[[32,8],32],[[32,-1],32,[[31,[1]]]],[[3,-1],3,[[22,[36]]]],[[32,-2],32,[[22,[1]]],[[25,[],[[24,[-1]]]]]],[[3,-2],3,[[22,[36]]],[[25,[],[[24,[-1]]]]]],[3,8],[[37,-1],5,18],[[43,-1],5,18],[[[19,[-1]],-2],5,84,18],[[7,-1],5,18],[[44,-1],5,18],[[32,-1],32,[[31,[30]]]],[[26,-1],26,[[31,[30]]]],[[3,8],3],[[32,-1],32,[[31,[7]]]],[[3,-1],3,[[31,[30]]]],[[32,8],32],[[3,8],3],[[26,8],26],[[32,8],32],[[32,8],32],[[32,8],32],[[3,8],3],[[32,8],32],[[32,-1],32,[[22,[1]]]],[[36,-1],36,[[22,[1]]]],[[32,8],32],[[3,8],3],[[32,-1],32,[[31,[64]]]],[[3,1],-1,[]],[[3,8],3],[[3,8],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,[[19,[-1]]],[]],[-1,[[19,[41]]],[]],[33,[[19,[33]]]],[-1,[[19,[37]]],[]],[-1,[[19,[43]]],[]],[[[19,[-1]]],[[19,[-1]]],[]],[-1,[[19,[7]]],[]],[-1,[[19,[9]]],[]],[-1,[[19,[37]]],[]],[-1,[[19,[1]]],[]],[-1,[[19,[30]]],[]],[44,[[19,[44]]]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[-1,[[19,[41]]],[]],[3,8],[32,8],[3,8],[32,8],[3,8],[3,8],[3,8],[3,8],[3,8],[3,8],[3,8],[32,8],[3,8],[32,8],[32,8],[32,8],[32,8],[32,8],[3,8],[26,8],[32,8],[32,8],[32,8],[3,8],[36,8],[32,8],[3,8],[3,8],[32,8],[3,8],[32,8],[32,8],[36,8],[3,8],[3,8],[3,8],[32,8],[[32,8],32],[[32,-1],32,[[31,[7]]]],[[3,-1],3,[[31,[30]]]],[[3,-1],3,[[22,[7]]]],[[3,-1],3,[[31,[7]]]],[[3,-2],3,[[22,[7]]],[[25,[],[[24,[-1]]]]]],[[32,-1],32,[[31,[30]]]],[[3,-1],3,[[31,[7]]]],[[[77,[],[[85,[-1]]]],-3],[[61,[[77,[],[[85,[-1]]]],-3]]],[49,50,23],[49,50,23],[[87,[-1],[[86,[-2]]]],23]],[[[77,[],[[85,[-1]]]],-3],[[61,[[77,[],[[85,[-1]]]],-3]]],[49,50,23],[49,50,23],[[87,[-1],[[86,[-2]]]],23]],[[26,2,8],8],[[3,64],3],[43,64],[43,64],[[3,8],3],[[36,8],36],[[3,-1,-2],3,[[68,[2]]],[[88,[32],[[86,[32]]]]]],[[3,-1],3,[[89,[32],[[86,[32]]]]]],[[3,-1,-2],3,[[68,[2]]],[[88,[36],[[86,[36]]]]]],[[3,-1,-2],3,[[68,[2]]],[[88,[3],[[86,[3]]]]]],[[3,-1],3,[[22,[7]]]],[-1,41,77],[-1,32,[[22,[1]]]],[-1,36,[[22,[1]]]],[-1,3,[[22,[7]]]],[-1,26,[[22,[7]]]],[-1,43,[[22,[43]]]],[[],30],[[],45],[[],46],[[],47],[[],[[48,[-1]]],[16,23,49,50]],[-1,51,[[22,[51]]]],[[],[[52,[-1]]],[[54,[53]],23,49,50]],[[],[[55,[-1]]],[[54,[56]]]],[[],57],[[],58],[[],59],[[],60],[[3,-1],3,[[31,[64]]]],[[3,-1],3,[[31,[7]]]],[[32,8],32],[[3,8],3],[[3,8],3],[[32,-1],32,[[31,[43]]]],[[],41],[[3,-1],3,[[31,[30]]]],[[3,-1],3,[[31,[30]]]],[[32,-1],32,[[31,[1]]]],[[32,-2],32,[[22,[1]]],[[25,[],[[24,[-1]]]]]],[[[77,[],[[85,[-1]]]],3,[17,[32]],21],[[15,[-1,14]]],[49,50,23]],[[[77,[],[[85,[-1]]]],3,[17,[32]],21],[[15,[-1,14]]],[49,50,23]],[[45,3,[17,[32]],21],[[15,[-1,14]]],[]],[[46,3,[17,[32]],21],[[15,[-1,14]]],[]],[[47,3,[17,[32]],21],[[15,[-1,14]]],[]],[[51,3,[17,[32]],21],[[15,[9,14]]]],[[[61,[-1,-3]],3,[17,[32]],21],[[15,[-4,14]]],77,[49,50,23],[[87,[],[[86,[-2]]]],23,49,50],[]],[[[77,[],[[85,[-1]]]],3,[17,[32]],21,90],[[15,[-1,14]]],[49,50,23]],[[[77,[],[[85,[-1]]]],3,[17,[32]],21,90],[[15,[-1,14]]],[49,50,23]],[[[77,[],[[85,[-1]]]],3,[17,[32]],38],[[15,[-1,14]]],[49,50,23]],[[45,3,[17,[32]],38],[[15,[-1,14]]],[]],[[46,3,[17,[32]],38],[[15,[-1,14]]],[]],[[47,3,[17,[32]],38],[[15,[-1,14]]],[]],[[[48,[-1]],3,[17,[32]],38],[[15,[-2,14]]],[16,23,49,50],[]],[[51,3,[17,[32]],38],[[15,[-1,14]]],[]],[[[52,[-1]],3,[17,[32]],38],[[15,[-2,14]]],[[54,[53]],23,49,50],[]],[[[55,[-1]],3,[17,[32]],38],[[15,[-2,14]]],[[54,[56]],23,49,50],[]],[[57,3,[17,[32]],38],[[15,[-1,14]]],[]],[[58,3,[17,[32]],38],[[15,[-1,14]]],[]],[[59,3,[17,[32]],38],[[15,[-1,14]]],[]],[[60,3,[17,[32]],38],[[15,[-1,14]]],[]],[[[61,[-1,-3]],3,[17,[32]],38],[[15,[-4,14]]],77,[49,50,23],[[87,[],[[86,[-2]]]],23,49,50],[]],[[[62,[-1,-4]],3,[17,[32]],38],[[15,[-5,14]]],77,[49,50,23],[[22,[[92,[91]]]]],[[87,[],[[86,[[15,[-2,-3]]]]]],23,49,50],[]],[[34,3,[17,[32]],38],[[15,[-1,14]]],[]],[[[77,[],[[85,[-1]]]],3,[17,[32]],38,90],[[15,[-1,14]]],[49,50,23]],[[[77,[],[[85,[-1]]]],3,[17,[32]],38,90],[[15,[-1,14]]],[49,50,23]],[[34,3,[17,[32]],38,90],[[15,[-1,14]]],[]],[[32,32],[[17,[6]]]],[[37,37],[[17,[6]]]],[[[19,[-1]],[19,[-1]]],[[17,[6]]],93],[[7,7],[[17,[6]]]],[[30,30],[[17,[6]]]],[[],41],[41,[[17,[[92,[27]]]]]],[[[77,[],[[85,[-1]]]]],[[17,[[92,[27]]]]],[49,50,23]],[[[77,[],[[85,[-1]]]]],[[17,[[92,[27]]]]],[49,50,23]],[[[48,[-1]]],[[17,[[92,[27]]]]],[16,23,49,50]],[51,[[17,[[92,[27]]]]]],[57,[[17,[[92,[27]]]]]],[58,[[17,[[92,[27]]]]]],[59,[[17,[[92,[27]]]]]],[[[61,[-1,-3]]],[[17,[[92,[27]]]]],77,[49,50,23],[[87,[],[[86,[-2]]]],23,49,50]],[[[62,[-1,-4]]],[[17,[[92,[27]]]]],77,[49,50,23],[[22,[[92,[91]]]]],[[87,[],[[86,[[15,[-2,-3]]]]]],23,49,50]],[3,[[94,[5]]]],[3,[[94,[5]]]],[[3,8],3],[[[52,[-1]],-2],[[52,[-1]]],[[54,[53]],23,49,50],[[81,[53]]]],[[[55,[-1]],-2],[[55,[-1]]],[[54,[56]]],[[81,[56]]]],[[32,8],32],[3,30],[3,30],[3,9],[3,30],[3,9],[[32,8],32],[[32,8],32],[[36,8],36],[[32,-1,-2],32,[[22,[1]]],[[22,[37]]]],[[32,-3],32,[[22,[1]]],[[22,[37]]],[[25,[],[[24,[[5,[-1,-2]]]]]]]],[[32,-3],32,[[22,[1]]],[[22,[37]]],[[25,[],[[24,[[5,[-1,-2]]]]]]]],[[32,-1],32,[[31,[1]]]],[[32,-2],32,[[22,[1]]],[[25,[],[[24,[-1]]]]]],[[32,-2],32,[[22,[1]]],[[25,[],[[24,[-1]]]]]],[[32,-1],32,[[31,[1]]]],[[36,-1],36,[[31,[1]]]],[[36,-2],36,[[22,[1]]],[[25,[],[[24,[-1]]]]]],[[32,-1,-2],32,[[22,[42]]],[[22,[1]]]],[[32,-3],32,[[22,[42]]],[[22,[1]]],[[25,[],[[24,[[5,[-1,-2]]]]]]]],[[3,-1],5,[[22,[9]]]],[[32,-1],32,[[31,[82]]]],[[32,-1],32,[[31,[82]]]],[[32,-1],32,[[25,[],[[24,[82]]]]]],[[3,-1],3,[[31,[82]]]],[[3,-1],3,[[31,[82]]]],[[3,-1],3,[[25,[],[[24,[82]]]]]],[43,[[65,[64]]]],[[],41],[[3,83],3],0,[[3,-1],3,[[22,[3]]]],[[3,-1],3,[[31,[7]]]],[[3,8],3],[[3,8],3],[[3,8],3],[[3,-1],3,[[31,[7]]]],[[3,-2],3,[[22,[3]]],[[25,[],[[24,[-1]]]]]],[-1,34,[[22,[30]]]],[-1,34,[[22,[7]]]],[33,8],[43,8],[[3,64],3],[37,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[32,8],32],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[3,[[95,[12]]]],[[3,-2],[[95,[12]]],[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[[3,-2],[[95,[12]]],[[22,[21]],23],[[25,[],[[24,[-1]]]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[77,[],[[85,[-1]]]],-4],[[62,[[77,[],[[85,[-1]]]],-4]]],[49,50,23],[49,50,23],[[22,[[92,[91]]]]],[[87,[-1],[[86,[[15,[-2,-3]]]]]],23,49,50]],[[[77,[],[[85,[-1]]]],-4],[[62,[[77,[],[[85,[-1]]]],-4]]],[49,50,23],[49,50,23],[[22,[[92,[91]]]]],[[87,[-1],[[86,[[15,[-2,-3]]]]]],23,49,50]],[-1,28,[]],0,[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[32,-1],32,[[31,[82]]]],[[32,-1],32,[[31,[44]]]],[[32,-1],32,[[31,[7]]]],[[32,-2],32,[[22,[7]]],[[25,[],[[24,[-1]]]]]],[[],-1,[]],[[32,-1],32,[[31,[41]]]],[[32,-1],32,[[31,[7]]]],[[3,-1],3,[[31,[7]]]],[[32,-1],32,[[31,[7]]]],[[3,-1],3,[[31,[7]]]],[[32,-2],32,[[22,[7]]],[[25,[],[[24,[-1]]]]]],[[3,-2],3,[[22,[7]]],[[25,[],[[24,[-1]]]]]],[[3,-1],3,[[31,[7]]]],[[3,-2],3,[[22,[7]]],[[25,[],[[24,[-1]]]]]],[[32,-1],32,[[31,[82]]]],[[32,-1],32,[[25,[],[[24,[82]]]]]],[[3,-1],3,[[31,[82]]]],[[3,-1],3,[[25,[],[[24,[82]]]]]],[[30,82],[[15,[5,69]]]],[[30,2],[[15,[5,69]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[96,40],[[97,[17,[98]]],97],[[99,99],99],[[97,99],97],[[99,99],5],[[97,99],5],[97,97],[97,97],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[100,8],100],[99,99],[98,98],[100,100],[101,101],[96,96],[99,99],[102,102],[103,103],[97,97],[83,83],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[98,98],6],[[100,100],6],[[101,101],6],[[96,96],6],[[99,99],6],[[103,103],6],[[97,97],6],[[99,99],8],[[],99],[[],103],[[],97],[[],83],[[],83],[97,97],[[97,99],97],[[98,98],8],[[100,100],8],[[101,101],8],[[96,96],8],[[99,99],8],[[102,102],8],[[103,103],8],[[97,97],8],[[97,99],8],[[83,97],83],[[97,[17,[98]]],97],[[98,10],[[15,[5,69]]]],[[100,10],[[15,[5,69]]]],[[101,10],[[15,[5,69]]]],[[96,10],[[15,[5,69]]]],[[99,10],[[15,[5,69]]]],[[102,10],[[15,[5,69]]]],[[103,10],[[15,[5,69]]]],[[97,10],[[15,[5,69]]]],[[83,10],11],[101,98],[-1,-1,[]],[100,98],[40,98],[[[5,[40,40,40]]],98],[96,98],[-1,-1,[]],[40,101],[100,101],[-1,-1,[]],[-1,-1,[]],[[[5,[40,40,40]]],96],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[99,97],[-1,-1,[]],[100,101],[96,40],[97,[[17,[98]]]],[97,99],[83,97],[97,[[17,[98]]]],[83,97],[83,97],[83,97],[83,97],[97,[[17,[98]]]],[83,97],[83,97],[[98,-1],5,18],[[100,-1],5,18],[[101,-1],5,18],[[96,-1],5,18],[[99,-1],5,18],[[103,-1],5,18],[[97,-1],5,18],[[83,97],83],[97,97],[101,40],[[99,99],99],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[101,[[17,[100]]]],[-1,-2,[],[]],[[83,97],83],[97,97],[100,8],[99,8],[97,8],[97,97],[99,102],[[83,97],83],[[],99],[[],97],[102,17],[[98,-1],97,[[22,[98]]]],[[100,-1],97,[[22,[98]]]],[[101,-1],97,[[22,[98]]]],[[96,-1],97,[[22,[98]]]],[98,97],[100,97],[101,97],[96,97],[[98,98],[[17,[6]]]],[[100,100],[[17,[6]]]],[[101,101],[[17,[6]]]],[[96,96],[[17,[6]]]],[[99,99],[[17,[6]]]],[[103,103],[[17,[6]]]],[[97,97],[[17,[6]]]],[[83,97],83],[[],83],[96,40],[[99,99],99],[99,[[0,[35,104,23]]]],[103,[[0,[35,104,23]]]],[97,[[0,[35,104,23]]]],[98,[[0,[35,104,23]]]],[100,[[0,[35,104,23]]]],[101,[[0,[35,104,23]]]],[96,[[0,[35,104,23]]]],[98,[[0,[35,104,23]]]],[100,[[0,[35,104,23]]]],[101,[[0,[35,104,23]]]],[96,[[0,[35,104,23]]]],[97,[[0,[35,104,23]]]],[[99,99,8],99],[97,97],[[],83],[[99,99],99],[[97,99],97],[[99,99],5],[[97,99],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[97,97],[[97,[17,[98]]],97],[[83,97],83],[[83,97],83],[[97,105],[[15,[5,106]]]],[[97,105],[[15,[5,106]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[107,[-1]]],[[107,[-2]]],108,108],[109,[[17,[2]]]],[67,[[17,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[109,109],[110,110],[67,67],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[107,[-1]]],[[0,[[27,[],[[24,[[5,[109,110]]]]]]]]],108],[[109,109],8],[[110,110],8],[[67,67],8],[[[107,[-1]]],80,108],[[[107,[-1]]],111,108],[[[107,[-1]],10],[[95,[5,69]]],108],[[[107,[-1]],10],11,108],[[109,10],11],[[109,10],11],[[110,10],11],[[110,10],11],[[67,10],11],[[67,10],11],[[[107,[-1]],3],[[107,[-1]]],108],[[[107,[108]]],30],[[[107,[112]]],30],[[[107,[113]]],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[106,[[107,[-1]]],108],[69,[[107,[-1]]],108],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[107,[-1]],109],[[17,[110]]],108],[[109,-1],5,18],[[67,-1],5,18],[[[107,[-1]],109,110],[[17,[110]]],108],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[107,[-1]]],67,108],[67,[[107,[-1]]],108],[[[107,[-1]]],[[94,[5]]],108],[[67,-1],[[107,[-2]]],35,108],[[[107,[-1]]],30,108],[[[107,[-1]]],[[17,[91]]],108],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[[107,[-1]]],8,108],[[[107,[-1]],3],[[107,[-1]]],108],0,0,0,0,0,0,0,0,0,0,0,0,0,[12,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[114,114],[12,12],[115,115],[[[116,[-1]]],[[116,[-1]]],23],[[[117,[-1]]],[[117,[-1]]],23],[118,118],[119,119],[90,90],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[90,90],6],[[12,2],8],[[],12],[[],[[116,[-1]]],[]],[[],[[117,[-1]]],[]],[[],118],[[],119],[[12,12],8],[[90,90],8],[[114,10],11],[[114,10],11],[[12,10],11],[[115,10],11],[[[116,[-1]],10],11,70],[[[117,[-1]],10],11,70],[[118,10],11],[[119,10],11],[[90,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[12,2],40],[[12,2],8],[[12,2],[[17,[[117,[-1]]]]],[120,23,49,50]],[[12,2],[[17,[[0,[-1]]]]],[120,23,49,50]],[[12,2],[[17,[-1]]],[120,23,49,50]],[[12,2],[[17,[118]]]],[[12,2],[[17,[0]]]],[12,115],[[12,2],[[17,[64]]]],[[12,2],[[17,[119]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[115,[[17,[1]]]],[[[116,[-1]]],[[17,[-2]]],[],[]],[[[117,[-1]]],[[17,[-2]]],[],[]],[118,[[17,[38]]]],[119,[[17,[64]]]],[115,[[17,[1]]]],[[[116,[-1]]],[[17,[-2]]],[],[]],[[[117,[-1]]],[[17,[-2]]],[],[]],[118,[[17,[38]]]],[119,[[17,[64]]]],[[90,90],[[17,[6]]]],[[12,2],[[17,[[116,[-1]]]]],[120,23,49,50]],[[12,2],[[17,[[0,[-1]]]]],[120,23,49,50]],[[12,2],[[17,[-1]]],[120,23,49,50]],[12,[[17,[[5,[9,12]]]]]],[115,[[5,[64,[17,[64]]]]]],[[[116,[-1]]],[[5,[64,[17,[64]]]]],[]],[[[117,[-1]]],[[5,[64,[17,[64]]]]],[]],[118,[[5,[64,[17,[64]]]]]],[119,[[5,[64,[17,[64]]]]]],[12,[[17,[[5,[2,12]]]]]],[[12,2],[[17,[12]]]],[12,[[17,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[12,2],[[15,[8,114]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[12,2],[[15,[[17,[[117,[-1]]]],114]]],[120,23,49,50]],[[12,2],[[15,[[17,[[0,[-1]]]],114]]],[120,23,49,50]],[[12,2],[[15,[[17,[-1]],114]]],[120,23,49,50]],[[12,2],[[15,[[17,[118]],114]]]],[[12,2],[[15,[[17,[0]],114]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[12,2],[[15,[[17,[[116,[-1]]]],114]]],[120,23,49,50]],[[12,2],[[15,[[17,[[0,[-1]]]],114]]],[120,23,49,50]],[[12,2],[[15,[[17,[-1]],114]]],[120,23,49,50]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[12,2],[[17,[90]]]],0,0],"c":[],"p":[[5,"Id",0],[1,"str"],[5,"Command",107],[6,"ColorChoice",0],[1,"tuple"],[6,"Ordering",1534],[5,"Str",107],[1,"bool"],[5,"String",1535],[5,"Formatter",1536],[8,"Result",1536],[5,"ArgMatches",1371],[10,"FromArgMatches",0],[8,"Error",0],[6,"Result",1537],[10,"ValueEnum",0],[6,"Option",1538],[10,"Hasher",1539],[6,"Resettable",107],[10,"Parser",0],[5,"OsString",1540],[10,"Into",1541],[10,"Clone",1542],[17,"Item"],[10,"IntoIterator",1543],[5,"PossibleValue",107],[10,"Iterator",1544],[5,"TypeId",1545],[1,"slice"],[5,"StyledStr",107],[10,"IntoResettable",107],[5,"Arg",107],[6,"ArgAction",107],[5,"UnknownArgumentValueParser",107],[10,"Display",1536],[5,"ArgGroup",107],[5,"OsStr",107],[5,"OsStr",1540],[5,"Path",1546],[1,"u8"],[5,"ValueParser",107],[6,"ArgPredicate",107],[5,"ValueRange",107],[6,"ValueHint",107],[5,"StringValueParser",107],[5,"OsStringValueParser",107],[5,"PathBufValueParser",107],[5,"EnumValueParser",107],[10,"Send",1547],[10,"Sync",1547],[5,"PossibleValuesParser",107],[5,"RangedI64ValueParser",107],[1,"i64"],[10,"TryFrom",1541],[5,"RangedU64ValueParser",107],[1,"u64"],[5,"BoolValueParser",107],[5,"FalseyValueParser",107],[5,"BoolishValueParser",107],[5,"NonEmptyStringValueParser",107],[5,"MapValueParser",107],[5,"TryMapValueParser",107],[10,"Ord",1534],[1,"usize"],[6,"Bound",1548],[10,"PartialEq",1534],[6,"ErrorKind",1229],[10,"AsRef",1541],[5,"Error",1536],[10,"Debug",1536],[5,"RangeTo",1548],[5,"Vec",1549],[1,"array"],[5,"RangeFrom",1548],[5,"Range",1548],[5,"RangeToInclusive",1548],[10,"TypedValueParser",107],[5,"RangeInclusive",1548],[5,"RangeFull",1548],[1,"never"],[10,"RangeBounds",1548],[1,"char"],[5,"Styles",964],[10,"Hash",1539],[17,"Value"],[17,"Output"],[10,"Fn",1550],[10,"FnOnce",1550],[10,"FnMut",1550],[6,"ValueSource",1371],[10,"Error",1551],[5,"Box",1552],[10,"PartialOrd",1534],[8,"Result",1553],[8,"Result",1229],[5,"RgbColor",964],[5,"Style",964],[6,"Color",964],[5,"Effects",964],[6,"AnsiColor",964],[5,"Ansi256Color",964],[5,"EffectIter",964],[5,"Reset",964],[10,"Copy",1547],[10,"Write",1554],[5,"Error",1553],[5,"Error",1229],[10,"ErrorFormatter",1229],[6,"ContextKind",1229],[6,"ContextValue",1229],[1,"i32"],[5,"KindFormatter",1229],[5,"RichFormatter",1229],[6,"MatchesError",1371],[5,"IdsRef",1371],[5,"Values",1371],[5,"ValuesRef",1371],[5,"RawValues",1371],[5,"Indices",1371],[10,"Any",1545],[10,"Args",0],[10,"Subcommand",0],[10,"CommandFactory",0],[10,"ValueParserFactory",107],[15,"Downcast",1532]],"b":[[41,"impl-PartialEq%3CStr%3E-for-Id"],[42,"impl-PartialEq%3C%26str%3E-for-Id"],[43,"impl-PartialEq%3Cstr%3E-for-Id"],[44,"impl-PartialEq%3CString%3E-for-Id"],[45,"impl-PartialEq-for-Id"],[48,"impl-Debug-for-Id"],[49,"impl-Display-for-Id"],[50,"impl-Display-for-ColorChoice"],[51,"impl-Debug-for-ColorChoice"],[52,"impl-From%3C%26Str%3E-for-Id"],[53,"impl-From%3CStr%3E-for-Id"],[54,"impl-From%3C%26Id%3E-for-Id"],[56,"impl-From%3C%26str%3E-for-Id"],[57,"impl-From%3C%26%26str%3E-for-Id"],[194,"impl-AsRef%3CPath%3E-for-OsStr"],[195,"impl-AsRef%3COsStr%3E-for-OsStr"],[196,"impl-AsRef%3CPath%3E-for-Str"],[197,"impl-AsRef%3C%5Bu8%5D%3E-for-Str"],[198,"impl-AsRef%3Cstr%3E-for-Str"],[199,"impl-AsRef%3COsStr%3E-for-Str"],[335,"impl-Default-for-StyledStr"],[336,"impl-Default-for-%26StyledStr"],[371,"impl-PartialEq%3COsString%3E-for-OsStr"],[372,"impl-PartialEq%3Cstr%3E-for-OsStr"],[373,"impl-PartialEq-for-OsStr"],[374,"impl-PartialEq%3C%26str%3E-for-OsStr"],[375,"impl-PartialEq%3C%26OsStr%3E-for-OsStr"],[376,"impl-PartialEq%3CString%3E-for-OsStr"],[380,"impl-PartialEq%3C%26OsStr%3E-for-Str"],[381,"impl-PartialEq%3Cstr%3E-for-Str"],[382,"impl-PartialEq%3CId%3E-for-Str"],[383,"impl-PartialEq%3COsStr%3E-for-Str"],[384,"impl-PartialEq%3CString%3E-for-Str"],[385,"impl-PartialEq-for-Str"],[386,"impl-PartialEq%3C%26str%3E-for-Str"],[397,"impl-Display-for-Arg"],[398,"impl-Debug-for-Arg"],[401,"impl-Debug-for-Command"],[402,"impl-Display-for-Command"],[405,"impl-Debug-for-ValueRange"],[406,"impl-Display-for-ValueRange"],[408,"impl-Debug-for-Str"],[409,"impl-Display-for-Str"],[410,"impl-Display-for-StyledStr"],[411,"impl-Debug-for-StyledStr"],[427,"impl-From%3CRangeTo%3Ci64%3E%3E-for-ValueParser"],[428,"impl-From%3CVec%3CP%3E%3E-for-ValueParser"],[429,"impl-From%3C%5BP;+C%5D%3E-for-ValueParser"],[430,"impl-From%3CRangeFrom%3Ci64%3E%3E-for-ValueParser"],[431,"impl-From%3CRange%3Ci64%3E%3E-for-ValueParser"],[432,"impl-From%3CRangeToInclusive%3Ci64%3E%3E-for-ValueParser"],[433,"impl-From%3CP%3E-for-ValueParser"],[435,"impl-From%3CRangeInclusive%3Ci64%3E%3E-for-ValueParser"],[436,"impl-From%3CRangeFull%3E-for-ValueParser"],[446,"impl-From%3C%26str%3E-for-OsStr"],[447,"impl-From%3C%26OsStr%3E-for-OsStr"],[449,"impl-From%3CStr%3E-for-OsStr"],[450,"impl-From%3C%26OsStr%3E-for-OsStr"],[451,"impl-From%3C%26%26OsStr%3E-for-OsStr"],[452,"impl-From%3C%26%26str%3E-for-OsStr"],[453,"impl-From%3C%26Str%3E-for-OsStr"],[456,"impl-From%3CRangeFull%3E-for-ValueRange"],[457,"impl-From%3Cusize%3E-for-ValueRange"],[459,"impl-From%3CRangeToInclusive%3Cusize%3E%3E-for-ValueRange"],[460,"impl-From%3CRangeTo%3Cusize%3E%3E-for-ValueRange"],[461,"impl-From%3CRangeFrom%3Cusize%3E%3E-for-ValueRange"],[462,"impl-From%3CRange%3Cusize%3E%3E-for-ValueRange"],[463,"impl-From%3CRangeInclusive%3Cusize%3E%3E-for-ValueRange"],[465,"impl-From%3COption%3CT%3E%3E-for-Resettable%3CT%3E"],[466,"impl-From%3CT%3E-for-Resettable%3CT%3E"],[468,"impl-From%3C%26Str%3E-for-Str"],[469,"impl-From%3CId%3E-for-Str"],[471,"impl-From%3C%26str%3E-for-Str"],[472,"impl-From%3C%26%26str%3E-for-Str"],[473,"impl-From%3C%26String%3E-for-StyledStr"],[474,"impl-From%3C%26str%3E-for-StyledStr"],[476,"impl-From%3CString%3E-for-StyledStr"],[477,"impl-From%3C%26%26str%3E-for-StyledStr"],[1061,"impl-Default-for-%26Styles"],[1062,"impl-Default-for-Styles"],[1072,"impl-PartialEq-for-Style"],[1073,"impl-PartialEq%3CEffects%3E-for-Style"],[1085,"impl-From%3CAnsi256Color%3E-for-Color"],[1087,"impl-From%3CAnsiColor%3E-for-Color"],[1088,"impl-From%3Cu8%3E-for-Color"],[1089,"impl-From%3C(u8,+u8,+u8)%3E-for-Color"],[1090,"impl-From%3CRgbColor%3E-for-Color"],[1092,"impl-From%3Cu8%3E-for-Ansi256Color"],[1093,"impl-From%3CAnsiColor%3E-for-Ansi256Color"],[1308,"impl-Debug-for-Error%3CF%3E"],[1309,"impl-Display-for-Error%3CF%3E"],[1310,"impl-Display-for-ContextKind"],[1311,"impl-Debug-for-ContextKind"],[1312,"impl-Debug-for-ContextValue"],[1313,"impl-Display-for-ContextValue"],[1314,"impl-Display-for-ErrorKind"],[1315,"impl-Debug-for-ErrorKind"],[1323,"impl-From%3CError%3E-for-Error%3CF%3E"],[1324,"impl-From%3CError%3E-for-Error%3CF%3E"],[1426,"impl-Display-for-MatchesError"],[1427,"impl-Debug-for-MatchesError"]]},\
"clap_derive":{"doc":"clap_derive","t":"YYYY","n":["Args","Parser","Subcommand","ValueEnum"],"q":[[0,"clap_derive"]],"d":["Generates the <code>Args</code> impl.","Generates the <code>Parser</code> implementation.","Generates the <code>Subcommand</code> impl.","Generates the <code>ValueEnum</code> impl."],"i":[0,0,0,0],"f":[0,0,0,0],"c":[],"p":[],"b":[]},\
"clap_lex":{"doc":"Minimal, flexible command-line parser","t":"FPPKFFGFPNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMNNNNNNNNNNNNNNNNNNNMNNNNN","n":["ArgCursor","Current","End","OsStrExt","ParsedArg","RawArgs","SeekFrom","ShortFlags","Start","advance_by","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains","cursor","default","display","eq","eq","eq","eq","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_args","hash","insert","into","into","into","into","into","into_iter","is_empty","is_empty","is_end","is_escape","is_long","is_negative_number","is_negative_number","is_short","is_stdio","new","next","next","next_flag","next_os","next_value_os","partial_cmp","partial_cmp","peek","peek_os","remaining","seek","split","split_once","starts_with","strip_prefix","to_long","to_owned","to_owned","to_owned","to_owned","to_owned","to_short","to_value","to_value_os","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_str","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"clap_lex"],[111,"core::result"],[112,"core::cmp"],[113,"core::fmt"],[114,"core::option"],[115,"core::fmt"],[116,"core::convert"],[117,"core::iter::traits::iterator"],[118,"core::hash"],[119,"core::iter::traits::collect"],[120,"std::ffi::os_str"],[121,"core::any"]],"d":["Position within <code>RawArgs</code>","Sets the offset to the current position plus the specified …","Sets the offset to the size of this object plus the …","","Command-line Argument","Command-line arguments","Enumeration of possible methods to seek within an I/O …","Walk through short flags within a <code>ParsedArg</code>","Sets the offset to the provided number of bytes.","Move the iterator forward by <code>n</code> short flags","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the given pattern matches a sub-slice of …","Create a cursor for walking the arguments","","Safely print an argument that may contain non-UTF8 content","","","","","Returns the byte index of the first character of this …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","<strong>NOTE:</strong> The argument returned will be the current binary.","","Inject arguments before the <code>RawArgs::next</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Argument is length of 0","No short flags left","Any remaining args?","Does the argument look like an argument escape (<code>--</code>)","Can treat as a long-flag","Does the argument look like a negative number?","Does the short flag look like a number","Can treat as a short-flag","Does the argument look like a stdio argument (<code>-</code>)","Example","Advance the cursor, returning the next <code>ParsedArg</code>","","Advance the iterator, returning the next short flag on …","Advance the cursor, returning a raw argument value.","Advance the iterator, returning everything left as a value","","","Return the next <code>ParsedArg</code>","Return a raw argument value.","Return all remaining raw arguments, advancing the cursor …","Adjust the cursor’s position","An iterator over substrings of this string slice, …","Splits the string on the first occurrence of the specified …","Returns <code>true</code> if the given pattern matches a prefix of this …","Returns a string slice with the prefix removed.","Treat as a long-flag","","","","","","Treat as a short-flag","Treat as a value","Treat as a value","","","","","","","","","","","Converts to a string slice.","","","","",""],"i":[0,8,8,0,0,0,0,0,8,1,5,6,7,1,8,5,6,7,1,8,5,6,7,1,8,5,6,7,1,8,6,7,10,5,5,7,5,6,7,8,10,5,6,7,1,8,5,5,6,7,1,8,5,7,5,5,6,7,1,8,1,7,1,5,7,7,7,1,7,7,5,5,1,1,5,1,6,7,5,5,5,5,10,10,10,10,7,5,6,7,1,8,7,7,7,5,6,7,1,8,5,6,7,1,8,10,5,6,7,1,8],"f":[0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3,2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[6,6],[7,7],[1,1],[8,8],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[6,6],9],[[7,7],9],[[10,11],12],[5,6],[[],5],[7,[[0,[13]]]],[[5,5],12],[[6,6],12],[[7,7],12],[[8,8],12],[[10,11],[[14,[2]]]],[[5,15],16],[[6,15],16],[[7,15],16],[[1,15],16],[[8,15],[[4,[3,17]]]],[-1,-1,[]],[-2,5,[[19,[18]]],[[21,[],[[20,[-1]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[7,-1],3,22],[[5,6,-2],3,[[19,[18]]],[[23,[],[[20,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,12],[1,12],[[5,6],12],[7,12],[7,12],[7,12],[1,12],[7,12],[7,12],[-2,5,[[19,[18]]],[[23,[],[[20,[-1]]]]]],[[5,6],[[14,[7]]]],[1,[[14,[-1]]],[]],[1,[[14,[[4,[24,25]]]]]],[[5,6],[[14,[25]]]],[1,[[14,[25]]]],[[6,6],[[14,[9]]]],[[7,7],[[14,[9]]]],[[5,6],[[14,[7]]]],[[5,6],[[14,[25]]]],[[5,6],[[0,[[21,[],[[20,[25]]]]]]]],[[5,6,8],3],0,[[10,11],[[14,[[3,[25,25]]]]]],[[10,11],12],[[10,11],[[14,[25]]]],[7,[[14,[[3,[[4,[11,25]],[14,[25]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,[[14,[1]]]],[7,[[4,[11,25]]]],[7,25],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[10,[[4,[11,26]]]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]]],"c":[],"p":[[5,"ShortFlags",0],[1,"usize"],[1,"tuple"],[6,"Result",111],[5,"RawArgs",0],[5,"ArgCursor",0],[5,"ParsedArg",0],[6,"SeekFrom",0],[6,"Ordering",112],[10,"OsStrExt",0],[1,"str"],[1,"bool"],[10,"Display",113],[6,"Option",114],[5,"Formatter",113],[8,"Result",113],[5,"Error",113],[5,"OsString",115],[10,"Into",116],[17,"Item"],[10,"Iterator",117],[10,"Hasher",118],[10,"IntoIterator",119],[1,"char"],[5,"OsStr",115],[5,"Utf8Error",120],[5,"TypeId",121]],"b":[]},\
"colorchoice":{"doc":"Global override of color control","t":"PPPGPNNNNNNNNNNNNN","n":["Always","AlwaysAnsi","Auto","ColorChoice","Never","borrow","borrow_mut","clone","default","eq","fmt","from","global","into","try_from","try_into","type_id","write_global"],"q":[[0,"colorchoice"],[18,"core::fmt"],[19,"core::fmt"],[20,"core::any"]],"d":["","","","Selection for overriding color output","","","","","","","","Returns the argument unchanged.","Get the current <code>ColorChoice</code> state","Calls <code>U::from(self)</code>.","","","","Override the detected <code>ColorChoice</code>"],"i":[1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,1],2],[[1,3],4],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[1,7]],"c":[],"p":[[6,"ColorChoice",0],[1,"bool"],[5,"Formatter",18],[8,"Result",18],[6,"Result",19],[5,"TypeId",20],[1,"tuple"]],"b":[]},\
"console":{"doc":"console is a library for Rust that provides access to …","t":"GPFPPPPGPPPPPPPPPGPPPPPFPPPPPPPPPGPPPPPPPPPPPFFPFGFGPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNHHNNNNNNNNHHNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNN","n":["Alignment","Alt","AnsiCodeIterator","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","Attribute","BackTab","Backspace","Black","Blink","BlinkFast","Blue","Bold","Center","Char","Color","Color256","Cyan","Del","Dim","Dummy","Emoji","End","Enter","Escape","File","Green","Hidden","Home","Insert","Italic","Key","Left","Magenta","PageDown","PageUp","Red","Reverse","Right","Shift","Stderr","Stdout","StrikeThrough","Style","StyledObject","Tab","Term","TermFamily","TermFeatures","TermTarget","Underlined","UnixTerm","Unknown","UnknownEscSeq","White","WindowsConsole","Yellow","apply_to","as_raw_handle","attr","attr","bg","bg","black","black","blink","blink","blink_fast","blink_fast","blue","blue","bold","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","bright","buffered_stderr","buffered_stdout","clear_chars","clear_last_lines","clear_line","clear_screen","clear_to_end_of_screen","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color256","color256","colors_enabled","colors_enabled_stderr","colors_supported","current_slice","cyan","cyan","default","dim","dim","eq","eq","eq","eq","eq","eq","family","features","fg","fg","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_stderr","for_stderr","for_stdout","for_stdout","force_styling","force_styling","from","from","from","from","from","from","from","from","from","from","from","from","from_dotted_str","green","green","hash","hidden","hidden","hide_cursor","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_attended","is_msys_tty","is_term","italic","italic","magenta","magenta","measure_text_width","move_cursor_down","move_cursor_left","move_cursor_right","move_cursor_to","move_cursor_up","new","new","new","next","on_black","on_black","on_blue","on_blue","on_bright","on_bright","on_color256","on_color256","on_cyan","on_cyan","on_green","on_green","on_magenta","on_magenta","on_red","on_red","on_white","on_white","on_yellow","on_yellow","pad_str","pad_str_with","partial_cmp","read","read","read_char","read_key","read_line","read_line_initial_text","read_secure_line","red","red","rest_slice","reverse","reverse","set_colors_enabled","set_colors_enabled_stderr","set_title","show_cursor","size","size_checked","stderr","stdout","strikethrough","strikethrough","strip_ansi_codes","style","style","target","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_units","to_utf16chars","to_utf8chars","truncate_str","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underlined","underlined","user_attended","user_attended_stderr","wants_emoji","white","white","write","write","write_line","yellow","yellow"],"q":[[0,"console"],[344,"std::os::windows::io::raw"],[345,"std::io::error"],[346,"core::clone"],[347,"core::cmp"],[348,"core::fmt"],[349,"core::fmt"],[350,"core::option"],[351,"alloc::borrow"],[352,"alloc::string"],[353,"encode_unicode::utf8_iterators"],[354,"encode_unicode::utf16_iterators"],[355,"encode_unicode::decoding_iterators"],[356,"encode_unicode::decoding_iterators"],[357,"core::any"]],"d":["Defines the alignment for padding operations.","","An iterator over ansi codes in a string.","","","","","A terminal style attribute.","","","","","","","","","","A terminal color.","","","","","A dummy terminal (for instance on wasm)","“Intelligent” emoji formatter.","","","","Redirected to a file or file like thing.","","","","","","Key mapping","","","","","","","","","","","","A stored style that can be applied.","A formatting wrapper that can be styled for a terminal.","","Abstraction around a terminal.","The family of the terminal.","Gives access to the terminal features.","Where the term is writing.","","A standard unix terminal.","","Unrecognized sequence containing Esc and a list of chars","","A cmd.exe like windows console.","","Apply the style to something that can be displayed.","","Adds a attr.","Adds a attr.","Sets a background color.","Sets a background color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a new buffered terminal to stderr.","Return a new buffered terminal.","Clear the last <code>n</code> characters of the current line.","Clear the last <code>n</code> lines before the current line.","Clear the current line.","Clear the entire screen.","Clear everything from the current cursor position to the …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if colors should be enabled for stdout.","Returns <code>true</code> if colors should be enabled for stderr.","Check if colors are supported by this terminal.","Returns the string slice up to the current match.","","","","","","","","","","","","Return the family of the terminal.","Check for common terminal features.","Sets a foreground color.","Sets a foreground color.","","Flush internal buffers.","","","","","","","","","","","","","","","","","","","","","Specifies that style is applying to something being …","Specifies that style is applying to something being …","Specifies that style is applying to something being …","Specifies that style is applying to something being …","Forces styling on or off.","Forces styling on or off.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a style from a dotted string.","","","","","","Hide the cursor.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Check if this is a real user attended terminal (<code>isatty</code>)","Check if this terminal is an msys terminal.","Check if the terminal is indeed a terminal.","","","","","Measure the width of a string in terminal characters.","Move the cursor down by <code>n</code> lines, if possible.","Move the cursor <code>n</code> characters to the left, if possible.","Move the cursor <code>n</code> characters to the right.","Move the cursor to row <code>x</code> and column <code>y</code>. Values are 0-based.","Move the cursor up by <code>n</code> lines, if possible.","Creates a new ansi code iterator.","Returns an empty default style.","","","","","","","","","","","","","","","","","","","","","","","Pads a string to fill a certain number of characters.","Pads a string with specific padding to fill a certain …","","","","Read a single character from the terminal.","Read a single key form the terminal.","Read one line of input.","Read one line of input with initial text.","Read a line of input securely.","","","Returns the string slice from the current match to the end.","","","Forces colorization on or off for stdout.","Forces colorization on or off for stderr.","Set the terminal title.","Make the cursor visible again.","Return the terminal size in rows and columns or gets …","Return the terminal size in rows and columns.","Return a new unbuffered terminal to stderr.","Return a new unbuffered terminal.","","","Helper function to strip ansi codes.","Wraps an object for formatting for styling.","Return the style for this terminal.","Return the target of this terminal.","","","","","","","","","","","","","","","","","","Truncates a string to a certain number of characters.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A fast way to check if the application has a user attended …","A fast way to check if the application has a user attended …","Check if this terminal wants emojis.","","","","","Write a string to the terminal and add a newline.","",""],"i":[0,10,0,10,10,10,10,0,10,10,6,5,5,6,5,14,10,0,6,6,10,5,12,0,10,10,10,12,6,5,10,10,5,0,14,6,10,10,6,5,14,10,11,11,5,0,0,10,0,0,0,0,5,12,10,10,6,12,6,1,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,20,10,11,12,13,3,6,5,14,1,2,16,20,10,11,12,13,3,6,5,14,1,2,16,1,2,3,3,3,3,3,3,3,10,11,12,13,3,6,5,14,1,2,16,10,11,12,13,3,6,5,14,1,2,16,5,1,2,0,0,13,20,1,2,1,1,2,10,12,6,5,14,1,13,3,1,2,3,3,3,10,11,12,13,3,6,5,14,1,2,2,2,2,2,2,2,2,2,16,1,2,1,2,1,2,20,10,11,12,13,3,6,5,14,1,2,16,1,1,2,10,1,2,3,20,10,11,12,13,3,6,5,14,1,2,16,20,13,13,3,1,2,1,2,0,3,3,3,3,3,20,1,16,20,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,5,3,3,3,3,3,3,3,1,2,20,1,2,0,0,3,3,3,3,3,3,1,2,0,0,3,3,20,10,11,12,13,3,6,5,14,1,2,16,2,16,20,20,20,0,20,10,11,12,13,3,6,5,14,1,2,16,20,10,11,12,13,3,6,5,14,1,2,16,20,10,11,12,13,3,6,5,14,1,2,16,1,2,0,0,13,1,2,3,3,3,1,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-1],[[2,[-1]]],[]],[3,4],[[1,5],1],[[[2,[-1]],5],[[2,[-1]]],[]],[[1,6],1],[[[2,[-1]],6],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[],3],[[],3],[[3,7],[[9,[8]]]],[[3,7],[[9,[8]]]],[3,[[9,[8]]]],[3,[[9,[8]]]],[3,[[9,[8]]]],[10,10],[11,11],[12,12],[13,13],[3,3],[6,6],[5,5],[14,14],[1,1],[[[2,[-1]]],[[2,[-1]]],15],[16,16],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[5,5],17],[[1,18],1],[[[2,[-1]],18],[[2,[-1]]],[]],[[],19],[[],19],[13,19],[20,21],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[],1],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[10,10],19],[[12,12],19],[[6,6],19],[[5,5],19],[[14,14],19],[[1,1],19],[13,12],[3,13],[[1,6],1],[[[2,[-1]],6],[[2,[-1]]],[]],[3,[[9,[8]]]],[3,[[9,[8]]]],[3,[[9,[8]]]],[[10,22],23],[[11,22],23],[[12,22],23],[[13,22],23],[[3,22],23],[[6,22],23],[[5,22],23],[[14,22],23],[[1,22],23],[[[2,[-1]],22],23,24],[[[2,[-1]],22],23,25],[[[2,[-1]],22],23,26],[[[2,[-1]],22],23,27],[[[2,[-1]],22],23,28],[[[2,[-1]],22],23,29],[[[2,[-1]],22],23,30],[[[2,[-1]],22],23,31],[[[2,[-1]],22],23,32],[[16,22],23],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[1,19],1],[[[2,[-1]],19],[[2,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,1],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[10,-1],8,33],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[3,[[9,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,19],[13,19],[3,19],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[21,7],[[3,7],[[9,[8]]]],[[3,7],[[9,[8]]]],[[3,7],[[9,[8]]]],[[3,7,7],[[9,[8]]]],[[3,7],[[9,[8]]]],[21,20],[[],1],[[21,21],16],[20,[[34,[[8,[21,19]]]]]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[1,18],1],[[[2,[-1]],18],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[21,7,14,[34,[21]]],[[35,[21]]]],[[21,7,14,[34,[21]],36],[[35,[21]]]],[[5,5],[[34,[17]]]],[[3,[37,[18]]],[[9,[7]]]],[[3,[37,[18]]],[[9,[7]]]],[3,[[9,[36]]]],[3,[[9,[10]]]],[3,[[9,[38]]]],[[3,21],[[9,[38]]]],[3,[[9,[38]]]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[20,21],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[19,8],[19,8],[[3,-1],8,29],[3,[[9,[8]]]],[3,[[8,[39,39]]]],[3,[[34,[[8,[39,39]]]]]],[[],3],[[],3],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[21,[[35,[21]]]],[-1,[[2,[-1]]],[]],[3,1],[3,11],[-1,[[40,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[-1,38,[]],[-1,[[41,[-2]]],[],[]],[-1,[[42,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[[21,7,21],[[35,[21]]]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[],19],[[],19],[13,19],[1,1],[[[2,[-1]]],[[2,[-1]]],[]],[[3,[37,[18]]],[[9,[7]]]],[[3,[37,[18]]],[[9,[7]]]],[[3,21],[[9,[8]]]],[1,1],[[[2,[-1]]],[[2,[-1]]],[]]],"c":[],"p":[[5,"Style",0],[5,"StyledObject",0],[5,"Term",0],[8,"RawHandle",344],[6,"Attribute",0],[6,"Color",0],[1,"usize"],[1,"tuple"],[8,"Result",345],[6,"Key",0],[6,"TermTarget",0],[6,"TermFamily",0],[5,"TermFeatures",0],[6,"Alignment",0],[10,"Clone",346],[5,"Emoji",0],[6,"Ordering",347],[1,"u8"],[1,"bool"],[5,"AnsiCodeIterator",0],[1,"str"],[5,"Formatter",348],[8,"Result",348],[10,"Binary",348],[10,"LowerExp",348],[10,"Octal",348],[10,"UpperHex",348],[10,"LowerHex",348],[10,"Display",348],[10,"UpperExp",348],[10,"Pointer",348],[10,"Debug",348],[10,"Hasher",349],[6,"Option",350],[6,"Cow",351],[1,"char"],[1,"slice"],[5,"String",352],[1,"u16"],[5,"Utf8CharSplitter",353],[5,"Utf16CharSplitter",354],[5,"Utf16CharMerger",355],[5,"Utf8CharMerger",355],[6,"Result",356],[5,"TypeId",357]],"b":[[152,"impl-Write-for-Term"],[153,"impl-Term"],[154,"impl-Write-for-%26Term"],[164,"impl-Binary-for-StyledObject%3CD%3E"],[165,"impl-LowerExp-for-StyledObject%3CD%3E"],[166,"impl-Octal-for-StyledObject%3CD%3E"],[167,"impl-UpperHex-for-StyledObject%3CD%3E"],[168,"impl-LowerHex-for-StyledObject%3CD%3E"],[169,"impl-Display-for-StyledObject%3CD%3E"],[170,"impl-UpperExp-for-StyledObject%3CD%3E"],[171,"impl-Pointer-for-StyledObject%3CD%3E"],[172,"impl-Debug-for-StyledObject%3CD%3E"],[252,"impl-Read-for-%26Term"],[253,"impl-Read-for-Term"],[339,"impl-Write-for-%26Term"],[340,"impl-Write-for-Term"]]},\
"dialoguer":{"doc":"dialoguer is a library for Rust that helps you build …","t":"FKFFPRRGKPFKFPFKIFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNNMNFFKOONNNNONOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNOOOOOONNNNNNOOO","n":["BasicHistory","Completion","Confirm","Editor","Err","Err","Err","Error","History","IO","Input","InputValidator","MultiSelect","Ok","Password","PasswordValidator","Result","Select","Sort","allow_empty","allow_empty_password","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","completion_with","console","default","default","default","default","default","default","default","default","default","default","default","defaults","edit","executable","extension","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","history_with","interact","interact","interact","interact","interact","interact","interact_on","interact_on","interact_on","interact_on","interact_on","interact_on","interact_on_opt","interact_on_opt","interact_on_opt","interact_on_opt","interact_opt","interact_opt","interact_opt","interact_opt","interact_text","interact_text_on","into","into","into","into","into","into","into","into","into","item","item","item","item_checked","items","items","items","items_checked","max_entries","max_length","max_length","max_length","new","new","new","new","new","new","new","new","no_duplicates","read","read","report","report","report","report","report","report","require_save","show_default","show_default","source","theme","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","trim_newlines","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","validate_with","validate_with","wait_for_newline","with_confirmation","with_initial_text","with_post_completion_text","with_prompt","with_prompt","with_prompt","with_prompt","with_prompt","with_prompt","with_theme","with_theme","with_theme","with_theme","with_theme","with_theme","write","write","ColorfulTheme","SimpleTheme","Theme","active_item_prefix","active_item_style","borrow","borrow","borrow_mut","borrow_mut","checked_item_prefix","default","defaults_style","error_prefix","error_style","format_confirm_prompt","format_confirm_prompt","format_confirm_prompt_selection","format_confirm_prompt_selection","format_error","format_error","format_input_prompt","format_input_prompt","format_input_prompt_selection","format_input_prompt_selection","format_multi_select_prompt","format_multi_select_prompt_item","format_multi_select_prompt_item","format_multi_select_prompt_selection","format_multi_select_prompt_selection","format_password_prompt","format_password_prompt_selection","format_password_prompt_selection","format_prompt","format_prompt","format_select_prompt","format_select_prompt_item","format_select_prompt_item","format_select_prompt_selection","format_sort_prompt","format_sort_prompt_item","format_sort_prompt_item","format_sort_prompt_selection","from","from","hint_style","inactive_item_prefix","inactive_item_style","into","into","picked_item_prefix","prompt_prefix","prompt_style","prompt_suffix","success_prefix","success_suffix","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_item_prefix","unpicked_item_prefix","values_style"],"q":[[0,"dialoguer"],[207,"dialoguer::theme"],[271,"core::clone"],[272,"alloc::string"],[273,"core::option"],[274,"std::ffi::os_str"],[275,"core::convert"],[276,"core::fmt"],[277,"core::fmt"],[278,"alloc::string"],[279,"alloc::vec"],[280,"console::term"],[281,"core::error"],[282,"core::result"],[283,"core::any"],[284,"core::convert"]],"d":["","Trait for completion handling.","Renders a confirm prompt.","Launches the default editor to edit a string.","Contains the error value","","","Possible errors returned by prompts.","Trait for history handling.","Error while executing IO operations.","Renders an input prompt.","Trait for input validators.","Renders a multi select prompt.","Contains the success value","Renders a password input prompt.","Trait for password validators.","Result type where errors are of type Error","Renders a select prompt.","Renders a sort prompt.","Enables or disables an empty input","Allows/Disables empty password.","","","","","","","","","","","","","","","","","","","Sets the clear behavior of the menu.","Indicates whether select menu should be erased from the …","Sets the clear behavior of the menu.","","","","","","","","","","","","","Enable completion","","","","Sets a default.","","Sets a default.","","","","Sets initial selected element when select menu is rendered","","","Sets a defaults for the menu.","Launches the editor to edit a string.","Sets a specific editor executable.","Sets a specific extension","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Enable history processing","Enables user interaction and returns the result.","Enables user interaction and returns the result.","Enables user interaction and returns the result.","Enables user interaction and returns the result.","Enables user interaction and returns the result.","Enables user interaction and returns the result.","Like <code>interact</code> but allows a specific terminal to be set.","Like <code>interact</code> but allows a specific terminal to be set.","Like <code>interact</code> but allows a specific terminal to be set.","Like <code>interact</code> but allows a specific terminal to be set.","Like <code>interact</code> but allows a specific terminal to be set.","Like <code>interact</code> but allows a specific terminal to be set.","Like <code>interact_opt</code> but allows a specific terminal to be set.","Like <code>interact_opt</code> but allows a specific terminal to be set.","Like <code>interact_opt</code> but allows a specific terminal to be set.","Like <code>interact_opt</code> but allows a specific terminal to be set.","Enables user interaction and returns the result.","Enables user interaction and returns the result.","Enables user interaction and returns the result.","Enables user interaction and returns the result.","Enables the user to enter a printable ascii sequence and …","Like <code>interact_text</code> but allows a specific terminal to be …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Add a single item to the selector.","Add a single item to the selector.","Add a single item to the selector.","Add a single item to the selector with a default checked …","Adds multiple items to the selector.","Adds multiple items to the selector.","Adds multiple items to the selector.","Adds multiple items to the selector with checked state","Limit the number of entries stored in the history.","Sets an optional max length for a page","Sets an optional max length for a page.","Sets an optional max length for a page","Creates a new editor.","Creates a new basic history value which has no limit on …","Creates a confirm prompt with default theme.","Creates an input prompt with default theme.","Creates a multi select prompt with default theme.","Creates a select prompt with default theme.","Creates a sort prompt with default theme.","Creates a password input prompt with default theme.","Prevent duplicates in the history. This means that any …","This is called with the current position that should be …","","Indicates whether or not to report the chosen selection …","Indicates whether to report the input value after …","Indicates whether to report the selected values after …","Indicates whether to report the selected value after …","Indicates whether to report the selected order after …","Indicates whether to report confirmation after interaction.","Enables or disables the save requirement.","Disables or enables the default value display.","Disables or enables the default value display.","","Customizes the rendering of the elements.","","","","","","","","Enables or disables trailing newline stripping.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Invoked with the value to validate.","Invoked with the value to validate.","Registers a validator.","Registers a validator.","Sets when to react to user input.","Enables confirmation prompting.","Sets initial text that user can accept or erase.","Changes the prompt text to the post completion text after …","Sets the confirm prompt.","Sets the input prompt.","Prefaces the menu with a prompt.","Sets the select prompt.","Prefaces the menu with a prompt.","Sets the password input prompt.","Creates a confirm prompt with a specific theme.","Creates an input prompt with a specific theme.","Creates a multi select prompt with a specific theme.","Creates a select prompt with a specific theme.","Creates a sort prompt with a specific theme.","Creates a password input prompt with a specific theme.","This is called with the next value you should store in …","","A colorful theme","The default theme.","Implements a theme for dialoguer.","Active item in select prefix value and style","The style for active items","","","","","Checked item in multi select prefix value and style","","The style for default values","Error prefix value and style","The style for error message","Formats a confirm prompt.","Formats a confirm prompt.","Formats a confirm prompt after selection.","Formats a confirm prompt after selection.","Formats an error","Formats out an error.","Formats an input prompt.","Formats an input prompt.","Formats an input prompt after selection.","Formats an input prompt after selection.","Formats a multi select prompt.","Formats a multi select prompt item.","Formats a multi select prompt item.","Formats a multi select prompt after selection.","Formats a multi_select prompt after selection.","Formats a password prompt.","Formats a password prompt after selection.","Formats a password prompt after selection.","Formats a prompt.","Formats a prompt.","Formats a select prompt.","Formats a select prompt item.","Formats a select prompt item.","Formats a select prompt after selection.","Formats a sort prompt.","Formats a sort prompt item.","Formats a sort prompt item.","Formats a sort prompt after selection.","Returns the argument unchanged.","Returns the argument unchanged.","The style for hints","Inctive item in select prefix value and style","The style for inactive items","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Picked item in sort prefix value and style","Prompt prefix value and style","The style for prompt","Prompt suffix value and style","Prompt on success prefix value and style","Prompt on success suffix value and style","","","","","","","Unchecked item in multi select prefix value and style","Unpicked item in sort prefix value and style","The style for values on prompt success"],"i":[0,0,0,0,18,34,35,0,0,21,0,0,0,18,0,0,0,0,0,1,3,11,12,21,7,1,4,5,6,3,11,12,21,7,1,4,5,6,3,4,5,6,7,1,4,5,6,3,7,1,4,5,6,3,1,0,11,12,7,7,1,1,4,5,5,6,3,4,11,11,11,21,21,11,12,21,21,7,1,4,5,6,3,10,1,7,1,4,5,6,3,7,1,4,5,6,3,7,4,5,6,7,4,5,6,1,1,11,12,21,7,1,4,5,6,3,4,5,6,4,4,5,6,4,12,4,5,6,11,12,7,1,4,5,6,3,12,25,12,7,1,4,5,6,3,11,7,1,21,0,7,1,4,5,6,3,21,11,11,12,21,7,1,4,5,6,3,11,12,21,7,1,4,5,6,3,11,12,21,7,1,4,5,6,3,34,35,1,3,7,3,1,1,7,1,4,5,6,3,7,1,4,5,6,3,25,12,0,0,0,38,38,38,40,38,40,38,38,38,38,38,38,37,38,37,38,37,38,37,38,37,37,38,37,38,37,37,38,37,38,37,37,38,37,37,37,38,37,37,38,40,38,38,38,38,40,38,38,38,38,38,38,38,40,38,40,38,40,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]],2],[[1,[-1]]],[]],[[3,2],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[4,2],4],[[5,2],5],[[6,2],6],[7,7],[[[1,[-1]]],[[1,[-1]]],8],[4,4],[5,5],[6,6],[3,3],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[1,[-1]],-2],[[1,[-1]]],[],10],0,[[],11],[[],12],[[7,2],7],[[],7],[[[1,[-1]],-1],[[1,[-1]]],[]],[[],[[1,[-1]]],[]],[[],4],[[],5],[[5,13],5],[[],6],[[],3],[[4,[14,[2]]],4],[[11,15],[[18,[[17,[16]]]]]],[[11,-1],11,[[20,[19]]]],[[11,15],11],[[21,22],23],[[21,22],23],[-1,-1,[]],[-1,-1,[]],[24,21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[10,15],[[17,[16]]]],[[[1,[-1]],-2],[[1,[-1]]],[],[[25,[-1]]]],[7,[[18,[2]]]],[[[1,[-1]]],[[18,[-1]]],[8,26,27]],[4,[[18,[[28,[13]]]]]],[5,[[18,[13]]]],[6,[[18,[[28,[13]]]]]],[3,[[18,[16]]]],[[7,29],[[18,[2]]]],[[[1,[-1]],29],[[18,[-1]]],[8,26,27]],[[4,29],[[18,[[28,[13]]]]]],[[5,29],[[18,[13]]]],[[6,29],[[18,[[28,[13]]]]]],[[3,29],[[18,[16]]]],[[7,29],[[18,[[17,[2]]]]]],[[4,29],[[18,[[17,[[28,[13]]]]]]]],[[5,29],[[18,[[17,[13]]]]]],[[6,29],[[18,[[17,[[28,[13]]]]]]]],[7,[[18,[[17,[2]]]]]],[4,[[18,[[17,[[28,[13]]]]]]]],[5,[[18,[[17,[13]]]]]],[6,[[18,[[17,[[28,[13]]]]]]]],[[[1,[-1]]],[[18,[-1]]],[8,26,27]],[[[1,[-1]],29],[[18,[-1]]],[8,26,27]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[4,-1],4,26],[[5,-1],5,26],[[6,-1],6,26],[[4,-1,2],4,26],[[4,[14,[-1]]],4,26],[[5,[14,[-1]]],5,26],[[6,[14,[-1]]],6,26],[[4,[14,[[9,[-1,2]]]]],4,26],[[12,13],12],[[4,13],4],[[5,13],5],[[6,13],6],[[],11],[[],12],[[],7],[[],[[1,[-1]]],[]],[[],4],[[],5],[[],6],[[],3],[[12,2],12],[[25,13],[[17,[16]]]],[[12,13],[[17,[16]]]],[[7,2],7],[[[1,[-1]],2],[[1,[-1]]],[]],[[4,2],4],[[5,2],5],[[6,2],6],[[3,2],3],[[11,2],11],[[7,2],7],[[[1,[-1]],2],[[1,[-1]]],[]],[21,[[17,[30]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[[11,2],11],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[34,[],[[33,[-1]]]],-2],[[31,[9,-1]]],[],[]],[[[35,[],[[33,[-1]]]],16],[[31,[9,-1]]],[]],[[[1,[-1]],-2],[[1,[-1]]],[],[[34,[-1]]]],[[3,-1],3,35],[[7,2],7],[[3,-1,-2],3,[[36,[16]]],[[36,[16]]]],[[[1,[-1]],-2],[[1,[-1]]],[],[[36,[16]]]],[[[1,[-1]],-2],[[1,[-1]]],[],[[36,[16]]]],[[7,-1],7,[[36,[16]]]],[[[1,[-1]],-2],[[1,[-1]]],[],[[36,[16]]]],[[4,-1],4,[[36,[16]]]],[[5,-1],5,[[36,[16]]]],[[6,-1],6,[[36,[16]]]],[[3,-1],3,[[36,[16]]]],[37,7],[37,[[1,[-1]]],[]],[37,4],[37,5],[37,6],[37,3],[[25,-1],9,[]],[[12,-1],9,26],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],38],0,0,0,[[38,39,15,[17,[2]]],23],[[37,39,15,[17,[2]]],23],[[38,39,15,[17,[2]]],23],[[37,39,15,[17,[2]]],23],[[38,39,15],23],[[37,39,15],23],[[38,39,15,[17,[15]]],23],[[37,39,15,[17,[15]]],23],[[38,39,15,15],23],[[37,39,15,15],23],[[37,39,15],23],[[38,39,15,2,2],23],[[37,39,15,2,2],23],[[38,39,15,[14,[15]]],23],[[37,39,15,[14,[15]]],23],[[37,39,15],23],[[38,39,15],23],[[37,39,15],23],[[38,39,15],23],[[37,39,15],23],[[37,39,15],23],[[38,39,15,2],23],[[37,39,15,2],23],[[37,39,15,15],23],[[37,39,15],23],[[38,39,15,2,2],23],[[37,39,15,2,2],23],[[37,39,15,[14,[15]]],23],[-1,-1,[]],[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],0,0,0],"c":[],"p":[[5,"Input",0],[1,"bool"],[5,"Password",0],[5,"MultiSelect",0],[5,"Select",0],[5,"Sort",0],[5,"Confirm",0],[10,"Clone",271],[1,"tuple"],[10,"Completion",0],[5,"Editor",0],[5,"BasicHistory",0],[1,"usize"],[1,"slice"],[1,"str"],[5,"String",272],[6,"Option",273],[8,"Result",0],[5,"OsStr",274],[10,"AsRef",275],[6,"Error",0],[5,"Formatter",276],[8,"Result",276],[5,"Error",277],[10,"History",0],[10,"ToString",272],[10,"FromStr",278],[5,"Vec",279],[5,"Term",280],[10,"Error",281],[6,"Result",282],[5,"TypeId",283],[17,"Err"],[10,"InputValidator",0],[10,"PasswordValidator",0],[10,"Into",275],[10,"Theme",207],[5,"ColorfulTheme",207],[10,"Write",276],[5,"SimpleTheme",207]],"b":[[58,"impl-Confirm%3C\'_%3E"],[59,"impl-Default-for-Confirm%3C\'static%3E"],[60,"impl-Input%3C\'_,+T%3E"],[61,"impl-Default-for-Input%3C\'static,+T%3E"],[63,"impl-Default-for-Select%3C\'static%3E"],[64,"impl-Select%3C\'_%3E"],[71,"impl-Display-for-Error"],[72,"impl-Debug-for-Error"]]},\
"encode_unicode":{"doc":"Miscellaneous UTF-8 and UTF-16 types and methods.","t":"KKKKKKFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMMMMMMNNNNNNNNNNNMHHMMCNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNMMMMMMMMNNNNNNMMMMMMMPPPPPFPPPPGPGPGFGGGGGGPPPPPPPPPPPPPGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CharExt","IterExt","SliceExt","StrExt","U16UtfExt","U8UtfExt","Utf16Char","Utf16Iterator","Utf8Char","Utf8Iterator","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deref","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_ignore_ascii_case","eq_ignore_ascii_case","eq_ignore_ascii_case","eq_ignore_ascii_case","error","extra_utf8_bytes","extra_utf8_bytes_unchecked","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_array","from_array","from_array_unchecked","from_array_unchecked","from_ascii","from_ascii_unchecked","from_bmp","from_bmp_unchecked","from_slice_start","from_slice_start","from_slice_start_unchecked","from_slice_start_unchecked","from_str","from_str","from_str_start","from_str_start","from_tuple","from_tuple_unchecked","from_u32_detailed","from_utf16_array","from_utf16_array_unchecked","from_utf16_slice_start","from_utf16_tuple","from_utf16_tuple_unchecked","from_utf8_array","from_utf8_exact_slice_unchecked","from_utf8_slice_start","hash","hash","into","into","into_iter","into_iter","is_ascii","is_ascii","is_ascii","is_ascii","is_bmp","is_utf16_leading_surrogate","iter_bytes","iter_units","iter_utf16_units","iter_utf8_bytes","iterator","len","len","make_ascii_lowercase","make_ascii_lowercase","make_ascii_lowercase","make_ascii_lowercase","make_ascii_uppercase","make_ascii_uppercase","make_ascii_uppercase","make_ascii_uppercase","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_array","to_array","to_ascii_lowercase","to_ascii_lowercase","to_ascii_lowercase","to_ascii_lowercase","to_ascii_uppercase","to_ascii_uppercase","to_ascii_uppercase","to_ascii_uppercase","to_bytes","to_char","to_char","to_owned","to_owned","to_slice","to_slice","to_string","to_string","to_tuple","to_units","to_utf16","to_utf16_array","to_utf16_tuple","to_utf16chars","to_utf8","to_utf8_array","to_utf8chars","try_from","try_from","try_into","try_into","type_id","type_id","utf16_needs_extra_unit","utf16char_indices","utf16char_indices","utf16chars","utf8char_indices","utf8char_indices","utf8chars","Codepoint","Codepoint","ContinuationByte","Empty","EmptySlice","EmptyStrError","FirstByte","FirstIsTrailingSurrogate","FirstIsTrailingSurrogate","FirstLowSurrogate","FromStrError","Incomplete","InvalidCodepoint","InvalidSecond","InvalidUtf16Array","InvalidUtf16FirstUnit","InvalidUtf16Slice","InvalidUtf16Tuple","InvalidUtf8","InvalidUtf8Array","InvalidUtf8FirstByte","InvalidUtf8Slice","MissingSecond","MissingSecond","MultipleCodepoints","NotAContinuationByte","OverLong","SecondIsNotTrailingSurrogate","SecondNotLowSurrogate","SuperfluousSecond","TooHigh","TooLongSeqence","TooShort","UnexpectedTrailingSurrogate","UnmatchedLeadingSurrogate","Utf16PairError","Utf16Reserved","Utf8","Utf8","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","description","description","description","description","description","description","description","description","description","description","description","description","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error_range","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Utf16CharDecoder","Utf16CharIndices","Utf16CharMerger","Utf16CharSplitter","Utf16Chars","Utf16Iterator","Utf8CharDecoder","Utf8CharIndices","Utf8CharMerger","Utf8CharSplitter","Utf8Chars","Utf8Iterator","as_slice","as_slice","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remaining_units","len","len","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","read","read","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_units","to_units","to_units","to_units","to_units","to_units","to_units","to_units","to_units","to_units","to_units","to_units","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf16chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","to_utf8chars","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"encode_unicode"],[158,"encode_unicode::error"],[386,"encode_unicode::iterator"],[654,"core::cmp"],[655,"core::result"],[656,"core::fmt"],[657,"core::fmt"],[658,"core::hash"],[659,"core::borrow"],[660,"core::iter::traits::collect"],[661,"alloc::string"],[662,"core::any"],[663,"core::error"],[664,"core::clone"],[665,"core::iter::traits::iterator"],[666,"core::default"],[667,"core::fmt"],[668,"std::io::error"]],"d":["Extension trait for <code>char</code> that adds methods for converting …","Iterator methods that convert between <code>u8</code>s and <code>Utf8Char</code> or …","Methods for iterating over <code>u8</code> and <code>u16</code> slices as UTF-8 or …","Adds <code>.utf8chars()</code> and <code>.utf16chars()</code> iterator constructors …","Methods for working with <code>u16</code>s as UTF-16 units.","Methods for working with <code>u8</code>s as UTF-8 bytes.","An unicode codepoint stored as UTF-16.","Iterate over the units of the UTF-16 representation of a …","An unicode codepoint stored as UTF-8.","Read or iterate over the bytes of the UTF-8 representation …","","","","Return a <code>str</code> view of the array the codepoint is stored as.","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that two characters are an ASCII case-insensitive …","","Checks that two characters are an ASCII case-insensitive …","","Errors returned by various conversion methods in this …","How many more bytes will you need to complete this …","How many more bytes will you need to complete this …","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Create an <code>Utf8Char</code> from a byte array after validating it.","Validate and store an UTF-16 array as returned from …","Zero-cost constructor.","Create an <code>Utf16Char</code> from an array as returned from …","Create an <code>Utf8Char</code> from a single byte.","Create an <code>Utf8Char</code> from a single byte without checking …","Create an <code>Utf16Char</code> from a single unit.","Create an <code>Utf16Char</code> from a single unit without checking …","Create an <code>Utf8Char</code> of the first codepoint in an UTF-8 …","Validate and store the first UTF-16 codepoint in the slice.","A <code>from_slice_start()</code> that doesn’t validate the codepoint.","Store the first UTF-16 codepoint of the slice.","Create an <code>Utf8Char</code> from a string slice. The string must …","Create an <code>Utf16Char</code> from a string slice. The string must …","Create an <code>Utf8Char</code> from the first codepoint in a <code>str</code>.","Create an <code>Utf16Char</code> from the first codepoint in a string …","Validate and store a UTF-16 pair as returned from …","Create an <code>Utf16Char</code> from a tuple as returned from …","Produces more detailed errors than <code>char::from_u32()</code>","Convert a UTF-16 pair as returned from <code>.to_utf16_array()</code> …","Convert a UTF-16 array as returned from <code>.to_utf16_array()</code> …","Create a <code>char</code> from the start of an UTF-16 slice, and also …","Convert a UTF-16 pair as returned from <code>.to_utf16_tuple()</code> …","Convert a UTF-16 tuple as returned from <code>.to_utf16_tuple()</code> …","Convert an UTF-8 sequence as returned from <code>.to_utf8_array()</code>…","Convert an UTF-8 sequence into a char.","Create a <code>char</code> from the start of an UTF-8 slice, and also …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate over the byte values.","Iterate over the units.","","Checks that the codepoint is an ASCII character.","","Checks that the codepoint is an ASCII character.","Checks that the codepoint is in the basic multilingual …","Does this <code>u16</code> need another <code>u16</code> to complete a codepoint? …","Converts an iterator of <code>Utf8Char</code> (or <code>&amp;Utf8Char</code>) to an …","Converts an iterator of <code>Utf16Char</code> (or <code>&amp;Utf16Char</code>) to an …","Iterate over the one or two units in the UTF-16 …","Iterate over or read the one to four bytes in the UTF-8 …","Iterator types that you should rarely need to name","The number of bytes this character needs.","The number of units this character is made up of.","","Converts the character to its ASCII lower case equivalent …","Converts the character to its ASCII lower case equivalent …","","","Converts the character to its ASCII upper case equivalent …","Converts the character to its ASCII upper case equivalent …","","","","","","","","Expose the internal array and the number of used bytes.","Get the character represented as an array of two units.","","Converts the character to its ASCII lower case equivalent.","","Converts the character to its ASCII lower case equivalent.","Converts the character to its ASCII upper case equivalent.","","","Converts the character to its ASCII upper case equivalent.","Converts an iterator of <code>Utf8Char</code>s or <code>&amp;Utf8Char</code>s to an …","Convert from UTF-8 to UTF-32","Convert from UTF-16 to UTF-32","","","Write the internal representation to a slice, and then …","Write the internal representation to a slice, and then …","","","The second <code>u16</code> is used for surrogate pairs.","Converts an iterator of <code>Utf16Char</code> (or <code>&amp;Utf16Char</code>) to an …","Get the UTF-16 representation of this codepoint.","Convert this <code>char</code> to UTF-16.","Convert this <code>char</code> to UTF-16. The second item is <code>Some</code> if a …","Decodes bytes as UTF-16 and groups them into <code>Utf16Char</code>s","Get the UTF-8 representation of this codepoint.","Convert this char to an UTF-8 array, and also return how …","Decodes bytes as UTF-8 and groups them into <code>Utf8Char</code>s","","","","","","","Will you need an extra unit to complete this codepoint?","Equivalent to <code>.char_indices()</code> but produces <code>Utf16Char</code>s.","Decode <code>u16</code> slices as UTF-16 and iterate over the …","Equivalent to <code>.chars()</code> but produces <code>Utf16Char</code>s.","Equivalent to <code>.char_indices()</code> but produces <code>Utf8Char</code>s.","Decode <code>u8</code> slices as UTF-8 and iterate over the codepoints …","Equivalent to <code>.chars()</code> but produces <code>Utf8Char</code>s.","Not a valid unicode codepoint.","The encoded codepoint is invalid:","This byte belongs to a previous sequence. Is given for …","<code>Utf8Char</code> or <code>Utf16Char</code> cannot be empty.","The slice is empty.","Cannot create an <code>Utf8Char</code> or <code>Utf16Char</code> from the first …","Something is wrong with the first byte.","The first unit is a trailing/low surrogate, which is never …","The first unit is a trailing/low surrogate, which is never …","The first unit is a low surrogate.","Reasons why <code>Utf8Char::from_str()</code> or <code>Utf16Char::from_str()</code> …","A trailing surrogate was expected when the end was reached.","Reasons why an <code>u32</code> is not a valid UTF codepoint.","The first unit requires a second unit, but it’s not a …","Reasons why a <code>[u16; 2]</code> doesn’t form a valid UTF-16 …","Cannot tell whether an <code>u16</code> needs an extra unit, because it…","Reasons why a slice of <code>u16</code>s doesn’t start with valid …","Reasons why one or two <code>u16</code>s are not valid UTF-16, in …","Reasons why a byte sequence is not valid UTF-8, excluding …","Reasons why a byte array is not valid UTF-8, in sinking …","Reasons why a byte is not the start of a UTF-8 codepoint.","Reasons why a byte slice is not valid UTF-8, in sinking …","The first and only unit requires a second unit.","The first and only unit requires a second unit.","<code>Utf8Char</code> or <code>Utf16Char</code> cannot store more than a single …","The byte at index 1…3 should be a continuation byte, but …","There are too many leading zeros: it could be a byte …","The second unit is needed, but is not a trailing surrogate.","The first unit requires a second one, but it’s not a …","You provided a second unit, but the first one stands on …","It’s higher than the highest codepoint (which is …","Sequences cannot be longer than 4 bytes. Is given for …","The slice is too short; n bytes was required.","A trailing surrogate was not preceeded by a leading …","A leading surrogate was followed by an unit that was not a …","Types of invalid sequences encountered by <code>Utf16CharParser</code>.","It’s reserved for UTF-16 surrogate pairs.“","Not a valid UTF-8 sequence.","Something is certainly wrong with the first byte.","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Some</code> if the error is a <code>InvalidUtf8FirstByte</code>.","Always returns <code>Some</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the range of values for which this error would be …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An <code>Utf16CharMerger</code> that also produces offsets and lengths, …","An iterator over the codepoints in a <code>str</code> represented as …","Decodes UTF-16 characters from a <code>u16</code> iterator into …","The iterator type returned by <code>iter_units()</code>","An iterator over the codepoints in a <code>str</code> represented as …","Iterate over the units of the UTF-16 representation of a …","An <code>Utf8CharMerger</code> that also produces offsets and lengths, …","An iterator over the <code>Utf8Char</code> of a string slice, and their …","Decodes UTF-8 characters from a byte iterator into <code>Utf8Char</code>…","The iterator type returned by <code>iter_bytes()</code>","An iterator over the codepoints in a <code>str</code> represented as …","Read or iterate over the bytes of the UTF-8 representation …","Extract the remainder of the source slice.","Extract the remainder of the source slice.","Extract the remainder of the source <code>str</code>.","Extract the remainder of the source <code>str</code>.","Extract the remainder of the source <code>str</code>.","Extract the remainder of the source <code>str</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","A less generic constructor than <code>iter_bytes()</code>","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","A less generic constructor than <code>iter_units()</code>","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the source iterator.","Extracts the source iterator.","Extract the inner iterator.","Extract the inner iterator.","","","","","","","","","","","","","Returns an iterator over the remaining units. Unlike …","","","","","","","","","","","","","","","","","","","","Always returns Ok","Always returns <code>Ok</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,5,1,1,1,1,5,5,1,5,1,5,1,5,1,5,1,5,1,5,1,1,1,1,5,5,5,5,5,1,1,5,5,0,11,11,1,1,5,5,1,1,1,5,5,5,1,5,1,5,1,1,5,5,1,5,1,5,1,5,1,5,5,5,27,27,27,27,27,27,27,27,27,1,5,1,5,1,5,1,1,5,5,5,32,0,0,27,27,0,1,5,1,1,5,5,1,1,5,5,1,1,1,5,5,5,1,5,1,1,5,5,1,1,5,5,38,1,5,1,5,1,5,1,5,5,38,27,27,27,38,27,27,38,1,5,1,5,1,5,32,44,46,44,44,46,44,18,20,13,22,21,0,52,19,25,21,0,54,0,25,0,0,0,0,0,0,0,0,25,21,22,52,52,19,21,25,28,13,20,54,54,0,28,18,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,28,43,43,23,23,28,28,19,19,25,25,21,21,54,54,22,22,13,13,52,52,18,18,20,20,43,23,28,19,25,21,54,22,13,52,52,18,18,18,20,20,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,43,23,28,19,25,21,54,22,13,52,18,20,0,0,0,0,0,0,0,0,0,0,0,0,50,47,49,51,45,48,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,41,50,40,47,30,49,51,31,45,48,41,50,40,47,30,30,30,33,33,33,49,49,51,51,31,31,31,37,37,37,45,45,48,48,41,41,41,50,50,40,40,40,47,47,30,33,49,51,31,37,45,48,41,50,40,47,33,37,41,40,30,33,49,51,31,37,45,48,41,50,40,47,40,30,31,30,33,49,51,31,37,45,48,41,50,40,47,49,51,45,48,50,30,33,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47,30,33,49,51,31,37,45,48,41,50,40,47],"f":[0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[1,4],[5,[[3,[6]]]],[1,4],[1,[[3,[2]]]],[1,4],[-1,-2,[],[]],[-1,-2,[],[]],[5,[[3,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[5,5],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[1,1],8],[[5,5],8],[[],1],[[],5],[1,-1,[]],[5,[[3,[6]]]],[[1,1],9],[[1,2],9],[[1,10],9],[[1,5],9],[[5,6],9],[[5,1],9],[[5,10],9],[[5,5],9],[[5,2],9],[[1,1],9],[[1,1],9],[[5,5],9],[[5,5],9],0,[11,[[14,[12,13]]]],[11,12],[[1,15],16],[[1,15],16],[[5,15],16],[[5,15],16],[-1,-1,[]],[10,1],[5,1],[1,5],[10,5],[-1,-1,[]],[[[17,[2]]],[[14,[1,18]]]],[[[17,[6]]],[[14,[5,19]]]],[[[17,[2]]],1],[[[17,[6]]],5],[2,[[14,[1,0]]]],[2,1],[6,[[14,[5,0]]]],[6,5],[[[3,[2]]],[[14,[[7,[1,12]],20]]]],[[[3,[6]]],[[14,[[7,[5,12]],21]]]],[[[3,[2]]],[[7,[1,12]]]],[[[3,[6]]],[[7,[5,12]]]],[4,[[14,[1,22]]]],[4,[[14,[5,22]]]],[4,[[14,[[7,[1,12]],23]]]],[4,[[14,[[7,[5,12]],23]]]],[[[7,[6,[24,[6]]]]],[[14,[5,25]]]],[[[7,[6,[24,[6]]]]],5],[26,[[14,[27,28]]]],[[[17,[6]]],[[14,[27,19]]]],[[[17,[6]]],27],[[[3,[6]]],[[14,[[7,[27,12]],21]]]],[[[7,[6,[24,[6]]]]],[[14,[27,25]]]],[[[7,[6,[24,[6]]]]],27],[[[17,[2]]],[[14,[27,18]]]],[[[3,[2]]],27],[[[3,[2]]],[[14,[[7,[27,12]],20]]]],[[1,-1],7,29],[[5,-1],7,29],[-1,-2,[],[]],[-1,-2,[],[]],[1,30],[5,31],[1,9],[1,9],[5,9],[5,9],[5,9],[32,9],[-2,[[33,[-1]]],[[34,[1]]],[[36,[],[[35,[-1]]]]]],[-2,[[37,[-1]]],[[34,[5]]],[[36,[],[[35,[-1]]]]]],[27,31],[27,30],0,[1,12],[5,12],[1,7],[1,7],[5,7],[5,7],[1,7],[1,7],[5,7],[5,7],[[1,10],[[24,[8]]]],[[1,1],[[24,[8]]]],[[1,5],[[24,[8]]]],[[5,10],[[24,[8]]]],[[5,1],[[24,[8]]]],[[5,5],[[24,[8]]]],[1,[[7,[[17,[2]],12]]]],[5,[[17,[6]]]],[1,-1,[]],[1,1],[5,5],[5,5],[1,1],[1,-1,[]],[5,5],[5,5],[38,[[33,[-1,38]]],[]],[1,10],[5,10],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[3,[2]]],12],[[5,[3,[6]]],12],[-1,39,[]],[-1,39,[]],[5,[[7,[6,[24,[6]]]]]],[38,[[37,[-1,38]]],[]],[27,5],[27,[[17,[6]]]],[27,[[7,[6,[24,[6]]]]]],[38,[[40,[-1,38]]],[]],[27,1],[27,[[7,[[17,[2]],12]]]],[38,[[41,[-1,38]]],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[32,[[14,[9,43]]]],[44,45],[46,47],[44,48],[44,49],[46,50],[44,51],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52,[[24,[53]]]],[18,[[24,[53]]]],[20,[[24,[53]]]],[43,43],[23,23],[28,28],[19,19],[25,25],[21,21],[54,54],[22,22],[13,13],[52,52],[18,18],[20,20],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[43,4],[23,4],[28,4],[19,4],[25,4],[21,4],[54,4],[22,4],[13,4],[52,4],[18,4],[20,4],[[43,43],9],[[23,23],9],[[28,28],9],[[19,19],9],[[25,25],9],[[21,21],9],[[54,54],9],[[22,22],9],[[13,13],9],[[52,52],9],[[18,18],9],[[20,20],9],[28,[[7,[26,26]]]],[[43,15],16],[[43,15],16],[[23,15],16],[[23,15],16],[[28,15],16],[[28,15],16],[[19,15],16],[[19,15],16],[[25,15],16],[[25,15],16],[[21,15],16],[[21,15],16],[[54,15],16],[[54,15],16],[[22,15],16],[[22,15],16],[[13,15],16],[[13,15],16],[[52,15],16],[[52,15],16],[[18,15],16],[[18,15],16],[[20,15],16],[[20,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[13,52],[-1,-1,[]],[28,18],[-1,-1,[]],[52,18],[28,20],[-1,-1,[]],[52,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],0,0,0,0,0,0,0,0,0,0,0,0,[50,[[3,[2]]]],[47,[[3,[6]]]],[49,4],[51,4],[45,4],[48,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[[[33,[-1,-2]]],[[33,[-1,-2]]],[55,[34,[1]]],[55,[56,[],[[35,[-1]]]]]],[49,49],[51,51],[31,31],[[[37,[-1,-2]]],[[37,[-1,-2]]],[55,[34,[5]]],[55,[56,[],[[35,[-1]]]]]],[45,45],[48,48],[[[41,[-1,-2]]],[[41,[-1,-2]]],[55,[34,[2]]],[55,[56,[],[[35,[-1]]]]]],[50,50],[[[40,[-1,-2]]],[[40,[-1,-2]]],[55,[34,[6]]],[55,[56,[],[[35,[-1]]]]]],[47,47],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[],[[41,[-1,-2]]],[57,[34,[2]]],[57,[56,[],[[35,[-1]]]]]],[[],50],[[],[[40,[-1,-2]]],[57,[34,[6]]],[57,[56,[],[[35,[-1]]]]]],[[],47],[[30,15],16],[[49,15],16],[[51,15],16],[[31,15],16],[[45,15],16],[[48,15],16],[[[41,[-1,-2]],15],16,[[34,[2]]],[[56,[],[[35,[-1]]]],58]],[[50,15],16],[[[40,[-1,-2]],15],16,[[34,[6]]],[[56,[],[[35,[-1]]]],58]],[[47,15],16],[-1,-1,[]],[1,30],[10,30],[59,-1,[]],[-1,-1,[]],[-1,[[33,[1,-1]]],[[56,[],[[35,[1]]]]]],[4,49],[-1,-1,[]],[-1,-1,[]],[4,51],[10,31],[-1,-1,[]],[5,31],[59,-1,[]],[-1,[[37,[5,-1]]],[[56,[],[[35,[5]]]]]],[-1,-1,[]],[-1,-1,[]],[4,45],[-1,-1,[]],[4,48],[-3,[[41,[-1,-2]]],[[34,[2]]],[[56,[],[[35,[-1]]]]],[[36,[],[[60,[-2]],[35,[-1]]]]]],[59,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[2]]],50],[59,-1,[]],[-3,[[40,[-1,-2]]],[[34,[6]]],[[56,[],[[35,[-1]]]]],[[36,[],[[60,[-2]],[35,[-1]]]]]],[-1,-1,[]],[[[3,[6]]],47],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1,-2]]],-2,[[34,[1]]],[[56,[],[[35,[-1]]]]]],[[[37,[-1,-2]]],-2,[[34,[5]]],[[56,[],[[35,[-1]]]]]],[[[41,[-1,-2]]],-2,[[34,[2]]],[[56,[],[[35,[-1]]]]]],[[[40,[-1,-2]]],-2,[[34,[6]]],[[56,[],[[35,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2]]],[[62,[[61,[-1]],-2]]],[[34,[6]]],[[56,[],[[35,[-1]]]]]],[30,12],[31,12],[30,[[24,[2]]]],[[[33,[-1,-2]]],[[24,[-3]]],[[34,[1]]],[[56,[],[[35,[-1]]]]],[]],[49,[[24,[[7,[12,1]]]]]],[51,[[24,[1]]]],[31,[[24,[6]]]],[[[37,[-1,-2]]],[[24,[-3]]],[[34,[5]]],[[56,[],[[35,[-1]]]]],[]],[45,[[24,[[7,[12,5]]]]]],[48,[[24,[5]]]],[[[41,[-1,-2]]],[[24,[-3]]],[[34,[2]]],[[56,[],[[35,[-1]]]]],[]],[50,[[24,[-1]]],[]],[[[40,[-1,-2]]],[[24,[-3]]],[[34,[6]]],[[56,[],[[35,[-1]]]]],[]],[47,[[24,[-1]]],[]],[49,[[24,[[7,[12,1]]]]]],[51,[[24,[1]]]],[45,[[24,[[7,[12,5]]]]]],[48,[[24,[5]]]],[50,[[24,[-1]]],[]],[[30,[3,[2]]],[[14,[12,63]]]],[[[33,[-1,-2]],[3,[2]]],[[14,[12,63]]],[[34,[1]]],[[56,[],[[35,[-1]]]]]],[30,[[7,[12,[24,[12]]]]]],[[[33,[-1,-2]]],[[7,[12,[24,[12]]]]],[[34,[1]]],[[56,[],[[35,[-1]]]]]],[49,[[7,[12,[24,[12]]]]]],[51,[[7,[12,[24,[12]]]]]],[31,[[7,[12,[24,[12]]]]]],[[[37,[-1,-2]]],[[7,[12,[24,[12]]]]],[[34,[5]]],[[56,[],[[35,[-1]]]]]],[45,[[7,[12,[24,[12]]]]]],[48,[[7,[12,[24,[12]]]]]],[[[41,[-1,-2]]],[[7,[12,[24,[12]]]]],[[34,[2]]],[[56,[],[[35,[-1]]]]]],[50,[[7,[12,[24,[12]]]]]],[[[40,[-1,-2]]],[[7,[12,[24,[12]]]]],[[34,[6]]],[[56,[],[[35,[-1]]]]]],[47,[[7,[12,[24,[12]]]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]]],"c":[],"p":[[5,"Utf8Char",0],[1,"u8"],[1,"slice"],[1,"str"],[5,"Utf16Char",0],[1,"u16"],[1,"tuple"],[6,"Ordering",654],[1,"bool"],[1,"char"],[10,"U8UtfExt",0],[1,"usize"],[6,"InvalidUtf8FirstByte",158],[6,"Result",655],[5,"Formatter",656],[8,"Result",656],[1,"array"],[6,"InvalidUtf8Array",158],[6,"InvalidUtf16Array",158],[6,"InvalidUtf8Slice",158],[6,"InvalidUtf16Slice",158],[6,"FromStrError",158],[5,"EmptyStrError",158],[6,"Option",657],[6,"InvalidUtf16Tuple",158],[1,"u32"],[10,"CharExt",0],[6,"InvalidCodepoint",158],[10,"Hasher",658],[5,"Utf8Iterator",386],[5,"Utf16Iterator",386],[10,"U16UtfExt",0],[5,"Utf8CharSplitter",386],[10,"Borrow",659],[17,"Item"],[10,"IntoIterator",660],[5,"Utf16CharSplitter",386],[10,"IterExt",0],[5,"String",661],[5,"Utf16CharMerger",386],[5,"Utf8CharMerger",386],[5,"TypeId",662],[5,"InvalidUtf16FirstUnit",158],[10,"StrExt",0],[5,"Utf16CharIndices",386],[10,"SliceExt",0],[5,"Utf16CharDecoder",386],[5,"Utf16Chars",386],[5,"Utf8CharIndices",386],[5,"Utf8CharDecoder",386],[5,"Utf8Chars",386],[6,"InvalidUtf8",158],[10,"Error",663],[6,"Utf16PairError",158],[10,"Clone",664],[10,"Iterator",665],[10,"Default",666],[10,"Debug",656],[1,"never"],[17,"IntoIter"],[5,"IntoIter",657],[5,"Chain",667],[5,"Error",668]],"b":[[10,"impl-AsRef%3C%5Bu8%5D%3E-for-Utf8Char"],[11,"impl-AsRef%3Cstr%3E-for-Utf8Char"],[14,"impl-Borrow%3C%5Bu8%5D%3E-for-Utf8Char"],[15,"impl-Borrow%3Cstr%3E-for-Utf8Char"],[31,"impl-PartialEq-for-Utf8Char"],[32,"impl-PartialEq%3Cu8%3E-for-Utf8Char"],[33,"impl-PartialEq%3Cchar%3E-for-Utf8Char"],[34,"impl-PartialEq%3CUtf16Char%3E-for-Utf8Char"],[35,"impl-PartialEq%3Cu16%3E-for-Utf16Char"],[36,"impl-PartialEq%3CUtf8Char%3E-for-Utf16Char"],[37,"impl-PartialEq%3Cchar%3E-for-Utf16Char"],[38,"impl-PartialEq-for-Utf16Char"],[39,"impl-PartialEq%3Cu8%3E-for-Utf16Char"],[40,"impl-Utf8Char"],[41,"impl-AsciiExt-for-Utf8Char"],[42,"impl-Utf16Char"],[43,"impl-AsciiExt-for-Utf16Char"],[47,"impl-Debug-for-Utf8Char"],[48,"impl-Display-for-Utf8Char"],[49,"impl-Debug-for-Utf16Char"],[50,"impl-Display-for-Utf16Char"],[52,"impl-From%3Cchar%3E-for-Utf8Char"],[53,"impl-From%3CUtf16Char%3E-for-Utf8Char"],[54,"impl-From%3CUtf8Char%3E-for-Utf16Char"],[55,"impl-From%3Cchar%3E-for-Utf16Char"],[90,"impl-AsciiExt-for-Utf8Char"],[91,"impl-Utf8Char"],[92,"impl-AsciiExt-for-Utf16Char"],[93,"impl-Utf16Char"],[103,"impl-AsciiExt-for-Utf8Char"],[104,"impl-Utf8Char"],[105,"impl-Utf16Char"],[106,"impl-AsciiExt-for-Utf16Char"],[107,"impl-AsciiExt-for-Utf8Char"],[108,"impl-Utf8Char"],[109,"impl-Utf16Char"],[110,"impl-AsciiExt-for-Utf16Char"],[111,"impl-PartialOrd%3Cchar%3E-for-Utf8Char"],[112,"impl-PartialOrd-for-Utf8Char"],[113,"impl-PartialOrd%3CUtf16Char%3E-for-Utf8Char"],[114,"impl-PartialOrd%3Cchar%3E-for-Utf16Char"],[115,"impl-PartialOrd%3CUtf8Char%3E-for-Utf16Char"],[116,"impl-PartialOrd-for-Utf16Char"],[119,"impl-AsciiExt-for-Utf8Char"],[120,"impl-Utf8Char"],[121,"impl-AsciiExt-for-Utf16Char"],[122,"impl-Utf16Char"],[123,"impl-Utf8Char"],[124,"impl-AsciiExt-for-Utf8Char"],[125,"impl-AsciiExt-for-Utf16Char"],[126,"impl-Utf16Char"],[273,"impl-Debug-for-InvalidUtf16FirstUnit"],[274,"impl-Display-for-InvalidUtf16FirstUnit"],[275,"impl-Display-for-EmptyStrError"],[276,"impl-Debug-for-EmptyStrError"],[277,"impl-Debug-for-InvalidCodepoint"],[278,"impl-Display-for-InvalidCodepoint"],[279,"impl-Display-for-InvalidUtf16Array"],[280,"impl-Debug-for-InvalidUtf16Array"],[281,"impl-Display-for-InvalidUtf16Tuple"],[282,"impl-Debug-for-InvalidUtf16Tuple"],[283,"impl-Display-for-InvalidUtf16Slice"],[284,"impl-Debug-for-InvalidUtf16Slice"],[285,"impl-Debug-for-Utf16PairError"],[286,"impl-Display-for-Utf16PairError"],[287,"impl-Display-for-FromStrError"],[288,"impl-Debug-for-FromStrError"],[289,"impl-Debug-for-InvalidUtf8FirstByte"],[290,"impl-Display-for-InvalidUtf8FirstByte"],[291,"impl-Debug-for-InvalidUtf8"],[292,"impl-Display-for-InvalidUtf8"],[293,"impl-Display-for-InvalidUtf8Array"],[294,"impl-Debug-for-InvalidUtf8Array"],[295,"impl-Display-for-InvalidUtf8Slice"],[296,"impl-Debug-for-InvalidUtf8Slice"],[308,"impl-From%3CInvalidCodepoint%3E-for-InvalidUtf8Array"],[310,"impl-From%3CInvalidUtf8%3E-for-InvalidUtf8Array"],[311,"impl-From%3CInvalidCodepoint%3E-for-InvalidUtf8Slice"],[313,"impl-From%3CInvalidUtf8%3E-for-InvalidUtf8Slice"],[467,"impl-From%3CUtf8Char%3E-for-Utf8Iterator"],[468,"impl-From%3Cchar%3E-for-Utf8Iterator"],[476,"impl-From%3Cchar%3E-for-Utf16Iterator"],[478,"impl-From%3CUtf16Char%3E-for-Utf16Iterator"]]},\
"fastrand":{"doc":"A simple and fast random number generator.","t":"FHNHNHNNNHNHNHNNNNHNNHNHNNNNNHNHNHNHNHNHNNHNHNNHNHNNNNNHNHNHNHNHNHNHNN","n":["Rng","alphabetic","alphabetic","alphanumeric","alphanumeric","bool","bool","borrow","borrow_mut","char","char","choice","choice","choose_multiple","choose_multiple","clone","clone_into","default","digit","digit","eq","f32","f32","f64","f64","fill","fmt","fork","from","get_seed","get_seed","i128","i128","i16","i16","i32","i32","i64","i64","i8","i8","into","isize","isize","lowercase","lowercase","new","seed","seed","shuffle","shuffle","to_owned","try_from","try_into","type_id","u128","u128","u16","u16","u32","u32","u64","u64","u8","u8","uppercase","uppercase","usize","usize","with_seed"],"q":[[0,"fastrand"],[70,"core::ops::range"],[71,"core::option"],[72,"core::iter::traits::collect"],[73,"alloc::vec"],[74,"core::iter::traits::iterator"],[75,"core::fmt"],[76,"core::fmt"],[77,"core::any"]],"d":["A random number generator.","Generates a random <code>char</code> in ranges a-z and A-Z.","Generates a random <code>char</code> in ranges a-z and A-Z.","Generates a random <code>char</code> in ranges a-z, A-Z and 0-9.","Generates a random <code>char</code> in ranges a-z, A-Z and 0-9.","Generates a random <code>bool</code>.","Generates a random <code>bool</code>.","","","Generates a random <code>char</code> in the given range.","Generates a random <code>char</code> in the given range.","Choose an item from an iterator at random.","Choose an item from an iterator at random.","Collects <code>amount</code> values at random from the iterator into a …","Collects <code>amount</code> values at random from the iterator into a …","Clones the generator by creating a new generator with the …","","Initialize the <code>Rng</code> from the system’s random number …","Generates a random digit in the given <code>base</code>.","Generates a random digit in the given <code>base</code>.","","Generates a random <code>f32</code> in range <code>0..1</code>.","Generates a random <code>f32</code> in range <code>0..1</code>.","Generates a random <code>f64</code> in range <code>0..1</code>.","Generates a random <code>f64</code> in range <code>0..1</code>.","Fill a byte slice with random data.","","Clones the generator by deterministically deriving a new …","Returns the argument unchanged.","Gives back <strong>current</strong> seed that is being held by the …","Gives back <strong>current</strong> seed that is being held by this …","Generates a random <code>i128</code> in the given range.","Generates a random <code>i128</code> in the given range.","Generates a random <code>i16</code> in the given range.","Generates a random <code>i16</code> in the given range.","Generates a random <code>i32</code> in the given range.","Generates a random <code>i32</code> in the given range.","Generates a random <code>i64</code> in the given range.","Generates a random <code>i64</code> in the given range.","Generates a random <code>i8</code> in the given range.","Generates a random <code>i8</code> in the given range.","Calls <code>U::from(self)</code>.","Generates a random <code>isize</code> in the given range.","Generates a random <code>isize</code> in the given range.","Generates a random <code>char</code> in range a-z.","Generates a random <code>char</code> in range a-z.","Creates a new random number generator.","Initializes the thread-local generator with the given seed.","Initializes this generator with the given seed.","Shuffles a slice randomly.","Shuffles a slice randomly.","","","","","Generates a random <code>u128</code> in the given range.","Generates a random <code>u128</code> in the given range.","Generates a random <code>u16</code> in the given range.","Generates a random <code>u16</code> in the given range.","Generates a random <code>u32</code> in the given range.","Generates a random <code>u32</code> in the given range.","Generates a random <code>u64</code> in the given range.","Generates a random <code>u64</code> in the given range.","Generates a random <code>u8</code> in the given range.","Generates a random <code>u8</code> in the given range.","Generates a random <code>char</code> in range A-Z.","Generates a random <code>char</code> in range A-Z.","Generates a random <code>usize</code> in the given range.","Generates a random <code>usize</code> in the given range.","Creates a new random number generator with the initial …"],"i":[0,0,2,0,2,0,2,2,2,0,2,0,2,0,2,2,2,2,0,2,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,0,2,2,0,2,0,2,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,2],"f":[0,[[],1],[2,1],[[],1],[2,1],[[],3],[2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[[4,[1]]]],[[2,-1],1,[[4,[1]]]],[-1,5,6],[[2,-1],5,6],[[-1,7],8,9],[[2,-1,7],8,9],[2,2],[[-1,-2],10,[],[]],[[],2],[11,1],[[2,11],1],[[2,2],3],[[],12],[2,12],[[],13],[2,13],[[2,[15,[14]]],10],[[2,16],17],[2,2],[-1,-1,[]],[[],18],[2,18],[-1,19,[[4,[19]]]],[[2,-1],19,[[4,[19]]]],[-1,20,[[4,[20]]]],[[2,-1],20,[[4,[20]]]],[-1,21,[[4,[21]]]],[[2,-1],21,[[4,[21]]]],[-1,22,[[4,[22]]]],[[2,-1],22,[[4,[22]]]],[-1,23,[[4,[23]]]],[[2,-1],23,[[4,[23]]]],[-1,-2,[],[]],[-1,24,[[4,[24]]]],[[2,-1],24,[[4,[24]]]],[[],1],[2,1],[[],2],[18,10],[[2,18],10],[[[15,[-1]]],10,[]],[[2,[15,[-1]]],10,[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,26,[]],[-1,27,[[4,[27]]]],[[2,-1],27,[[4,[27]]]],[-1,28,[[4,[28]]]],[[2,-1],28,[[4,[28]]]],[-1,11,[[4,[11]]]],[[2,-1],11,[[4,[11]]]],[-1,18,[[4,[18]]]],[[2,-1],18,[[4,[18]]]],[-1,14,[[4,[14]]]],[[2,-1],14,[[4,[14]]]],[[],1],[2,1],[-1,7,[[4,[7]]]],[[2,-1],7,[[4,[7]]]],[18,2]],"c":[],"p":[[1,"char"],[5,"Rng",0],[1,"bool"],[10,"RangeBounds",70],[6,"Option",71],[10,"IntoIterator",72],[1,"usize"],[5,"Vec",73],[10,"Iterator",74],[1,"tuple"],[1,"u32"],[1,"f32"],[1,"f64"],[1,"u8"],[1,"slice"],[5,"Formatter",75],[8,"Result",75],[1,"u64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"isize"],[6,"Result",76],[5,"TypeId",77],[1,"u128"],[1,"u16"]],"b":[]},\
"heck":{"doc":"<strong>heck</strong> is a case conversion library.","t":"FFFFFFFFFFFMKKKKKKKKKKKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMMMMNNNNNNNNMMMNNNNNNNNNNNNNNNNNNNNNNNN","n":["AsKebabCase","AsLowerCamelCase","AsPascalCase","AsShoutyKebabCase","AsShoutySnakeCase","AsShoutySnekCase","AsSnakeCase","AsSnekCase","AsTitleCase","AsTrainCase","AsUpperCamelCase","TO_SHOUTY_SNEK_CASE","ToKebabCase","ToLowerCamelCase","ToPascalCase","ToShoutyKebabCase","ToShoutySnakeCase","ToShoutySnekCase","ToSnakeCase","ToSnekCase","ToTitleCase","ToTrainCase","ToUpperCamelCase","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","to_kebab_case","to_lower_camel_case","to_pascal_case","to_shouty_kebab_case","to_shouty_snake_case","to_snake_case","to_snek_case","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_title_case","to_train_case","to_upper_camel_case","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"heck"],[105,"core::fmt"],[106,"core::fmt"],[107,"alloc::string"],[108,"core::result"],[109,"core::any"]],"d":["This wrapper performs a kebab case conversion in …","This wrapper performs a lower camel case conversion in …","This wrapper performs a upper camel case conversion in …","This wrapper performs a kebab case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a title case conversion in …","This wrapper performs a train case conversion in …","This wrapper performs a upper camel case conversion in …","CONVERT THIS TYPE TO SNEK CASE.","This trait defines a kebab case conversion.","This trait defines a lower camel case conversion.","ToPascalCase is an alias for ToUpperCamelCase. See …","This trait defines a shouty kebab case conversion.","This trait defines a shouty snake case conversion.","Oh heck, ToShoutySnekCase is an alias for …","This trait defines a snake case conversion.","Oh heck, SnekCase is an alias for ToSnakeCase. See …","This trait defines a title case conversion.","This trait defines a train case conversion.","This trait defines an upper camel case conversion.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this type to kebab case.","Convert this type to lower camel case.","Convert this type to upper camel case.","Convert this type to shouty kebab case.","Convert this type to shouty snake case.","Convert this type to snake case.","Convert this type to snek case.","","","","","","","","","Convert this type to title case.","Convert this type to Train-Case.","Convert this type to upper camel case.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,7,8,9,10,11,12,13,2,7,8,9,10,11,12,13,2,7,8,9,10,11,12,13,2,7,8,9,10,11,12,13,2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,7,8,9,10,11,12,13,22,23,24,2,7,8,9,10,11,12,13,2,7,8,9,10,11,12,13,2,7,8,9,10,11,12,13],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]],3],4,[[6,[5]]]],[[[7,[-1]],3],4,[[6,[5]]]],[[[8,[-1]],3],4,[[6,[5]]]],[[[9,[-1]],3],4,[[6,[5]]]],[[[10,[-1]],3],4,[[6,[5]]]],[[[11,[-1]],3],4,[[6,[5]]]],[[[12,[-1]],3],4,[[6,[5]]]],[[[13,[-1]],3],4,[[6,[5]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[15,-1,[]],[16,-1,[]],[17,-1,[]],[18,-1,[]],[19,-1,[]],[20,-1,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[22,-1,[]],[23,-1,[]],[24,-1,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]]],"c":[],"p":[[10,"ToShoutySnekCase",0],[5,"AsKebabCase",0],[5,"Formatter",105],[8,"Result",105],[1,"str"],[10,"AsRef",106],[5,"AsLowerCamelCase",0],[5,"AsShoutyKebabCase",0],[5,"AsShoutySnakeCase",0],[5,"AsSnakeCase",0],[5,"AsTitleCase",0],[5,"AsTrainCase",0],[5,"AsUpperCamelCase",0],[10,"ToKebabCase",0],[10,"ToLowerCamelCase",0],[10,"ToPascalCase",0],[10,"ToShoutyKebabCase",0],[10,"ToShoutySnakeCase",0],[10,"ToSnakeCase",0],[10,"ToSnekCase",0],[5,"String",107],[10,"ToTitleCase",0],[10,"ToTrainCase",0],[10,"ToUpperCamelCase",0],[6,"Result",108],[5,"TypeId",109]],"b":[]},\
"itoa":{"doc":"github crates-io docs-rs","t":"FKNNNNNNNNNNN","n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":[[0,"itoa"],[13,"core::result"],[14,"core::any"]],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,-1],2,3],[-1,-1,[]],[-1,-2,[],[]],[[],1],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[5,"Buffer",0],[1,"str"],[10,"Integer",0],[6,"Result",13],[5,"TypeId",14]],"b":[]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":"KHQ","n":["LazyStatic","initialize","lazy_static"],"q":[[0,"lazy_static"]],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[-1,1,2],0],"c":[],"p":[[1,"tuple"],[10,"LazyStatic",0]],"b":[]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSGSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSISSSSSSSSSSSSSSSSSHHHHHHOHHHHHHHHNNNNNNNNNNNNNNNNNNNNIIIIIIIIIIIIIGHHHINNNNNNNNNHHHHIHHIHHHHHHHHHHHHHHHHHHNHGHHHHHHNNNNNNNNNNHHHHHHHHHHHHHHIIIIIINNNNNNNNNNIHHHHHHHHHHHHHHHHHHHHHHHHHHOIHHHHHHHIHHHHHHHHHHHHHOOHHHHHIHIFHHIOOOOOOOOOOOFHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHIIFFGFOOOOOOOOOHHHNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNIIIIIIHHFIHHHHHHHHHHHHHHHHHHH","n":["BUFSIZ","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EALREADY","EBADF","EBADMSG","EBUSY","ECANCELED","ECHILD","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EEXIST","EFAULT","EFBIG","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELOOP","EMFILE","EMLINK","EMSGSIZE","ENAMETOOLONG","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOTHER","EOVERFLOW","EOWNERDEAD","EPERM","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EROFS","ESPIPE","ESRCH","ETIME","ETIMEDOUT","ETXTBSY","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","FILE","FILENAME_MAX","FOPEN_MAX","INT_MAX","INT_MIN","LC_ALL","LC_COLLATE","LC_CTYPE","LC_MONETARY","LC_NUMERIC","LC_TIME","L_tmpnam","NSIG","O_APPEND","O_BINARY","O_CREAT","O_EXCL","O_NOINHERIT","O_RANDOM","O_RAW","O_RDONLY","O_RDWR","O_SEQUENTIAL","O_TEMPORARY","O_TEXT","O_TRUNC","O_WRONLY","RAND_MAX","SEEK_CUR","SEEK_END","SEEK_SET","SIGABRT","SIGFPE","SIGILL","SIGINT","SIGSEGV","SIGTERM","SIG_ACK","SIG_DFL","SIG_ERR","SIG_GET","SIG_IGN","SIG_SGE","SOCKET","STRUNCATE","S_IEXEC","S_IFCHR","S_IFDIR","S_IFMT","S_IFREG","S_IREAD","S_IWRITE","TMP_MAX","_IOFBF","_IOLBF","_IONBF","_O_OBTAIN_DIR","_O_SHORT_LIVED","_O_U16TEXT","_O_U8TEXT","_O_WTEXT","_exit","_msize","abort","abs","accept","access","actime","aligned_free","aligned_malloc","atexit","atof","atoi","atol","atoll","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_char","c_double","c_float","c_int","c_long","c_longlong","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calloc","chdir","chmod","clock_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","close","commit","connect","creat","dev_t","dup","dup2","errno_t","execl","execle","execlp","execlpe","execv","execve","execvp","execvpe","exit","fclose","fdopen","feof","ferror","fflush","fgetc","fgetpos","fgets","fileno","fmt","fopen","fpos_t","fprintf","fputc","fputs","fread","free","freopen","from","from","from","from","from","from","from","from","from","from","fseek","fsetpos","fstat","ftell","fwrite","get_osfhandle","getchar","getcwd","getenv","getpeername","getpid","getsockname","getsockopt","gmtime_s","ino_t","int16_t","int32_t","int64_t","int8_t","intmax_t","into","into","into","into","into","into","into","into","into","into","intptr_t","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","labs","listen","localtime_s","lseek","lseek64","malloc","memccpy","memchr","memcmp","memcpy","memmove","memset","mkdir","modtime","off_t","open","open_osfhandle","pclose","perror","pipe","popen","printf","ptrdiff_t","putchar","putenv","putenv_s","puts","raise","rand","read","realloc","recvfrom","remove","rename","rewind","rmdir","sa_data","sa_family","sendto","setbuf","setlocale","setsockopt","setvbuf","sighandler_t","signal","size_t","sockaddr","socket","srand","ssize_t","st_atime","st_ctime","st_dev","st_gid","st_ino","st_mode","st_mtime","st_nlink","st_rdev","st_size","st_uid","stat","stat","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","stricmp","strlen","strncat","strncmp","strncpy","strnicmp","strnlen","strpbrk","strrchr","strspn","strstr","strtod","strtof","strtok","strtol","strtoll","strtoul","strtoull","strxfrm","system","time","time64_t","time_t","timespec","timeval","timezone","tm","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tmpfile","tolower","toupper","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tv_nsec","tv_sec","tv_sec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","ungetc","unlink","utimbuf","wchar_t","wchmod","wcslen","wcstombs","wexecl","wexecle","wexeclp","wexeclpe","wexecv","wexecve","wexecvp","wexecvpe","wopen","wputenv","wputenv_s","write","wrmdir","wsetlocale","wstat","wutime"],"q":[[0,"libc"],[469,"core::fmt"],[470,"core::fmt"],[471,"core::any"]],"dquivalent to C’s <code>void</code> type when used as a pointer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,8,7,8,7,1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[10,11],[[14,[12,13]]]],0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,0,0,0,[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[267,268,269,270,440,441,442,443],"p":[[6,"timezone",0],[6,"FILE",0],[6,"fpos_t",0],[5,"stat",0],[5,"utimbuf",0],[5,"tm",0],[5,"timeval",0],[5,"timespec",0],[5,"sockaddr",0],[6,"c_void",0],[5,"Formatter",469],[1,"tuple"],[5,"Error",469],[6,"Result",470],[5,"TypeId",471]],"b":[]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"PPPGFPFPPFFPPPFPGFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNFENNNNNNNNNNNNNN","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[228,"proc_macro2::extra"],[243,"proc_macro2::token_stream"],[259,"core::cmp"],[260,"core::marker"],[261,"core::convert"],[262,"core::iter::traits::collect"],[263,"core::fmt"],[264,"core::fmt"],[265,"proc_macro"],[266,"core::hash"],[267,"core::option"],[268,"alloc::string"],[269,"core::ops::range"],[270,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,7,7,0,5,5,5,5,24,24,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,24,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,24,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,24,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,24,7,8,9,1,12,5,0,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,12],16],[[12,-1],16,[17,[19,[18]]]],[[7,-1],13,[[21,[],[[20,[8]]]]]],[[7,-1],13,[[21,[],[[20,[7]]]]]],0,[22,5],[22,5],[23,5],[23,5],[[24,25],26],[[24,25],26],[[7,25],26],[[7,25],26],[[6,25],26],[[8,25],26],[[8,25],26],[[9,25],26],[[9,25],26],[[10,25],26],[[1,25],26],[[1,25],26],[[11,25],26],[[12,25],26],[[12,25],26],[[5,25],26],[[5,25],26],[-1,-1,[]],[8,7],[-1,-1,[]],[27,7],[-1,-1,[]],[28,6],[9,8],[1,8],[-1,-1,[]],[5,8],[12,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[[21,[],[[20,[8]]]]]],[-1,7,[[21,[],[[20,[7]]]]]],[18,[[29,[7,24]]]],[18,[[29,[5,24]]]],[[12,-1],13,30],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[35,5],[35,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,36],[7,16],[37,5],[37,5],[[6,6],[[38,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[38,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[38,[39]]]],[1,11],[24,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[38,[6]]],[[41,[40]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[46,5],[46,5],[3,5],[3,5],[6,28],[40,5],[40,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,25],26],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],13,[],[]],[[36,25],26],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,[[38,[8]]]],[36,[[13,[40,[38,[40]]]]]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]]],"c":[],"p":[[5,"Punct",0],[1,"char"],[1,"u8"],[1,"slice"],[5,"Literal",0],[5,"Span",0],[5,"TokenStream",0],[6,"TokenTree",0],[5,"Group",0],[6,"Delimiter",0],[6,"Spacing",0],[5,"Ident",0],[1,"tuple"],[6,"Ordering",259],[5,"DelimSpan",228],[1,"bool"],[10,"Sized",260],[1,"str"],[10,"AsRef",261],[17,"Item"],[10,"IntoIterator",262],[1,"f32"],[1,"f64"],[5,"LexError",0],[5,"Formatter",263],[8,"Result",263],[5,"TokenStream",264],[5,"Span",264],[6,"Result",265],[10,"Hasher",266],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[5,"IntoIter",243],[1,"isize"],[6,"Option",267],[5,"String",268],[1,"usize"],[10,"RangeBounds",269],[5,"TypeId",270],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"]],"b":[[68,"impl-PartialEq-for-Ident"],[69,"impl-PartialEq%3CT%3E-for-Ident"],[70,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[71,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[77,"impl-Display-for-LexError"],[78,"impl-Debug-for-LexError"],[79,"impl-Display-for-TokenStream"],[80,"impl-Debug-for-TokenStream"],[82,"impl-Debug-for-TokenTree"],[83,"impl-Display-for-TokenTree"],[84,"impl-Display-for-Group"],[85,"impl-Debug-for-Group"],[87,"impl-Display-for-Punct"],[88,"impl-Debug-for-Punct"],[90,"impl-Display-for-Ident"],[91,"impl-Debug-for-Ident"],[92,"impl-Debug-for-Literal"],[93,"impl-Display-for-Literal"],[95,"impl-From%3CTokenTree%3E-for-TokenStream"],[97,"impl-From%3CTokenStream%3E-for-TokenStream"],[100,"impl-From%3CGroup%3E-for-TokenTree"],[101,"impl-From%3CPunct%3E-for-TokenTree"],[103,"impl-From%3CLiteral%3E-for-TokenTree"],[104,"impl-From%3CIdent%3E-for-TokenTree"],[111,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"],[112,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"KKKMMMMMQNNQQNNNNM","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,7,0,6,6,0,0,7,7,6,6,6],"f":[0,0,0,[[1,-1],2,[[4,[3]]]],[[1,-1],2,5],[[1,-1,-2],2,5,6],[[1,-1,-2],2,5,6],[[7,8],9],0,[6,10],[6,10],0,0,[7,[[12,[11]]]],[7,[[12,[11]]]],[6,10],[6,10],[[6,10],2]],"c":[],"p":[[10,"TokenStreamExt",0],[1,"tuple"],[6,"TokenTree",18],[10,"Into",19],[10,"IntoIterator",20],[10,"ToTokens",0],[10,"IdentFragment",0],[5,"Formatter",21],[8,"Result",21],[5,"TokenStream",18],[5,"Span",18],[6,"Option",22]],"b":[]},\
"ryu":{"doc":"github crates-io docs-rs","t":"FKNNNNNNNNNCNNNHH","n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":[[0,"ryu"],[15,"ryu::raw"],[17,"core::result"],[18,"core::any"]],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,-1],2,3],[[1,-1],2,3],[-1,-1,[]],[-1,-2,[],[]],[[],1],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]],[[6,7],8],[[9,7],8]],"c":[],"p":[[5,"Buffer",0],[1,"str"],[10,"Float",0],[6,"Result",17],[5,"TypeId",18],[1,"f32"],[1,"u8"],[1,"usize"],[1,"f64"]],"b":[]},\
"serde":{"doc":"Serde","t":"KYKRRRKYRRRRRRRKNNNCMMMMMMMMMNMMMMMMMMMMMMMMMNMMMMMMQNNCMMMMMMNMMMMMMMMMMMMMMMMNMMMMMMMPPPKKKKRPKKRRRRRKPFKPKPPPPPKPEPPPGPPPRRRKKNNNNNNNNMNMMNMMMMMMMMNMMMMMMMMMMMMMMMNMMMMMMNNNMNMNNNNNNNNNMNNNNNNMNMNNNMNMNNMNNNNNNNMNNMNNCNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFFFFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKRRRRRRRRFRRRRRRRRKKRKRKRKRKRKRKRKENNNNNMMMMMMMMNNNNNNNNNNMMMMMMNNNMMMMMMNNNNNMMMMMNMMMMMMMMMMMMNMMMMMMMMNNNNNN","n":["Deserialize","Deserialize","Deserializer","Error","Error","Ok","Serialize","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":[[0,"serde"],[87,"serde::de"],[265,"serde::de::value"],[1531,"serde::ser"],[1642,"core::result"],[1643,"core::iter::traits::collect"],[1644,"core::fmt"],[1645,"core::marker"],[1646,"core::option"],[1647,"core::fmt"],[1648,"core::any"],[1649,"alloc::vec"],[1650,"core::iter::traits::iterator"],[1651,"core::clone"],[1652,"core::fmt"]],"d":["A <strong>data structure</strong> that can be deserialized from any data …","Derive macro available if serde is built with …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Derive macro available if serde is built with …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,0,27,10,10,0,0,10,10,10,10,10,10,10,0,10,10,10,0,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,27,10,0,20,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,49,49,49,0,0,0,0,57,49,0,0,27,59,60,64,58,0,49,0,0,49,0,49,49,49,49,49,0,49,0,49,49,49,0,49,49,49,51,29,64,0,0,48,49,48,49,48,49,48,49,28,48,26,51,48,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,48,49,29,48,54,54,48,48,49,49,48,49,48,49,57,28,28,28,27,28,58,58,59,59,60,60,60,60,60,60,59,60,58,48,49,49,48,49,48,49,58,48,49,58,28,28,0,64,64,29,48,29,29,29,29,48,29,29,48,29,29,48,29,48,29,29,29,48,29,29,48,29,48,29,48,29,48,29,48,29,48,29,29,48,29,29,29,48,29,29,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,77,77,77,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,74,93,77,66,67,68,69,70,71,72,73,74,77,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,74,93,74,74,74,74,74,93,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,77,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,67,68,69,70,71,95,0,10,13,14,15,16,17,18,19,0,10,13,14,15,16,17,18,19,0,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,0,100,100,10,10,10,12,13,14,15,16,17,18,19,100,100,100,100,100,100,100,100,100,10,20,10,10,10,13,14,100,100,17,10,10,15,16,18,19,100,100,100,100,10,10,10,10,10,17,100,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,17,100,18,19,100,100,100],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-12],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],20,20,[[23,[],[[21,[[22,[-10,-11]]]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],23],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[24,25]],0,[-1,[[11,[26]]],27],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,[31,[30]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,[31,[30]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],32,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,32,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,-2],[[11,[-1]]],28,29],0,[[[27,[],[[2,[-1]]]]],33,28],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],33,[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],0,[[20,-1],11,10],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],33],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[31,[34]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],35],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],36],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],37],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],38],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],39],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],40],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],41],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],42],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[43,[32]]],[[11,[-7,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[43,[32]]],[[11,[-3,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,32],[[11,[-8,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,32],[[11,[-9,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],32],[[11,[-4,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,32],[[11,[-5,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,32],[[11,[-6,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],45],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],46],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],44],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],47],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],34],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[49,49],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[-1,28,24],[[],48],[-1,[[11,[26]]],27],[[[51,[],[[50,[-1]]]],-2],[[11,[-1]]],[],27],[-1,[[11,[48]]],27],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,[31,[30]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,[31,[30]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],32,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,32,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,-2],[[11,[-1]]],28,29],[30,28],[[48,48],33],[[49,49],33],[[[29,[],[[50,[-1]]]],52],53,[]],[[48,52],53],[[54,52],53],[[54,52],53],[[48,52],53],[[-1,52],[[11,[22,55]]],[]],[[49,52],53],[[49,52],53],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[57,[],[[56,[-1]]]]],-1,[[27,[],[[2,[-2]]]]],28],[[32,54],28],[[49,54],28],[[49,54],28],[[[27,[],[[2,[-1]]]]],33,28],[30,28],[[[58,[],[[2,[-1]]]]],[[11,[-2,-1]]],28,26],[[[58,[],[[2,[-1]]]],-2],[[11,[-1]]],28,51],[[[59,[],[[2,[-1]]]]],[[11,[[43,[-2]],-1]]],28,26],[[[59,[],[[2,[-1]]]],-2],[[11,[43,-1]]],28,51],[[[60,[],[[2,[-1]]]]],[[11,[[43,[[22,[-2,-3]]]],-1]]],28,26,26],[[[60,[],[[2,[-1]]]],-2,-3],[[11,[[43,[22]],-1]]],28,51,51],[[[60,[],[[2,[-1]]]]],[[11,[[43,[-2]],-1]]],28,26],[[[60,[],[[2,[-1]]]],-2],[[11,[43,-1]]],28,51],[[[60,[],[[2,[-1]]]]],[[11,[-2,-1]]],28,26],[[[60,[],[[2,[-1]]]],-2],[[11,[-1]]],28,51],[[[59,[],[[2,[-1]]]]],[[43,[32]]],28],[[[60,[],[[2,[-1]]]]],[[43,[32]]],28],[[[58,[],[[2,[-1]]]],[31,[30]],-2],[[11,[-1]]],28,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,61,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[58,[],[[2,[-1]]]],32,-2],[[11,[-1]]],28,29],[-1,62,[]],[-1,62,[]],[[[58,[],[[2,[-1]]]]],[[11,[22,-1]]],28],[[30,[31,[30]]],28],[[30,[31,[30]]],28],0,[[[64,[],[[2,[-1]],[63,[-2]]]]],[[11,[[22,[-3,-2]],-1]]],28,[[58,[],[[2,[-1]]]]],26],[[[64,[],[[2,[-1]],[63,[-2]]]],-3],[[11,[[22,[-2]],-1]]],28,[[58,[],[[2,[-1]]]]],51],[[[29,[],[[50,[-1]]]],33],[[11,[-1,-2]]],[],28],[[48,33],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],[31,[34]]],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],30],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],[65,[34]]],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],[31,[34]]],[[11,[-1,-2]]],[],28],[[48,[31,[34]]],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],35],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],64],[[48,-1],[[11,[-2]]],64,[]],[[[29,[],[[50,[-1]]]],36],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],37],[[11,[-1,-2]]],[],28],[[48,37],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],38],[[11,[-1,-2]]],[],28],[[48,38],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],39],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],40],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],41],[[11,[-1,-2]]],[],28],[[48,41],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],42],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],60],[[48,-1],[[11,[-2]]],60,[]],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],27],[[48,-1],[[11,[-2]]],27,[]],[[[29,[],[[50,[-1]]]]],[[11,[-1,-2]]],[],28],[48,[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],59],[[48,-1],[[11,[-2]]],59,[]],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],27],[[48,-1],[[11,[-2]]],27,[]],[[[29,[],[[50,[-1]]]],30],[[11,[-1,-2]]],[],28],[[48,30],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],61],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],45],[[11,[-1,-2]]],[],28],[[48,45],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],46],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],44],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],47],[[11,[-1,-2]]],[],28],[[48,47],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],34],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]]],[[11,[-1,-2]]],[],28],[48,[[11,[-1,-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[-1]]],[[66,[-1]]],[]],[[[67,[-1]]],[[67,[-1]]],[]],[[[68,[-1]]],[[68,[-1]]],[]],[[[69,[-1]]],[[69,[-1]]],[]],[[[70,[-1]]],[[70,[-1]]],[]],[[[71,[-1]]],[[71,[-1]]],[]],[[[72,[-1]]],[[72,[-1]]],[]],[[[73,[-1]]],[[73,[-1]]],[]],[[[74,[-1,-2]]],[[74,[-1,-2]]],[75,76],[]],[77,77],[[[78,[-1]]],[[78,[-1]]],[]],[[[79,[-1]]],[[79,[-1]]],[]],[[[80,[-1]]],[[80,[-1]]],[]],[[[81,[-1]]],[[81,[-1]]],[]],[[[82,[-1]]],[[82,[-1]]],[]],[[[83,[-1]]],[[83,[-1]]],[]],[[[84,[-1]]],[[84,[-1]]],[]],[[[85,[-1]]],[[85,[-1]]],[]],[[[86,[-1]]],[[86,[-1]]],[]],[[[87,[-1]]],[[87,[-1]]],[]],[[[88,[-1]]],[[88,[-1]]],[]],[[[89,[-1]]],[[89,[-1]]],[]],[[[90,[-1]]],[[90,[-1]]],[]],[[[91,[-1]]],[[91,[-1]]],[]],[[[92,[-1]]],[[92,[-1]]],[]],[[[93,[-1,-2]]],[[93,[-1,-2]]],76,76],[[[94,[-1]]],[[94,[-1]]],76],[[[95,[-1]]],[[95,[-1]]],76],[[[96,[-1]]],[[96,[-1]]],76],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[-1,77,24],[-1,77,24],[77,30],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,[31,[30]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,[31,[30]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,[31,[30]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,[31,[30]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,[31,[30]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,[31,[30]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,[31,[30]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,[31,[30]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,[31,[30]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,[31,[30]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],32,-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],32,-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],32,-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],32,-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],32,-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,32,-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,32,-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,32,-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,32,-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,32,-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,-2],[[11,[-3]]],64,29,[]],[[[74,[-1,-2]]],[[11,[22,-2]]],75,28],[[[93,[-1,-2]]],[[11,[22,-2]]],75,28],[[77,77],33],[[[66,[-1]],52],53,[]],[[[67,[-1]],52],53,[]],[[[68,[-1]],52],53,[]],[[[69,[-1]],52],53,[]],[[[70,[-1]],52],53,[]],[[[71,[-1]],52],53,[]],[[[72,[-1]],52],53,[]],[[[73,[-1]],52],53,[]],[[[74,[-1,-2]],52],53,[75,97],[]],[[77,52],53],[[77,52],53],[[[78,[-1]],52],53,[]],[[[79,[-1]],52],53,[]],[[[80,[-1]],52],53,[]],[[[81,[-1]],52],53,[]],[[[82,[-1]],52],53,[]],[[[83,[-1]],52],53,[]],[[[84,[-1]],52],53,[]],[[[85,[-1]],52],53,[]],[[[86,[-1]],52],53,[]],[[[87,[-1]],52],53,[]],[[[88,[-1]],52],53,[]],[[[89,[-1]],52],53,[]],[[[90,[-1]],52],53,[]],[[[91,[-1]],52],53,[]],[[[92,[-1]],52],53,[]],[[[93,[-1,-2]],52],53,97,[]],[[[94,[-1]],52],53,97],[[[95,[-1]],52],53,97],[[[96,[-1]],52],53,97],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[66,[-1]]],[]],[44,[[67,[-1]]],[]],[30,[[68,[-1]]],[]],[30,[[69,[-1]]],[]],[61,[[70,[-1]]],[]],[[[98,[30]]],[[71,[-1]]],[]],[[[31,[34]]],[[72,[-1]]],[]],[[[31,[34]]],[[73,[-1]]],[]],[-1,[[74,[-1,-2]]],75,[]],[33,[[78,[-1]]],[]],[42,[[79,[-1]]],[]],[39,[[80,[-1]]],[]],[40,[[81,[-1]]],[]],[41,[[82,[-1]]],[]],[38,[[83,[-1]]],[]],[99,[[84,[-1]]],[]],[34,[[85,[-1]]],[]],[46,[[86,[-1]]],[]],[47,[[87,[-1]]],[]],[45,[[88,[-1]]],[]],[32,[[89,[-1]]],[]],[36,[[90,[-1]]],[]],[37,[[91,[-1]]],[]],[35,[[92,[-1]]],[]],[-1,[[93,[-1,-2]]],75,[]],[-1,[[94,[-1]]],[]],[-1,[[95,[-1]]],[]],[-1,[[96,[-1]]],[]],[[[74,[-1,-2]],-3],[[11,[43,-4]]],75,28,51,[]],[[[93,[-3,-1]],-4],[[11,[43,-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],51,[]],[[[74,[-1,-2]],-3,-4],[[11,[[43,[22]],-5]]],75,28,51,51,[]],[[[74,[-1,-2]],-3],[[11,[43,-4]]],75,28,51,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,51,[]],[[[74,[-1,-2]]],[[43,[32]]],75,28],[[[74,[-1,-2]]],[[43,[32]]],75,28],[[[93,[-3,-1]]],[[43,[32]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,61,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[[[67,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[68,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[69,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[70,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[71,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[95,[-1]],-2],[[11,[[22,[-3]],-4]]],60,51,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-12],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],20,20,[[23,[],[[21,[[22,[-10,-11]]]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],23],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[24,25]],[-1,12,24],[[[13,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[14,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[15,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[16,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[17,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[18,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[19,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[-1,-1,[]],[-1,-2,[],[]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],33,[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[20,-1],11,10],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],33],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[31,[34]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],35],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[13,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[14,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[17,[],[[1,[-1]],[2,[-2]]]],-3,-4],[[11,[22,-2]]],[],12,[20,25],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],36],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],37],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[15,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[16,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[18,[],[[1,[-1]],[2,[-2]]]],30,-3],[[11,[22,-2]]],[],12,[20,25]],[[[19,[],[[1,[-1]],[2,[-2]]]],30,-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],30,-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],30,-3],[[11,[22,-2]]],[],12,[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],38],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],39],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],40],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],41],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],42],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[17,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[43,[32]]],[[11,[-7,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[43,[32]]],[[11,[-3,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,32],[[11,[-8,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,32],[[11,[-9,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],32],[[11,[-4,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,32],[[11,[-5,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,32],[[11,[-6,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],45],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],46],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],44],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],47],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],34],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[17,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[18,[],[[1,[-1]],[2,[-2]]]],30],[[11,[22,-2]]],[],12],[[[19,[],[[1,[-1]],[2,[-2]]]],30],[[11,[22,-2]]],[],12],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,62,[]]],"c":[],"p":[[17,"Ok"],[17,"Error"],[17,"SerializeSeq"],[17,"SerializeTuple"],[17,"SerializeTupleStruct"],[17,"SerializeTupleVariant"],[17,"SerializeMap"],[17,"SerializeStruct"],[17,"SerializeStructVariant"],[10,"Serializer",0],[6,"Result",1642],[10,"Error",1531],[10,"SerializeSeq",1531],[10,"SerializeTuple",1531],[10,"SerializeTupleStruct",1531],[10,"SerializeTupleVariant",1531],[10,"SerializeMap",1531],[10,"SerializeStruct",1531],[10,"SerializeStructVariant",1531],[10,"Serialize",0],[17,"Item"],[1,"tuple"],[10,"IntoIterator",1643],[10,"Display",1644],[10,"Sized",1645],[10,"Deserialize",0],[10,"Deserializer",0],[10,"Error",87],[10,"Visitor",87],[1,"str"],[1,"slice"],[1,"usize"],[1,"bool"],[1,"u8"],[1,"char"],[1,"f32"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[6,"Option",1646],[1,"u32"],[1,"u128"],[1,"u16"],[1,"u64"],[5,"IgnoredAny",87],[6,"Unexpected",87],[17,"Value"],[10,"DeserializeSeed",87],[5,"Formatter",1644],[8,"Result",1644],[10,"Expected",87],[5,"Error",1644],[17,"Deserializer"],[10,"IntoDeserializer",87],[10,"VariantAccess",87],[10,"SeqAccess",87],[10,"MapAccess",87],[5,"String",1647],[5,"TypeId",1648],[17,"Variant"],[10,"EnumAccess",87],[5,"Vec",1649],[5,"UnitDeserializer",265],[5,"U32Deserializer",265],[5,"StrDeserializer",265],[5,"BorrowedStrDeserializer",265],[5,"StringDeserializer",265],[5,"CowStrDeserializer",265],[5,"BytesDeserializer",265],[5,"BorrowedBytesDeserializer",265],[5,"MapDeserializer",265],[10,"Iterator",1650],[10,"Clone",1651],[5,"Error",265],[5,"BoolDeserializer",265],[5,"I8Deserializer",265],[5,"I16Deserializer",265],[5,"I32Deserializer",265],[5,"I64Deserializer",265],[5,"I128Deserializer",265],[5,"IsizeDeserializer",265],[5,"U8Deserializer",265],[5,"U16Deserializer",265],[5,"U64Deserializer",265],[5,"U128Deserializer",265],[5,"UsizeDeserializer",265],[5,"F32Deserializer",265],[5,"F64Deserializer",265],[5,"CharDeserializer",265],[5,"SeqDeserializer",265],[5,"SeqAccessDeserializer",265],[5,"MapAccessDeserializer",265],[5,"EnumAccessDeserializer",265],[10,"Debug",1644],[6,"Cow",1652],[1,"isize"],[5,"Impossible",1531]],"b":[[182,"impl-Debug-for-Unexpected%3C\'a%3E"],[183,"impl-Display-for-Unexpected%3C\'a%3E"],[410,"impl-Error-for-Error"],[411,"impl-Error-for-Error"],[1293,"impl-Debug-for-Error"],[1294,"impl-Display-for-Error"],[1405,"impl-MapAccess%3C\'de%3E-for-MapDeserializer%3C\'de,+I,+E%3E"],[1406,"impl-SeqAccess%3C\'de%3E-for-MapDeserializer%3C\'de,+I,+E%3E"],[1579,"impl-SerializeSeq-for-Impossible%3COk,+Error%3E"],[1580,"impl-SerializeMap-for-Impossible%3COk,+Error%3E"],[1581,"impl-SerializeTupleVariant-for-Impossible%3COk,+Error%3E"],[1582,"impl-SerializeStructVariant-for-Impossible%3COk,+Error%3E"],[1583,"impl-SerializeTupleStruct-for-Impossible%3COk,+Error%3E"],[1584,"impl-SerializeStruct-for-Impossible%3COk,+Error%3E"],[1585,"impl-SerializeTuple-for-Impossible%3COk,+Error%3E"],[1595,"impl-SerializeSeq-for-Impossible%3COk,+Error%3E"],[1596,"impl-SerializeTuple-for-Impossible%3COk,+Error%3E"],[1604,"impl-SerializeTupleStruct-for-Impossible%3COk,+Error%3E"],[1605,"impl-SerializeTupleVariant-for-Impossible%3COk,+Error%3E"],[1606,"impl-SerializeStructVariant-for-Impossible%3COk,+Error%3E"],[1607,"impl-SerializeStruct-for-Impossible%3COk,+Error%3E"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":"YY","n":["Deserialize","Serialize"],"q":[[0,"serde_derive"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[],"b":[]},\
"serde_json":{"doc":"Serde JSON","t":"PPFPFFPFPPPIFFPGNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNHNNNNNNNNNNNNNNNNNQCNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNHHHHHHNNNNNNNNNNNNNNNNNNCFFKFFFNNNNNNNNNNNHNHNHNNNNNNNNNNNNNNNNNNNGPPPFPPIPNNNNNNNNNNNNNNNNNNNNGFFFFFPFPFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPGFPKPFPPFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPKEPFPPFPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNN","n":["Array","Bool","Deserializer","Err","Error","Map","Null","Number","Number","Object","Ok","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_from","clone_into","clone_into","collect_str","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_deserializer","into_deserializer","into_iter","into_iter","into_iter","into_iter","invalid_type","json","map","next","ser","serialize","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","source","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","into","into","into","into_iter","new","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Err","Error","Io","Ok","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","fmt","from","into","io_error_kind","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_byte_array","write_char_escape","write_f32","write_f64","write_i128","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u128","write_u16","write_u32","write_u64","write_u8","Array","Bool","Index","Map","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_number","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","hash","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"serde_json"],[305,"serde_json::de"],[346,"serde_json::error"],[375,"serde_json::map"],[512,"serde_json::ser"],[608,"serde_json::value"],[781,"alloc::string"],[782,"std::io"],[783,"core::marker"],[784,"core::fmt"],[785,"core::result"],[786,"serde::de"],[787,"serde::de"],[788,"core::fmt"],[789,"core::convert"],[790,"alloc::vec"],[791,"core::option"],[792,"alloc::borrow"],[793,"std::io"],[794,"core::cmp"],[795,"serde::de"],[796,"serde::ser"],[797,"core::any"],[798,"std::io::error"],[799,"core::ops::function"],[800,"core::ops::function"]],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","Contains the error value","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Contains the success value","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","Parses a JSON string as bytes. Note that this function …","","","","","","Parses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a newtype struct as the underlying value.","","","Parses a <code>null</code> as a None, and any other values as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a slice to <code>Value::Array</code>.","","Returns the argument unchanged.","","","Convert map (with string keys) to <code>Value::Object</code>.","","Convert a <code>Vec</code> to <code>Value::Array</code>.","","","","","Convert <code>()</code> to <code>Value::Null</code>.","","Convert boolean to <code>Value::Bool</code>.","Convert <code>String</code> to <code>Value::String</code>.","","Convert string slice to <code>Value::String</code>.","Convert <code>Number</code> to <code>Value::Number</code>.","Convert 64-bit floating point number to <code>Value::Number</code>, or …","","Convert copy-on-write string to <code>Value::String</code>.","Convert 32-bit floating point number to <code>Value::Number</code>, or …","","Create a <code>Value::Array</code> by collecting an iterator of array …","Create a <code>Value::Object</code> by collecting an iterator of …","Deserialize an instance of type <code>T</code> from an I/O stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","Serialize a Rust data structure into JSON data.","","","","","","","","","","","","","","Serialize newtypes without an object wrapper.","","","","","","","","","","","","","","","","","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the I/O …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an instance of type <code>T</code> from an I/O stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","Contains the error value","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Contains the success value","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The kind reported by the underlying standard library I/O …","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns the key-value pair matching the given key.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as <code>\\\\r</code>…","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it human …","An escaped quote <code>&quot;</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written to","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the I/O …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written to …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes the representation of a byte array. Formatters can …","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a string.","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is a Number, returns the associated <code>Number</code>. …","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","",""],"i":[2,2,0,6,0,0,2,0,2,2,6,0,0,0,2,0,14,52,11,3,5,2,14,52,11,3,5,2,3,2,3,3,2,5,11,11,0,3,2,3,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,11,11,3,2,2,14,52,11,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,0,0,0,2,0,3,2,3,2,14,52,11,3,5,2,2,2,52,3,3,3,11,0,0,52,0,3,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,3,2,0,11,2,0,0,0,0,0,0,14,52,11,3,5,2,14,52,11,3,5,2,14,52,11,3,5,2,0,0,0,0,0,0,0,60,61,62,60,61,62,52,14,60,61,62,0,14,0,14,0,14,60,61,62,14,14,52,60,61,62,60,61,62,60,61,62,60,61,62,0,63,63,6,0,63,6,0,63,63,63,11,63,63,11,63,63,63,63,11,11,11,11,11,11,63,63,63,63,0,0,0,0,0,0,65,0,65,0,0,0,65,3,65,68,67,69,70,72,71,73,74,65,68,67,69,70,72,71,73,74,3,3,3,65,68,67,69,70,72,71,73,74,3,67,3,3,67,3,68,67,65,68,67,69,70,72,71,73,74,69,70,72,71,73,74,67,3,3,3,65,68,67,3,3,69,70,72,71,73,74,3,69,70,72,71,73,74,69,70,72,71,73,74,65,65,3,67,3,3,69,70,72,71,73,74,65,68,67,69,70,72,71,73,74,65,68,67,69,70,72,71,73,74,65,68,67,69,70,72,71,73,74,3,3,3,80,80,80,0,0,80,0,80,0,80,80,0,80,80,8,78,8,78,8,78,8,78,8,78,8,80,79,78,80,79,78,79,78,79,78,78,8,78,8,78,8,78,8,8,78,8,79,78,80,79,78,80,79,78,5,5,78,5,79,78,0,0,0,0,0,0,80,79,78,80,79,78,80,79,78,5,78,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,2,0,0,2,0,2,2,0,2,0,2,2,2,2,41,2,41,2,2,2,2,2,2,41,81,41,81,41,41,41,81,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,81,41,41,41,41,41,41,41,41,41,41,41,41,41,0,2,2,41,81,41,2,2,2,41,2,41,2,2,2,2,2,41,2,2,41,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,2,41,41,0,81,41,81,41,81,41],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[1,2]]],[[3,[1,2]]]],[2,2],[[[3,[1,2]],[3,[1,2]]],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[5,[-1,-2]],-3],[[6,[4]]],7,8,[9,10]],[-1,11,10],[-1,11,10],0,[[],[[3,[1,2]]]],[[],2],[-1,[[12,[[3,[1,2]]]]],13],[-1,[[12,[2]]],13],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,[18,[17]],-2],6,15,16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,-2],6,15,16],[[2,17,-1],[[12,[11]]],16],[[2,17,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,[18,[17]],-2],6,15,16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[[14,[-1]],19,-2],6,15,16],[[2,19,-1],[[12,[11]]],16],[[2,19,-1],[[12,[11]]],16],[[[14,[-1]],17,19,-2],6,15,16],[[2,17,19,-1],[[12,[11]]],16],[[2,17,19,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,-2],6,15,16],[[2,17,-1],[[12,[11]]],16],[[2,17,-1],[[12,[11]]],16],[[[3,[1,2]],[3,[1,2]]],20],[[2,21],20],[[2,22],20],[[2,23],20],[[2,19],20],[[2,24],20],[[2,22],20],[[2,25],20],[[2,26],20],[[2,20],20],[[2,23],20],[[2,21],20],[[2,27],20],[[2,28],20],[[2,25],20],[[2,19],20],[[2,29],20],[[2,24],20],[[2,17],20],[[2,27],20],[[2,30],20],[[2,30],20],[[2,26],20],[[2,22],20],[[2,28],20],[[2,26],20],[[2,19],20],[[2,21],20],[[2,1],20],[[2,20],20],[[2,27],20],[[2,23],20],[[2,30],20],[[2,2],20],[[2,31],20],[[2,29],20],[[2,17],20],[[2,20],20],[[2,25],20],[[2,31],20],[[2,24],20],[[2,31],20],[[2,28],20],[[2,29],20],0,[[[3,[1,2]],-1],4,[[33,[],[[32,[[4,[1,2]]]]]]]],[[11,34],35],[[11,34],35],[[[3,[1,2]],34],[[12,[4,36]]]],[[2,34],35],[[2,34],35],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[18,[-1]]],2,[37,[38,[2]]]],[22,2],[-1,-1,[]],[28,2],[23,2],[[[3,[1,2]]],2],[21,2],[[[39,[-1]]],2,[[38,[2]]]],[[[40,[-1]]],2,[[38,[2]]]],[29,2],[25,2],[31,2],[4,2],[30,2],[20,2],[1,2],[19,2],[17,2],[41,2],[24,2],[27,2],[[[42,[17]]],2],[26,2],[-1,[[3,[1,2]]],[[33,[],[[32,[[4,[1,2]]]]]]]],[-2,2,[[38,[2]]],[[33,[],[[32,[-1]]]]]],[-3,2,[[38,[1]]],[[38,[2]]],[[33,[],[[32,[[4,[-1,-2]]]]]]]],[-1,[[6,[-2]]],43,44],[[[18,[31]]],[[6,[-1]]],45],[17,[[6,[-1]]],45],[17,[[12,[2,11]]]],[2,[[12,[-1,11]]],44],[[[3,[1,2]],-1],2,[9,46,47,48]],[[2,-1],2,49],[[[3,[1,2]],-1],2,[9,46,47,48]],[[2,-1],2,49],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,-1,[]],[2,-1,[]],[-1,-2,[],[]],[[[3,[1,2]]],-1,[]],[[[3,[1,2]]],-1,[]],[[[3,[1,2]]],-1,[]],[[50,51],11],0,0,[[[52,[-1,-2]]],[[40,[[6,[-2]]]]],15,45],0,[[[3,[1,2]],-1],12,53],[[2,-1],12,53],[[[5,[-1,-2]],20],[[6,[4]]],7,8],[[[5,[-1,-2]],[18,[31]]],[[6,[4]]],7,8],[[[5,[-1,-2]],54],[[6,[4]]],7,8],[[[5,[-1,-2]],26],[[6,[4]]],7,8],[[[5,[-1,-2]],24],[[6,[4]]],7,8],[[[5,[-1,-2]],55],[[6,[4]]],7,8],[[[5,[-1,-2]],23],[[6,[4]]],7,8],[[[5,[-1,-2]],21],[[6,[4]]],7,8],[[[5,[-1,-2]],27],[[6,[4]]],7,8],[[[5,[-1,-2]],29],[[6,[4]]],7,8],[[[5,[-1,-2]],[40,[19]]],[[6,[-3]]],7,8,[]],[[[5,[-1,-2]],17,-3],[[6,[4]]],7,8,[9,56]],[[[5,[-1,-2]],17,22,17,-3],[[6,[4]]],7,8,[9,56]],[[[5,[-1,-2]]],[[6,[4]]],7,8],[[[5,[-1,-2]],[40,[19]]],[[6,[-3]]],7,8,[]],[[[5,[-1,-2]],-3],[[6,[4]]],7,8,[9,56]],[[[5,[-1,-2]],17],[[6,[4]]],7,8],[[[5,[-1,-2]],17,19],[[6,[-3]]],7,8,[]],[[[5,[-1,-2]],17,22,17,19],[[6,[-3]]],7,8,[]],[[[5,[-1,-2]],19],[[6,[-3]]],7,8,[]],[[[5,[-1,-2]],17,19],[[6,[-3]]],7,8,[]],[[[5,[-1,-2]],17,22,17,19],[[6,[-3]]],7,8,[]],[[[5,[-1,-2]],57],[[6,[4]]],7,8],[[[5,[-1,-2]],25],[[6,[4]]],7,8],[[[5,[-1,-2]],22],[[6,[4]]],7,8],[[[5,[-1,-2]],30],[[6,[4]]],7,8],[[[5,[-1,-2]],31],[[6,[4]]],7,8],[[[5,[-1,-2]]],[[6,[4]]],7,8],[[[5,[-1,-2]],17],[[6,[4]]],7,8],[[[5,[-1,-2]],17,22,17],[[6,[4]]],7,8],[11,[[40,[58]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[1]]],[9,56]],[-1,1,[]],[-1,1,[]],[-1,[[6,[1]]],[9,56]],[-1,[[12,[2,11]]],56],[-1,[[6,[[39,[31]]]]],[9,56]],[-1,[[6,[[39,[31]]]]],[9,56]],[[-1,-2],[[6,[4]]],7,[9,56]],[[-1,-2],[[6,[4]]],7,[9,56]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1,-2]]],19,15,45],[[[14,[-1]]],[[6,[4]]],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2]]],43,44],[-1,[[14,[[60,[-1]]]]],43],[[[18,[31]]],[[6,[-1]]],45],[[[18,[31]]],[[14,[61]]]],[17,[[6,[-1]]],45],[17,[[14,[62]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[52,[-1,-2]]],15,45],[-1,[[14,[-1]]],15],[-1,[[52,[-1,-2]]],15,45],[-1,[[60,[-1]]],43],[[[18,[31]]],61],[17,62],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,63],[63,63],[[-1,-2],4,[],[]],[11,19],[[63,63],20],[[63,34],35],[-1,-1,[]],[-1,-2,[],[]],[11,[[40,[64]]]],[11,20],[11,20],[11,20],[11,20],[11,19],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,59,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[65,-1],65,[[66,[2]]]],[[[3,[1,2]],[3,[1,2]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[1,2]]],4],[[[3,[1,2]],-1],20,[9,46,47,48]],[[[3,[1,2]],-1],65,[[38,[1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[1,2]],-1],[[40,[2]]],[9,46,47,48]],[67,2],[[[3,[1,2]],-1],[[40,[[4,[1,2]]]]],[9,46,47,48]],[[[3,[1,2]],-1],[[40,[2]]],[9,46,47,48]],[67,2],[[[3,[1,2]],1,2],[[40,[2]]]],[[68,2],2],[[67,2],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[67,2],[[[3,[1,2]]],20],[[[3,[1,2]]],69],[[[3,[1,2]]],70],[65,1],[68,1],[67,1],[[[3,[1,2]]],71],[[[3,[1,2]]],19],[69,19],[70,19],[72,19],[71,19],[73,19],[74,19],[[],[[3,[1,2]]]],[69,[[40,[-1]]],[]],[70,[[40,[-1]]],[]],[72,[[40,[-1]]],[]],[71,[[40,[-1]]],[]],[73,[[40,[-1]]],[]],[74,[[40,[-1]]],[]],[69,[[40,[-1]]],[]],[70,[[40,[-1]]],[]],[72,[[40,[-1]]],[]],[71,[[40,[-1]]],[]],[73,[[40,[-1]]],[]],[74,[[40,[-1]]],[]],[[65,2],2],[[65,-1],2,[[66,[],[[75,[2]]]]]],[[[3,[1,2]],-1],[[40,[2]]],[9,46,47,48]],[67,2],[[[3,[1,2]],-1],[[40,[[4,[1,2]]]]],[9,46,47,48]],[[[3,[1,2]],-1],4,[[76,[1,2],[[75,[20]]]]]],[69,[[4,[19,[40,[19]]]]]],[70,[[4,[19,[40,[19]]]]]],[72,[[4,[19,[40,[19]]]]]],[71,[[4,[19,[40,[19]]]]]],[73,[[4,[19,[40,[19]]]]]],[74,[[4,[19,[40,[19]]]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[[[3,[1,2]]],73],[[[3,[1,2]]],74],[19,[[3,[1,2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[8,-1],[[77,[4]]],[9,7]],[[78,-1],[[77,[4]]],[9,7]],[[8,-1,20],[[77,[4]]],[9,7]],[[78,-1,20],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[[78,-1],[[77,[4]]],[9,7]],[[8,-1,20],[[77,[4]]],[9,7]],[[78,-1,20],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[[78,-1],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,79],[78,78],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],78],[[8,-1],[[77,[4]]],[9,7]],[[78,-1],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[[78,-1],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[[78,-1],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[[78,-1],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[[79,34],35],[[78,34],35],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1,-2]]],-1,7,8],[-1,[[5,[-1]]],7],[[],78],[-1,[[5,[-1,78]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[1]]],[9,56]],[-1,[[6,[1]]],[9,56]],[-1,[[6,[[39,[31]]]]],[9,56]],[-1,[[6,[[39,[31]]]]],[9,56]],[[-1,-2],[[6,[4]]],7,[9,56]],[[-1,-2],[[6,[4]]],7,[9,56]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[[-1,-2],[[5,[-1,-2]]],7,8],[[[18,[31]]],78],[[8,-1,20],[[77,[4]]],[9,7]],[[8,-1,[18,[31]]],[[77,[4]]],[9,7]],[[8,-1,80],[[77,[4]]],[9,7]],[[8,-1,26],[[77,[4]]],[9,7]],[[8,-1,24],[[77,[4]]],[9,7]],[[8,-1,55],[[77,[4]]],[9,7]],[[8,-1,23],[[77,[4]]],[9,7]],[[8,-1,21],[[77,[4]]],[9,7]],[[8,-1,27],[[77,[4]]],[9,7]],[[8,-1,29],[[77,[4]]],[9,7]],[[8,-1],[[77,[4]]],[9,7]],[[8,-1,17],[[77,[4]]],[9,7]],[[8,-1,17],[[77,[4]]],[9,7]],[[8,-1,17],[[77,[4]]],[9,7]],[[8,-1,57],[[77,[4]]],[9,7]],[[8,-1,25],[[77,[4]]],[9,7]],[[8,-1,22],[[77,[4]]],[9,7]],[[8,-1,30],[[77,[4]]],[9,7]],[[8,-1,31],[[77,[4]]],[9,7]],0,0,0,0,0,0,0,0,0,0,0,[2,[[40,[[39,[2]]]]]],[2,[[40,[[39,[2]]]]]],[2,[[40,[20]]]],[2,[[40,[24]]]],[41,[[40,[24]]]],[2,[[40,[27]]]],[41,[[40,[27]]]],[2,[[40,[4]]]],[2,[[40,[41]]]],[2,[[40,[[3,[1,2]]]]]],[2,[[40,[[3,[1,2]]]]]],[2,[[40,[17]]]],[2,[[40,[30]]]],[41,[[40,[30]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[[-1,-2],4,[],[]],[[81,-1],[[6,[2]]],[9,10]],[-1,[[12,[41]]],13],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,17,[18,[17]],-1],[[12,[-2]]],16,[]],[[41,17,[18,[17]],-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,17,-1],[[12,[-2]]],16,[]],[[41,17,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,17,[18,[17]],-1],[[12,[-2]]],16,[]],[[41,17,[18,[17]],-1],[[12,[-2]]],16,[]],[[41,19,-1],[[12,[-2]]],16,[]],[[41,19,-1],[[12,[-2]]],16,[]],[[41,17,19,-1],[[12,[-2]]],16,[]],[[41,17,19,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[11]]],16],[[41,-1],[[12,[-2]]],16,[]],[[41,-1],[[12,[-2]]],16,[]],[[41,17,-1],[[12,[-2]]],16,[]],[[41,17,-1],[[12,[-2]]],16,[]],[[41,41],20],[[41,34],35],[[41,34],35],[-1,-1,[]],[28,41],[-1,-1,[]],[23,41],[25,41],[30,41],[21,41],[22,41],[31,41],[27,41],[29,41],[19,41],[24,[[40,[41]]]],[17,[[12,[41,-1]]],[]],[2,[[12,[-1,11]]],44],[[2,-1],[[40,[2]]],49],[[2,-1],[[40,[2]]],49],[[41,-1],4,82],[-1,-2,[],[]],[-1,-2,[],[]],[2,20],[2,20],[2,20],[41,20],[2,20],[41,20],[2,20],[2,20],[2,20],[2,20],[2,20],[41,20],[[2,17],[[40,[2]]]],[[2,17],[[40,[2]]]],[[41,-1],12,53],[[81,20],[[6,[2]]]],[[81,[18,[31]]],[[6,[2]]]],[[81,54],[[6,[2]]]],[[81,26],[[6,[2]]]],[[81,24],[[6,[2]]]],[[81,55],[[6,[2]]]],[[81,23],[[6,[2]]]],[[81,21],[[6,[2]]]],[[81,27],[[6,[2]]]],[[81,29],[[6,[2]]]],[[81,[40,[19]]],[[6,[-1]]],[]],[[81,17,-1],[[6,[2]]],[9,56]],[[81,17,22,17,-1],[[6,[2]]],[9,56]],[81,[[6,[2]]]],[[81,[40,[19]]],[[6,[-1]]],[]],[[81,-1],[[6,[2]]],[9,56]],[[81,17],[[6,[2]]]],[[81,17,19],[[6,[-1]]],[]],[[81,17,22,17,19],[[6,[-1]]],[]],[[81,19],[[6,[-1]]],[]],[[81,17,19],[[6,[-1]]],[]],[[81,17,22,17,19],[[6,[-1]]],[]],[[81,57],[[6,[2]]]],[[81,25],[[6,[2]]]],[[81,22],[[6,[2]]]],[[81,30],[[6,[2]]]],[[81,31],[[6,[2]]]],[81,[[6,[2]]]],[[81,17],[[6,[2]]]],[[81,17,22,17],[[6,[2]]]],[2,2],[-1,-2,[],[]],[-1,1,[]],[-1,[[12,[2,11]]],56],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,59,[]],[-1,59,[]]],"c":[],"p":[[5,"String",781],[6,"Value",0],[5,"Map",0],[1,"tuple"],[5,"Serializer",0],[8,"Result",0],[10,"Write",782],[10,"Formatter",512],[10,"Sized",783],[10,"Display",784],[5,"Error",0],[6,"Result",785],[10,"Deserializer",786],[5,"Deserializer",0],[10,"Read",305],[10,"Visitor",786],[1,"str"],[1,"slice"],[1,"usize"],[1,"bool"],[1,"i32"],[1,"u32"],[1,"i16"],[1,"f64"],[1,"u16"],[1,"f32"],[1,"i64"],[1,"isize"],[1,"i8"],[1,"u64"],[1,"u8"],[17,"Item"],[10,"IntoIterator",787],[5,"Formatter",784],[8,"Result",784],[5,"Error",784],[10,"Clone",788],[10,"Into",789],[5,"Vec",790],[6,"Option",791],[5,"Number",608],[6,"Cow",792],[10,"Read",782],[10,"DeserializeOwned",786],[10,"Deserialize",786],[10,"Ord",793],[10,"Eq",793],[10,"Hash",794],[10,"Index",608],[6,"Unexpected",786],[10,"Expected",786],[5,"StreamDeserializer",0],[10,"Serializer",795],[1,"char"],[1,"i128"],[10,"Serialize",795],[1,"u128"],[10,"Error",796],[5,"TypeId",797],[5,"IoRead",305],[5,"SliceRead",305],[5,"StrRead",305],[6,"Category",346],[6,"ErrorKind",798],[6,"Entry",375],[10,"FnOnce",799],[5,"OccupiedEntry",375],[5,"VacantEntry",375],[5,"Iter",375],[5,"IterMut",375],[5,"Keys",375],[5,"IntoIter",375],[5,"Values",375],[5,"ValuesMut",375],[17,"Output"],[10,"FnMut",799],[8,"Result",798],[5,"PrettyFormatter",512],[5,"CompactFormatter",512],[6,"CharEscape",512],[5,"Serializer",608],[10,"Hasher",794]],"b":[[34,"impl-Error-for-Error"],[35,"impl-Error-for-Error"],[42,"impl-Deserializer%3C\'de%3E-for-Value"],[43,"impl-Deserializer%3C\'de%3E-for-%26Value"],[45,"impl-Deserializer%3C\'de%3E-for-Value"],[46,"impl-Deserializer%3C\'de%3E-for-%26Value"],[48,"impl-Deserializer%3C\'de%3E-for-Value"],[49,"impl-Deserializer%3C\'de%3E-for-%26Value"],[51,"impl-Deserializer%3C\'de%3E-for-Value"],[52,"impl-Deserializer%3C\'de%3E-for-%26Value"],[54,"impl-Deserializer%3C\'de%3E-for-Value"],[55,"impl-Deserializer%3C\'de%3E-for-%26Value"],[57,"impl-Deserializer%3C\'de%3E-for-Value"],[58,"impl-Deserializer%3C\'de%3E-for-%26Value"],[60,"impl-Deserializer%3C\'de%3E-for-Value"],[61,"impl-Deserializer%3C\'de%3E-for-%26Value"],[63,"impl-Deserializer%3C\'de%3E-for-Value"],[64,"impl-Deserializer%3C\'de%3E-for-%26Value"],[66,"impl-Deserializer%3C\'de%3E-for-Value"],[67,"impl-Deserializer%3C\'de%3E-for-%26Value"],[69,"impl-Deserializer%3C\'de%3E-for-%26Value"],[70,"impl-Deserializer%3C\'de%3E-for-Value"],[72,"impl-Deserializer%3C\'de%3E-for-Value"],[73,"impl-Deserializer%3C\'de%3E-for-%26Value"],[75,"impl-Deserializer%3C\'de%3E-for-Value"],[76,"impl-Deserializer%3C\'de%3E-for-%26Value"],[78,"impl-Deserializer%3C\'de%3E-for-Value"],[79,"impl-Deserializer%3C\'de%3E-for-%26Value"],[81,"impl-Deserializer%3C\'de%3E-for-Value"],[82,"impl-Deserializer%3C\'de%3E-for-%26Value"],[84,"impl-Deserializer%3C\'de%3E-for-Value"],[85,"impl-Deserializer%3C\'de%3E-for-%26Value"],[87,"impl-Deserializer%3C\'de%3E-for-Value"],[88,"impl-Deserializer%3C\'de%3E-for-%26Value"],[90,"impl-Deserializer%3C\'de%3E-for-Value"],[91,"impl-Deserializer%3C\'de%3E-for-%26Value"],[93,"impl-Deserializer%3C\'de%3E-for-%26Value"],[94,"impl-Deserializer%3C\'de%3E-for-Value"],[96,"impl-Deserializer%3C\'de%3E-for-%26Value"],[97,"impl-Deserializer%3C\'de%3E-for-Value"],[99,"impl-Deserializer%3C\'de%3E-for-%26Value"],[100,"impl-Deserializer%3C\'de%3E-for-Value"],[102,"impl-Deserializer%3C\'de%3E-for-%26Value"],[103,"impl-Deserializer%3C\'de%3E-for-Value"],[105,"impl-Deserializer%3C\'de%3E-for-Value"],[106,"impl-Deserializer%3C\'de%3E-for-%26Value"],[108,"impl-Deserializer%3C\'de%3E-for-%26Value"],[109,"impl-Deserializer%3C\'de%3E-for-Value"],[111,"impl-Deserializer%3C\'de%3E-for-Value"],[112,"impl-Deserializer%3C\'de%3E-for-%26Value"],[114,"impl-Deserializer%3C\'de%3E-for-%26Value"],[115,"impl-Deserializer%3C\'de%3E-for-Value"],[117,"impl-Deserializer%3C\'de%3E-for-%26Value"],[118,"impl-Deserializer%3C\'de%3E-for-Value"],[120,"impl-Deserializer%3C\'de%3E-for-%26Value"],[121,"impl-Deserializer%3C\'de%3E-for-Value"],[123,"impl-Deserializer%3C\'de%3E-for-Value"],[124,"impl-Deserializer%3C\'de%3E-for-%26Value"],[126,"impl-Deserializer%3C\'de%3E-for-Value"],[127,"impl-Deserializer%3C\'de%3E-for-%26Value"],[129,"impl-Deserializer%3C\'de%3E-for-Value"],[130,"impl-Deserializer%3C\'de%3E-for-%26Value"],[132,"impl-Deserializer%3C\'de%3E-for-%26Value"],[133,"impl-Deserializer%3C\'de%3E-for-Value"],[135,"impl-PartialEq%3Ci32%3E-for-%26Value"],[136,"impl-PartialEq%3Cu32%3E-for-%26Value"],[137,"impl-PartialEq%3Ci16%3E-for-%26mut+Value"],[138,"impl-PartialEq%3Cusize%3E-for-%26mut+Value"],[139,"impl-PartialEq%3Cf64%3E-for-%26Value"],[140,"impl-PartialEq%3Cu32%3E-for-%26mut+Value"],[141,"impl-PartialEq%3Cu16%3E-for-%26Value"],[142,"impl-PartialEq%3Cf32%3E-for-Value"],[143,"impl-PartialEq%3Cbool%3E-for-%26mut+Value"],[144,"impl-PartialEq%3Ci16%3E-for-Value"],[145,"impl-PartialEq%3Ci32%3E-for-%26mut+Value"],[146,"impl-PartialEq%3Ci64%3E-for-%26mut+Value"],[147,"impl-PartialEq%3Cisize%3E-for-%26Value"],[148,"impl-PartialEq%3Cu16%3E-for-Value"],[149,"impl-PartialEq%3Cusize%3E-for-%26Value"],[150,"impl-PartialEq%3Ci8%3E-for-Value"],[151,"impl-PartialEq%3Cf64%3E-for-Value"],[152,"impl-PartialEq%3Cstr%3E-for-Value"],[153,"impl-PartialEq%3Ci64%3E-for-%26Value"],[154,"impl-PartialEq%3Cu64%3E-for-%26mut+Value"],[155,"impl-PartialEq%3Cu64%3E-for-%26Value"],[156,"impl-PartialEq%3Cf32%3E-for-%26Value"],[157,"impl-PartialEq%3Cu32%3E-for-Value"],[158,"impl-PartialEq%3Cisize%3E-for-Value"],[159,"impl-PartialEq%3Cf32%3E-for-%26mut+Value"],[160,"impl-PartialEq%3Cusize%3E-for-Value"],[161,"impl-PartialEq%3Ci32%3E-for-Value"],[162,"impl-PartialEq%3CString%3E-for-Value"],[163,"impl-PartialEq%3Cbool%3E-for-Value"],[164,"impl-PartialEq%3Ci64%3E-for-Value"],[165,"impl-PartialEq%3Ci16%3E-for-%26Value"],[166,"impl-PartialEq%3Cu64%3E-for-Value"],[167,"impl-PartialEq-for-Value"],[168,"impl-PartialEq%3Cu8%3E-for-%26Value"],[169,"impl-PartialEq%3Ci8%3E-for-%26Value"],[170,"impl-PartialEq%3C%26str%3E-for-Value"],[171,"impl-PartialEq%3Cbool%3E-for-%26Value"],[172,"impl-PartialEq%3Cu16%3E-for-%26mut+Value"],[173,"impl-PartialEq%3Cu8%3E-for-Value"],[174,"impl-PartialEq%3Cf64%3E-for-%26mut+Value"],[175,"impl-PartialEq%3Cu8%3E-for-%26mut+Value"],[176,"impl-PartialEq%3Cisize%3E-for-%26mut+Value"],[177,"impl-PartialEq%3Ci8%3E-for-%26mut+Value"],[180,"impl-Debug-for-Error"],[181,"impl-Display-for-Error"],[183,"impl-Display-for-Value"],[184,"impl-Debug-for-Value"],[190,"impl-From%3C%26%5BT%5D%3E-for-Value"],[191,"impl-From%3Cu32%3E-for-Value"],[193,"impl-From%3Cisize%3E-for-Value"],[194,"impl-From%3Ci16%3E-for-Value"],[195,"impl-From%3CMap%3CString,+Value%3E%3E-for-Value"],[196,"impl-From%3Ci32%3E-for-Value"],[197,"impl-From%3CVec%3CT%3E%3E-for-Value"],[198,"impl-From%3COption%3CT%3E%3E-for-Value"],[199,"impl-From%3Ci8%3E-for-Value"],[200,"impl-From%3Cu16%3E-for-Value"],[201,"impl-From%3Cu8%3E-for-Value"],[202,"impl-From%3C()%3E-for-Value"],[203,"impl-From%3Cu64%3E-for-Value"],[204,"impl-From%3Cbool%3E-for-Value"],[205,"impl-From%3CString%3E-for-Value"],[206,"impl-From%3Cusize%3E-for-Value"],[207,"impl-From%3C%26str%3E-for-Value"],[208,"impl-From%3CNumber%3E-for-Value"],[209,"impl-From%3Cf64%3E-for-Value"],[210,"impl-From%3Ci64%3E-for-Value"],[211,"impl-From%3CCow%3C\'a,+str%3E%3E-for-Value"],[212,"impl-From%3Cf32%3E-for-Value"],[214,"impl-FromIterator%3CT%3E-for-Value"],[215,"impl-FromIterator%3C(K,+V)%3E-for-Value"],[231,"impl-IntoDeserializer%3C\'de,+Error%3E-for-%26Value"],[232,"impl-IntoDeserializer%3C\'de,+Error%3E-for-Value"],[234,"impl-IntoIterator-for-%26mut+Map%3CString,+Value%3E"],[235,"impl-IntoIterator-for-%26Map%3CString,+Value%3E"],[236,"impl-IntoIterator-for-Map%3CString,+Value%3E"],[641,"impl-Deserializer%3C\'de%3E-for-%26Number"],[642,"impl-Deserializer%3C\'de%3E-for-Number"],[643,"impl-Deserializer%3C\'de%3E-for-Number"],[644,"impl-Deserializer%3C\'de%3E-for-%26Number"],[645,"impl-Deserializer%3C\'de%3E-for-Number"],[646,"impl-Deserializer%3C\'de%3E-for-%26Number"],[647,"impl-Deserializer%3C\'de%3E-for-Number"],[648,"impl-Deserializer%3C\'de%3E-for-%26Number"],[649,"impl-Deserializer%3C\'de%3E-for-Number"],[650,"impl-Deserializer%3C\'de%3E-for-%26Number"],[651,"impl-Deserializer%3C\'de%3E-for-Number"],[652,"impl-Deserializer%3C\'de%3E-for-%26Number"],[653,"impl-Deserializer%3C\'de%3E-for-%26Number"],[654,"impl-Deserializer%3C\'de%3E-for-Number"],[655,"impl-Deserializer%3C\'de%3E-for-%26Number"],[656,"impl-Deserializer%3C\'de%3E-for-Number"],[657,"impl-Deserializer%3C\'de%3E-for-%26Number"],[658,"impl-Deserializer%3C\'de%3E-for-Number"],[659,"impl-Deserializer%3C\'de%3E-for-%26Number"],[660,"impl-Deserializer%3C\'de%3E-for-Number"],[661,"impl-Deserializer%3C\'de%3E-for-Number"],[662,"impl-Deserializer%3C\'de%3E-for-%26Number"],[663,"impl-Deserializer%3C\'de%3E-for-%26Number"],[664,"impl-Deserializer%3C\'de%3E-for-Number"],[665,"impl-Deserializer%3C\'de%3E-for-Number"],[666,"impl-Deserializer%3C\'de%3E-for-%26Number"],[667,"impl-Deserializer%3C\'de%3E-for-%26Number"],[668,"impl-Deserializer%3C\'de%3E-for-Number"],[669,"impl-Deserializer%3C\'de%3E-for-%26Number"],[670,"impl-Deserializer%3C\'de%3E-for-Number"],[671,"impl-Deserializer%3C\'de%3E-for-%26Number"],[672,"impl-Deserializer%3C\'de%3E-for-Number"],[673,"impl-Deserializer%3C\'de%3E-for-%26Number"],[674,"impl-Deserializer%3C\'de%3E-for-Number"],[675,"impl-Deserializer%3C\'de%3E-for-%26Number"],[676,"impl-Deserializer%3C\'de%3E-for-Number"],[677,"impl-Deserializer%3C\'de%3E-for-Number"],[678,"impl-Deserializer%3C\'de%3E-for-%26Number"],[679,"impl-Deserializer%3C\'de%3E-for-Number"],[680,"impl-Deserializer%3C\'de%3E-for-%26Number"],[681,"impl-Deserializer%3C\'de%3E-for-%26Number"],[682,"impl-Deserializer%3C\'de%3E-for-Number"],[683,"impl-Deserializer%3C\'de%3E-for-Number"],[684,"impl-Deserializer%3C\'de%3E-for-%26Number"],[685,"impl-Deserializer%3C\'de%3E-for-Number"],[686,"impl-Deserializer%3C\'de%3E-for-%26Number"],[687,"impl-Deserializer%3C\'de%3E-for-%26Number"],[688,"impl-Deserializer%3C\'de%3E-for-Number"],[689,"impl-Deserializer%3C\'de%3E-for-%26Number"],[690,"impl-Deserializer%3C\'de%3E-for-Number"],[691,"impl-Deserializer%3C\'de%3E-for-%26Number"],[692,"impl-Deserializer%3C\'de%3E-for-Number"],[693,"impl-Deserializer%3C\'de%3E-for-Number"],[694,"impl-Deserializer%3C\'de%3E-for-%26Number"],[695,"impl-Deserializer%3C\'de%3E-for-%26Number"],[696,"impl-Deserializer%3C\'de%3E-for-Number"],[697,"impl-Deserializer%3C\'de%3E-for-%26Number"],[698,"impl-Deserializer%3C\'de%3E-for-Number"],[699,"impl-Deserializer%3C\'de%3E-for-%26Number"],[700,"impl-Deserializer%3C\'de%3E-for-Number"],[701,"impl-Deserializer%3C\'de%3E-for-Number"],[702,"impl-Deserializer%3C\'de%3E-for-%26Number"],[704,"impl-Display-for-Number"],[705,"impl-Debug-for-Number"],[707,"impl-From%3Cisize%3E-for-Number"],[709,"impl-From%3Ci16%3E-for-Number"],[710,"impl-From%3Cu16%3E-for-Number"],[711,"impl-From%3Cu64%3E-for-Number"],[712,"impl-From%3Ci32%3E-for-Number"],[713,"impl-From%3Cu32%3E-for-Number"],[714,"impl-From%3Cu8%3E-for-Number"],[715,"impl-From%3Ci64%3E-for-Number"],[716,"impl-From%3Ci8%3E-for-Number"],[717,"impl-From%3Cusize%3E-for-Number"]]},\
"shell_words":{"doc":"Process command line according to parsing rules of Unix …","t":"FNNNNNNNNNHHHNNNNN","n":["ParseError","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","join","quote","split","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"shell_words"],[18,"core::fmt"],[19,"core::fmt"],[20,"core::convert"],[21,"core::iter::traits::collect"],[22,"alloc::borrow"],[23,"alloc::vec"],[24,"core::result"],[25,"core::any"]],"d":["An error returned when shell parsing fails.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Joins arguments into a single command line suitable for …","Escapes special characters in a string, so that it will …","Splits command line into separate arguments, in much the …","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[1,4],5],[[1,4],5],[-1,-1,[]],[-1,-2,[],[]],[-2,6,[[8,[7]]],[[10,[],[[9,[-1]]]]]],[7,[[11,[7]]]],[7,[[13,[[12,[6]],1]]]],[-1,-2,[],[]],[-1,6,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]]],"c":[],"p":[[5,"ParseError",0],[1,"tuple"],[1,"bool"],[5,"Formatter",18],[8,"Result",18],[5,"String",19],[1,"str"],[10,"AsRef",20],[17,"Item"],[10,"IntoIterator",21],[6,"Cow",22],[5,"Vec",23],[6,"Result",24],[5,"TypeId",25]],"b":[[6,"impl-Debug-for-ParseError"],[7,"impl-Display-for-ParseError"]]},\
"strsim":{"doc":"This library implements string similarity metrics.","t":"PPIPGNNHNNNNHHHHHHNHHHHHHHNNNN","n":["DifferentLengthArgs","Err","HammingResult","Ok","StrSimError","borrow","borrow_mut","damerau_levenshtein","eq","fmt","fmt","from","generic_damerau_levenshtein","generic_hamming","generic_jaro","generic_jaro_winkler","generic_levenshtein","hamming","into","jaro","jaro_winkler","levenshtein","normalized_damerau_levenshtein","normalized_levenshtein","osa_distance","sorensen_dice","to_string","try_from","try_into","type_id"],"q":[[0,"strsim"],[30,"core::fmt"],[31,"core::fmt"],[32,"core::cmp"],[33,"core::hash"],[34,"core::clone"],[35,"core::cmp"],[36,"alloc::string"],[37,"core::any"]],"d":["","Contains the error value","","Contains the success value","","","","Like optimal string alignment, but substrings can be …","","","","Returns the argument unchanged.","Like optimal string alignment, but substrings can be …","Calculates the number of positions in the two sequences …","Calculates the Jaro similarity between two sequences. The …","Like Jaro but gives a boost to sequences that have a …","Calculates the minimum number of insertions, deletions, …","Calculates the number of positions in the two strings …","Calls <code>U::from(self)</code>.","Calculates the Jaro similarity between two strings. The …","Like Jaro but gives a boost to strings that have a common …","Calculates the minimum number of insertions, deletions, …","Calculates a normalized score of the Damerau–Levenshtein …","Calculates a normalized score of the Levenshtein algorithm …","Like Levenshtein but allows for adjacent transpositions. …","Calculates a Sørensen-Dice similarity distance using …","","","",""],"i":[3,14,0,14,0,3,3,0,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,3,3,3],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],[[3,3],4],[[3,5],6],[[3,5],[[9,[7,8]]]],[-1,-1,[]],[[[10,[-1]],[10,[-1]]],2,[11,12,13]],[[-3,-4],14,[],[[15,[-1]]],[[17,[],[[16,[-2]]]]],[[17,[],[[16,[-1]]]]]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],2,[],[]],[[1,1],14],[-1,-2,[],[]],[[1,1],18],[[1,1],18],[[1,1],2],[[1,1],18],[[1,1],18],[[1,1],2],[[1,1],18],[-1,19,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,20,[]]],"c":[],"p":[[1,"str"],[1,"usize"],[6,"StrSimError",0],[1,"bool"],[5,"Formatter",30],[8,"Result",30],[1,"tuple"],[5,"Error",30],[6,"Result",31],[1,"slice"],[10,"Eq",32],[10,"Hash",33],[10,"Clone",34],[8,"HammingResult",0],[10,"PartialEq",32],[17,"Item"],[10,"IntoIterator",35],[1,"f64"],[5,"String",36],[5,"TypeId",37]],"b":[[9,"impl-Debug-for-StrSimError"],[10,"impl-Display-for-StrSimError"]]},\
"syn":{"doc":"github crates-io docs-rs","t":"FPPPPFFPPPFPFPPGFPPFFGPPPPPPPFPPFPPPPPPPPPPPPPPPPPFFPPPGFFFPPFPPPPPPFGPFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFPFPGFFGFFFPPPPPGPGFFFFPPGGFPPPPPPFPPPFGFFFFGPFPPPPPPGPFFFFFFFFFFFFFFFFPPFPPPPFPGPPFFFFFFFFPFPPFPPPPPPPPGPPGGFFPPPPPPPPPPPPPPPPPPPPPPPPPPFGFFFFFFFFFFFFFFFFFPPPPPGFFFPPFPPGPFPPPPPPPPPPIPGPPPPFPPPPGGFPGPPPPPPQPPPFGGFFFFPPPPPPPFGPPPPPPPPPFFFFFFFFFGFFFFFFFPGPPPPPPPPFFFFFGFFPPPPPPPPPFGFGPPPOOOOOOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOQOOOOOOOQOCOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOONNOOOOOOOOOOOOQQONNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOCOOOOOOOOOONNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOONOOOOOOONNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNOOOOOOOOOOONOOOONOOONOOOOONOOOOOOOOOOOOOOOOONOOOOCOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOQCHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNHNQNNNNNNNQQNHNNNNNNNOOOOOOOOONNOOOOOOOOOOOOOOOCOOOOOOONOOOONNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOCNOOOOOOOOOOONNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOONOOOOOOOONNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNOFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMTMFNNNNONNHONNNNPFFFPRKFIKKIFNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKMMPFFFFGFFFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFKFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Enum","Eq","Err","Error","Expr","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldMutability","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemFn","ImplItemMacro","ImplItemType","ImplRestriction","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","LocalInit","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mod","Mul","MulAssign","Mut","Name","NameValue","Named","Named","Ne","Neg","Never","None","None","None","None","Not","Ok","Or","Or","Outer","Paren","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatConst","PatIdent","PatLit","PatMacro","PatOr","PatParen","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemAssign","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Signature","Slice","Slice","Static","Static","StaticMutability","Stmt","StmtMacro","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubAssign","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemFn","TraitItemMacro","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","comma","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","const_token","const_token","constness","constness","content","continue_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","delimiter","discriminant","diverge","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","elems","else_branch","end","end","enum_token","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","len","len","len","let_token","let_token","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","loop_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","mac","make_where_clause","match_token","member","member","member","meta","meta","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_mod_style","parse_multi","parse_multi_with_leading_vert","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_single","parse_str","parse_turbofish","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","qself","qself","qself","qself","question_token","receiver","receiver","reference","rename","rename","require_ident","require_list","require_name_value","require_path_only","rest","rest","restriction","return_token","right","right","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","start","start","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[3644,"syn::buffer"],[3678,"syn::ext"],[3682,"syn::meta"],[3696,"syn::parse"],[3792,"syn::parse::discouraged"],[3796,"syn::punctuated"],[3958,"syn::spanned"],[3960,"syn::token"],[5645,"core::str::traits"],[5646,"core::cmp"],[5647,"core::convert"],[5648,"core::marker"],[5649,"core::fmt"],[5650,"core::fmt"],[5651,"core::fmt"],[5652,"core::convert"],[5653,"core::hash"],[5654,"proc_macro2"],[5655,"proc_macro2"],[5656,"core::ops::function"],[5657,"proc_macro2::extra"],[5658,"alloc::string"],[5659,"core::any"],[5660,"proc_macro2"],[5661,"proc_macro2"],[5662,"core::ops::function"],[5663,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0..=10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const block: <code>const { ... }</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expression, with or without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An associated function within the definition of a trait.","An associated function within an impl block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","An associated function within an impl block.","A macro invocation within an impl block.","An associated type within an impl block.","Unused, but reserved for RFC 3323 restrictions.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","The expression assigned in a local <code>let</code> binding, including …","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in pattern position.","A macro invocation in statement position.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized pattern: <code>(A | B)</code>.","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A const block: <code>const { ... }</code>.","A pattern that binds a new variable: …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A pattern that matches any one of a set of cases.","A parenthesized pattern: <code>(A | B)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method.","The <code>self</code> argument of an associated method.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference pattern: <code>&amp;mut var</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A dynamically sized slice type: <code>[T]</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","The mutability of an <code>Item::Static</code> or <code>ForeignItem::Static</code>.","A statement, usually ending in a semicolon.","A macro invocation in statement position.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","An associated function within the definition of a trait.","A macro invocation within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","Facility for interpreting structured content inside of an …","","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parse a pattern, possibly involving <code>|</code>, but not a leading <code>|</code>.","Parse a pattern, possibly involving <code>|</code>, possibly including a","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a pattern that does <em>not</em> involve <code>|</code> at the top level.","Parse a string of Rust code into the chosen syntax tree …","Parse <code>::&lt;…&gt;</code> with mandatory leading <code>::</code>.","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","An error if this path is not a single ident, as defined in …","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementseturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,136,136,136,153,0,0,26,169,26,0,154,0,154,26,0,0,26,169,0,0,0,26,136,136,136,136,136,136,0,26,128,0,135,135,26,128,128,26,26,128,70,26,26,73,85,112,117,138,154,0,0,154,26,353,0,0,0,0,187,137,0,136,136,22,85,136,6,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,26,0,0,0,0,0,0,0,128,85,107,112,117,0,26,0,0,0,0,0,85,136,0,0,0,101,26,101,169,136,70,0,138,26,85,0,0,0,0,0,0,0,169,0,26,26,169,161,12,128,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,26,0,73,78,82,154,0,13,0,26,138,0,0,0,0,0,0,0,0,165,0,26,136,0,26,85,107,112,117,138,165,169,0,26,80,0,0,0,0,26,85,136,136,126,101,13,17,65,136,137,169,80,126,153,163,137,6,136,138,12,26,135,138,169,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,26,101,138,169,0,0,0,0,169,161,0,26,138,0,353,0,123,26,138,169,136,136,101,26,138,161,0,26,0,136,136,136,136,0,138,169,85,107,0,0,0,128,0,22,26,85,138,136,136,0,78,85,85,0,0,0,0,0,0,0,169,26,26,26,138,169,138,0,0,73,82,85,107,112,117,138,154,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,26,22,85,17,17,65,26,85,0,0,0,0,0,0,0,0,26,78,85,107,112,117,128,138,169,0,0,0,0,26,138,26,90,122,171,54,142,180,10,34,50,155,152,49,35,104,160,1,29,36,122,16,20,21,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,48,49,50,51,52,52,53,53,54,55,56,57,58,59,60,61,62,63,64,67,69,71,74,75,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,109,110,111,113,114,115,116,118,119,120,121,124,125,139,140,141,142,143,144,145,146,147,148,149,150,166,168,185,186,96,30,134,176,30,39,3,5,3,5,29,32,37,37,59,62,89,119,36,40,47,63,69,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,353,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,353,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,84,74,75,83,84,97,115,158,173,182,18,24,49,57,87,90,91,96,106,145,164,0,11,27,43,55,144,170,181,0,33,0,139,29,36,140,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,10,102,155,20,67,68,74,75,76,83,84,86,94,96,109,113,115,118,124,148,150,158,69,125,186,42,63,72,72,37,37,76,86,113,118,179,36,122,93,38,88,0,0,21,72,77,153,75,76,113,114,115,91,118,119,120,14,134,16,167,57,143,30,39,50,125,186,182,170,172,177,179,180,181,27,60,144,146,147,183,42,53,53,24,87,8,8,10,65,66,15,28,45,75,76,86,94,97,98,118,120,156,157,167,33,35,40,41,43,45,49,51,54,55,56,58,61,64,67,86,94,118,167,0,88,184,69,16,23,25,57,95,99,145,8,8,8,10,65,66,3,5,122,171,40,77,8,8,8,8,8,8,8,9,1,2,10,11,12,13,13,13,13,14,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,73,73,73,74,75,75,76,77,78,78,78,79,80,81,82,82,82,83,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,101,101,101,101,101,102,103,104,105,106,107,107,107,107,107,108,109,110,111,112,112,112,112,112,113,114,115,116,117,117,117,117,117,118,119,120,121,122,123,123,123,124,125,126,127,128,128,128,128,128,128,128,128,129,130,131,132,3,3,5,5,133,353,134,135,136,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,140,141,142,143,144,145,146,147,148,149,150,151,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,34,21,86,87,91,95,96,97,98,99,110,113,115,118,120,122,156,157,158,151,41,172,72,77,155,160,69,8,10,65,66,10,16,20,21,75,76,86,87,88,92,93,94,95,96,97,98,99,102,103,104,109,110,113,115,118,120,122,139,152,156,157,158,42,91,173,40,162,43,66,166,36,122,159,171,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,353,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,17,17,17,17,153,151,153,71,90,91,96,106,17,17,32,33,38,40,47,63,100,151,140,28,31,17,55,170,45,166,124,74,83,180,72,36,77,79,84,171,72,53,53,46,46,47,72,77,155,160,48,48,92,111,116,121,168,175,72,49,39,67,150,0,11,50,93,79,36,20,54,94,109,124,139,142,179,180,68,184,185,186,18,8,10,74,128,129,130,131,132,3,5,133,8,31,61,36,36,36,122,159,171,72,19,34,50,51,60,79,122,141,146,147,159,162,171,177,183,0,0,0,8,10,13,14,15,16,18,19,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,128,129,129,130,131,132,3,5,133,134,136,137,151,152,154,155,159,161,164,165,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,0,8,11,14,11,14,134,134,0,11,0,151,138,138,20,11,14,11,0,0,138,0,155,20,129,164,26,8,10,40,45,69,125,141,142,148,150,166,11,13,14,15,52,52,57,79,134,145,147,162,178,160,11,81,162,0,52,52,57,145,147,178,58,122,50,124,88,104,151,13,13,13,57,145,96,56,28,31,151,124,91,93,23,55,86,88,92,94,95,97,98,100,108,109,110,111,113,114,115,116,118,120,121,166,168,170,8,10,128,129,130,131,132,3,5,133,71,89,108,114,119,8,8,8,9,1,2,10,10,11,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,128,129,129,130,130,131,131,132,132,3,3,5,5,133,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,66,133,0,72,105,179,53,53,94,109,164,23,95,11,139,128,129,130,131,132,3,5,96,42,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,10,3,5,8,9,1,2,10,11,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,3,5,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,0,129,130,131,132,3,5,133,14,134,91,96,97,100,102,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,353,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,353,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,59,50,20,35,76,86,94,98,109,113,118,120,124,148,156,160,185,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,353,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,72,72,98,110,115,120,44,149,174,25,99,19,8,62,90,91,93,96,122,171,100,129,130,131,132,133,15,133,157,122,171,24,87,20,21,86,87,88,89,93,94,95,96,97,98,99,100,108,109,110,118,119,120,72,81,63,169,173,182,187,64,0,0,226,226,227,226,227,227,227,227,227,227,226,227,227,227,226,227,227,227,226,226,227,227,227,227,227,227,226,227,226,227,226,227,0,231,231,231,0,220,220,220,220,220,220,220,0,220,220,220,220,220,6,0,0,0,6,218,0,0,0,0,0,0,0,234,232,236,234,235,241,232,236,234,235,241,234,232,235,232,235,232,234,235,0,234,236,234,235,232,232,232,234,234,234,232,232,236,234,235,241,232,236,234,235,241,232,232,232,234,234,232,232,215,234,218,241,218,234,218,234,236,234,234,234,232,234,234,232,232,235,232,234,232,236,234,235,241,232,236,234,235,241,232,236,234,235,241,0,0,245,246,251,0,0,0,0,0,0,0,0,251,242,248,253,249,250,208,209,251,242,248,253,249,250,208,209,251,242,242,248,249,250,208,251,242,242,248,249,250,208,251,251,242,242,242,242,242,242,242,248,253,249,250,208,209,251,242,242,242,242,242,242,248,253,249,250,208,209,251,242,242,242,248,253,249,250,208,209,242,251,251,242,242,242,242,242,242,248,253,249,250,208,209,242,251,248,253,249,250,208,209,248,253,249,250,208,209,242,242,242,242,242,242,242,242,251,251,242,242,242,248,253,249,250,208,209,242,251,242,248,249,250,208,251,242,251,242,242,248,253,249,250,208,209,251,242,248,253,249,250,208,209,251,242,248,253,249,250,208,209,251,251,251,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,198,304,307,308,310,311,312,313,317,321,324,325,328,329,333,335,337,338,340,345,347,349,198,304,307,308,310,311,312,313,317,321,324,325,328,329,333,335,337,338,340,345,347,349,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,256,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,350,351,352,198,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,256,350,351,352,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,198,257,258,259,260,261,262,263,264,265,266,201,267,268,269,270,271,202,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,199,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352],"fc":[],"p":[[5,"TypeGenerics",0],[5,"Turbofish",0],[5,"LitInt",0],[1,"str"],[5,"LitFloat",0],[8,"Result",3696],[10,"FromStr",5645],[5,"Ident",0],[5,"ImplGenerics",0],[5,"Lifetime",0],[5,"Attribute",0],[6,"AttrStyle",0],[6,"Meta",0],[5,"MetaList",0],[5,"MetaNameValue",0],[5,"Variant",0],[6,"Fields",0],[5,"FieldsNamed",0],[5,"FieldsUnnamed",0],[5,"Field",0],[5,"DeriveInput",0],[6,"Data",0],[5,"DataStruct",0],[5,"DataEnum",0],[5,"DataUnion",0],[6,"Expr",0],[5,"ExprArray",0],[5,"ExprAssign",0],[5,"ExprAsync",0],[5,"ExprAwait",0],[5,"ExprBinary",0],[5,"ExprBlock",0],[5,"ExprBreak",0],[5,"ExprCall",0],[5,"ExprCast",0],[5,"ExprClosure",0],[5,"ExprConst",0],[5,"ExprContinue",0],[5,"ExprField",0],[5,"ExprForLoop",0],[5,"ExprGroup",0],[5,"ExprIf",0],[5,"ExprIndex",0],[5,"ExprInfer",0],[5,"ExprLet",0],[5,"ExprLit",0],[5,"ExprLoop",0],[5,"ExprMacro",0],[5,"ExprMatch",0],[5,"ExprMethodCall",0],[5,"ExprParen",0],[5,"ExprPath",0],[5,"ExprRange",0],[5,"ExprReference",0],[5,"ExprRepeat",0],[5,"ExprReturn",0],[5,"ExprStruct",0],[5,"ExprTry",0],[5,"ExprTryBlock",0],[5,"ExprTuple",0],[5,"ExprUnary",0],[5,"ExprUnsafe",0],[5,"ExprWhile",0],[5,"ExprYield",0],[6,"Member",0],[5,"Index",0],[5,"FieldValue",0],[5,"Label",0],[5,"Arm",0],[6,"RangeLimits",0],[5,"File",0],[5,"Generics",0],[6,"GenericParam",0],[5,"LifetimeParam",0],[5,"TypeParam",0],[5,"ConstParam",0],[5,"BoundLifetimes",0],[6,"TypeParamBound",0],[5,"TraitBound",0],[6,"TraitBoundModifier",0],[5,"WhereClause",0],[6,"WherePredicate",0],[5,"PredicateLifetime",0],[5,"PredicateType",0],[6,"Item",0],[5,"ItemConst",0],[5,"ItemEnum",0],[5,"ItemExternCrate",0],[5,"ItemFn",0],[5,"ItemForeignMod",0],[5,"ItemImpl",0],[5,"ItemMacro",0],[5,"ItemMod",0],[5,"ItemStatic",0],[5,"ItemStruct",0],[5,"ItemTrait",0],[5,"ItemTraitAlias",0],[5,"ItemType",0],[5,"ItemUnion",0],[5,"ItemUse",0],[6,"UseTree",0],[5,"UsePath",0],[5,"UseName",0],[5,"UseRename",0],[5,"UseGlob",0],[5,"UseGroup",0],[6,"ForeignItem",0],[5,"ForeignItemFn",0],[5,"ForeignItemStatic",0],[5,"ForeignItemType",0],[5,"ForeignItemMacro",0],[6,"TraitItem",0],[5,"TraitItemConst",0],[5,"TraitItemFn",0],[5,"TraitItemType",0],[5,"TraitItemMacro",0],[6,"ImplItem",0],[5,"ImplItemConst",0],[5,"ImplItemFn",0],[5,"ImplItemType",0],[5,"ImplItemMacro",0],[5,"Signature",0],[6,"FnArg",0],[5,"Receiver",0],[5,"Variadic",0],[6,"StaticMutability",0],[6,"ImplRestriction",0],[6,"Lit",0],[5,"LitStr",0],[5,"LitByteStr",0],[5,"LitByte",0],[5,"LitChar",0],[5,"LitBool",0],[5,"Macro",0],[6,"MacroDelimiter",0],[6,"BinOp",0],[6,"UnOp",0],[6,"Pat",0],[5,"PatIdent",0],[5,"PatOr",0],[5,"PatParen",0],[5,"PatReference",0],[5,"PatRest",0],[5,"PatSlice",0],[5,"PatStruct",0],[5,"PatTuple",0],[5,"PatTupleStruct",0],[5,"PatType",0],[5,"PatWild",0],[5,"FieldPat",0],[5,"Path",0],[5,"PathSegment",0],[6,"PathArguments",0],[6,"GenericArgument",0],[5,"AngleBracketedGenericArguments",0],[5,"AssocType",0],[5,"AssocConst",0],[5,"Constraint",0],[5,"ParenthesizedGenericArguments",0],[5,"QSelf",0],[6,"Visibility",0],[5,"VisRestricted",0],[6,"FieldMutability",0],[5,"Block",0],[6,"Stmt",0],[5,"Local",0],[5,"LocalInit",0],[5,"StmtMacro",0],[6,"Type",0],[5,"TypeArray",0],[5,"TypeBareFn",0],[5,"TypeGroup",0],[5,"TypeImplTrait",0],[5,"TypeInfer",0],[5,"TypeMacro",0],[5,"TypeNever",0],[5,"TypeParen",0],[5,"TypePath",0],[5,"TypePtr",0],[5,"TypeReference",0],[5,"TypeSlice",0],[5,"TypeTraitObject",0],[5,"TypeTuple",0],[5,"Abi",0],[5,"BareFnArg",0],[5,"BareVariadic",0],[6,"ReturnType",0],[1,"tuple"],[6,"Ordering",5646],[1,"bool"],[10,"AsRef",5647],[10,"Sized",5648],[5,"Formatter",5649],[5,"Error",5649],[6,"Result",5650],[8,"Result",5649],[5,"SelfType",3960],[5,"Underscore",3960],[5,"SelfValue",3960],[5,"Super",3960],[5,"Crate",3960],[5,"Extern",3960],[1,"usize"],[5,"Literal",5651],[10,"Into",5647],[6,"Option",5652],[10,"Hasher",5653],[5,"Iter",3796],[5,"IterMut",3796],[5,"Span",5651],[1,"u8"],[1,"slice"],[1,"char"],[5,"TokenStream",5654],[10,"Parse",3696],[8,"ParseStream",3696],[5,"TokenStream",5651],[10,"Parser",3696],[5,"Vec",5655],[5,"ParseNestedMeta",3682],[17,"Output"],[10,"FnMut",5656],[5,"DelimSpan",5657],[5,"String",5658],[5,"TypeId",5659],[5,"TokenBuffer",3644],[5,"Cursor",3644],[6,"Delimiter",5651],[5,"Punct",5651],[6,"TokenTree",5651],[10,"IdentExt",3678],[5,"Error",3696],[10,"Display",5649],[5,"ParseBuffer",3696],[5,"StepCursor",3696],[5,"Lookahead1",3696],[17,"Item"],[10,"IntoIterator",5660],[5,"LexError",5651],[10,"ToTokens",5661],[5,"Nothing",3696],[5,"Punctuated",3796],[10,"Peek",3696],[10,"FnOnce",5656],[10,"Speculative",3792],[10,"AnyDelimiter",3792],[10,"Clone",5662],[5,"Pairs",3796],[5,"IntoPairs",3796],[5,"IntoIter",3796],[6,"Pair",3796],[10,"Default",5663],[5,"PairsMut",3796],[10,"Token",3960],[10,"Spanned",3958],[5,"Group",3960],[5,"Abstract",3960],[5,"As",3960],[5,"Async",3960],[5,"Auto",3960],[5,"Await",3960],[5,"Become",3960],[5,"Box",3960],[5,"Break",3960],[5,"Const",3960],[5,"Continue",3960],[5,"Default",3960],[5,"Do",3960],[5,"Dyn",3960],[5,"Else",3960],[5,"Enum",3960],[5,"Final",3960],[5,"Fn",3960],[5,"For",3960],[5,"If",3960],[5,"Impl",3960],[5,"In",3960],[5,"Let",3960],[5,"Loop",3960],[5,"Macro",3960],[5,"Match",3960],[5,"Mod",3960],[5,"Move",3960],[5,"Mut",3960],[5,"Override",3960],[5,"Priv",3960],[5,"Pub",3960],[5,"Ref",3960],[5,"Return",3960],[5,"Static",3960],[5,"Struct",3960],[5,"Trait",3960],[5,"Try",3960],[5,"Type",3960],[5,"Typeof",3960],[5,"Union",3960],[5,"Unsafe",3960],[5,"Unsized",3960],[5,"Use",3960],[5,"Virtual",3960],[5,"Where",3960],[5,"While",3960],[5,"Yield",3960],[5,"And",3960],[5,"AndAnd",3960],[5,"AndEq",3960],[5,"At",3960],[5,"Caret",3960],[5,"CaretEq",3960],[5,"Colon",3960],[5,"Comma",3960],[5,"Dollar",3960],[5,"Dot",3960],[5,"DotDot",3960],[5,"DotDotDot",3960],[5,"DotDotEq",3960],[5,"Eq",3960],[5,"EqEq",3960],[5,"FatArrow",3960],[5,"Ge",3960],[5,"Gt",3960],[5,"LArrow",3960],[5,"Le",3960],[5,"Lt",3960],[5,"Minus",3960],[5,"MinusEq",3960],[5,"Ne",3960],[5,"Not",3960],[5,"Or",3960],[5,"OrEq",3960],[5,"OrOr",3960],[5,"PathSep",3960],[5,"Percent",3960],[5,"PercentEq",3960],[5,"Plus",3960],[5,"PlusEq",3960],[5,"Pound",3960],[5,"Question",3960],[5,"RArrow",3960],[5,"Semi",3960],[5,"Shl",3960],[5,"ShlEq",3960],[5,"Shr",3960],[5,"ShrEq",3960],[5,"Slash",3960],[5,"SlashEq",3960],[5,"Star",3960],[5,"StarEq",3960],[5,"Tilde",3960],[5,"Brace",3960],[5,"Bracket",3960],[5,"Paren",3960],[6,"StrStyle",0]],"b":[[1393,"impl-PartialEq-for-Ident"],[1394,"impl-PartialEq%3CT%3E-for-Ident"],[1442,"impl-IdentFragment-for-Ident"],[1443,"impl-Debug-for-Ident"],[1444,"impl-Display-for-Ident"],[1454,"impl-From%3CSelfType%3E-for-Ident"],[1455,"impl-From%3CUnderscore%3E-for-Ident"],[1457,"impl-From%3CSelfValue%3E-for-Ident"],[1458,"impl-From%3CSuper%3E-for-Ident"],[1459,"impl-From%3CCrate%3E-for-Ident"],[1460,"impl-From%3CExtern%3E-for-Ident"],[1468,"impl-From%3CMetaNameValue%3E-for-Meta"],[1469,"impl-From%3CMetaList%3E-for-Meta"],[1470,"impl-From%3CPath%3E-for-Meta"],[1474,"impl-From%3CFieldsUnnamed%3E-for-Fields"],[1475,"impl-From%3CFieldsNamed%3E-for-Fields"],[1480,"impl-From%3CItemUnion%3E-for-DeriveInput"],[1481,"impl-From%3CItemStruct%3E-for-DeriveInput"],[1482,"impl-From%3CItemEnum%3E-for-DeriveInput"],[1488,"impl-From%3CExprBlock%3E-for-Expr"],[1489,"impl-From%3CExprContinue%3E-for-Expr"],[1490,"impl-From%3CExprConst%3E-for-Expr"],[1491,"impl-From%3CExprIf%3E-for-Expr"],[1492,"impl-From%3CExprYield%3E-for-Expr"],[1493,"impl-From%3CExprRepeat%3E-for-Expr"],[1494,"impl-From%3CExprMethodCall%3E-for-Expr"],[1495,"impl-From%3CExprCall%3E-for-Expr"],[1496,"impl-From%3CExprLit%3E-for-Expr"],[1497,"impl-From%3CExprReturn%3E-for-Expr"],[1498,"impl-From%3CExprAsync%3E-for-Expr"],[1499,"impl-From%3CExprStruct%3E-for-Expr"],[1500,"impl-From%3CExprGroup%3E-for-Expr"],[1501,"impl-From%3CExprBreak%3E-for-Expr"],[1502,"impl-From%3CExprWhile%3E-for-Expr"],[1503,"impl-From%3CExprArray%3E-for-Expr"],[1504,"impl-From%3CExprField%3E-for-Expr"],[1505,"impl-From%3CExprTry%3E-for-Expr"],[1506,"impl-From%3CExprLet%3E-for-Expr"],[1507,"impl-From%3CExprClosure%3E-for-Expr"],[1508,"impl-From%3CExprParen%3E-for-Expr"],[1509,"impl-From%3CExprForLoop%3E-for-Expr"],[1510,"impl-From%3CExprRange%3E-for-Expr"],[1511,"impl-From%3CExprUnsafe%3E-for-Expr"],[1512,"impl-From%3CExprMacro%3E-for-Expr"],[1513,"impl-From%3CExprAssign%3E-for-Expr"],[1514,"impl-From%3CExprCast%3E-for-Expr"],[1515,"impl-From%3CExprTuple%3E-for-Expr"],[1516,"impl-From%3CExprLoop%3E-for-Expr"],[1517,"impl-From%3CExprMatch%3E-for-Expr"],[1518,"impl-From%3CExprInfer%3E-for-Expr"],[1519,"impl-From%3CExprUnary%3E-for-Expr"],[1520,"impl-From%3CExprPath%3E-for-Expr"],[1521,"impl-From%3CExprTryBlock%3E-for-Expr"],[1522,"impl-From%3CExprAwait%3E-for-Expr"],[1523,"impl-From%3CExprReference%3E-for-Expr"],[1524,"impl-From%3CExprBinary%3E-for-Expr"],[1525,"impl-From%3CExprIndex%3E-for-Expr"],[1566,"impl-From%3CIndex%3E-for-Member"],[1567,"impl-From%3Cusize%3E-for-Member"],[1568,"impl-From%3CIdent%3E-for-Member"],[1577,"impl-From%3CLifetimeParam%3E-for-GenericParam"],[1579,"impl-From%3CConstParam%3E-for-GenericParam"],[1580,"impl-From%3CTypeParam%3E-for-GenericParam"],[1587,"impl-From%3CLifetime%3E-for-TypeParamBound"],[1588,"impl-From%3CTraitBound%3E-for-TypeParamBound"],[1592,"impl-From%3CPredicateLifetime%3E-for-WherePredicate"],[1593,"impl-From%3CPredicateType%3E-for-WherePredicate"],[1597,"impl-From%3CItemMod%3E-for-Item"],[1598,"impl-From%3CItemExternCrate%3E-for-Item"],[1599,"impl-From%3CItemForeignMod%3E-for-Item"],[1600,"impl-From%3CItemStatic%3E-for-Item"],[1601,"impl-From%3CItemConst%3E-for-Item"],[1602,"impl-From%3CItemFn%3E-for-Item"],[1603,"impl-From%3CItemUse%3E-for-Item"],[1604,"impl-From%3CItemImpl%3E-for-Item"],[1605,"impl-From%3CItemEnum%3E-for-Item"],[1606,"impl-From%3CItemType%3E-for-Item"],[1607,"impl-From%3CItemUnion%3E-for-Item"],[1608,"impl-From%3CItemStruct%3E-for-Item"],[1609,"impl-From%3CDeriveInput%3E-for-Item"],[1610,"impl-From%3CItemTraitAlias%3E-for-Item"],[1611,"impl-From%3CItemMacro%3E-for-Item"],[1613,"impl-From%3CItemTrait%3E-for-Item"],[1629,"impl-From%3CUseGroup%3E-for-UseTree"],[1630,"impl-From%3CUseGlob%3E-for-UseTree"],[1632,"impl-From%3CUsePath%3E-for-UseTree"],[1633,"impl-From%3CUseRename%3E-for-UseTree"],[1634,"impl-From%3CUseName%3E-for-UseTree"],[1641,"impl-From%3CForeignItemStatic%3E-for-ForeignItem"],[1642,"impl-From%3CForeignItemMacro%3E-for-ForeignItem"],[1643,"impl-From%3CForeignItemType%3E-for-ForeignItem"],[1644,"impl-From%3CForeignItemFn%3E-for-ForeignItem"],[1649,"impl-From%3CTraitItemConst%3E-for-TraitItem"],[1650,"impl-From%3CTraitItemFn%3E-for-TraitItem"],[1652,"impl-From%3CTraitItemMacro%3E-for-TraitItem"],[1653,"impl-From%3CTraitItemType%3E-for-TraitItem"],[1658,"impl-From%3CImplItemFn%3E-for-ImplItem"],[1660,"impl-From%3CImplItemMacro%3E-for-ImplItem"],[1661,"impl-From%3CImplItemType%3E-for-ImplItem"],[1662,"impl-From%3CImplItemConst%3E-for-ImplItem"],[1669,"impl-From%3CPatType%3E-for-FnArg"],[1670,"impl-From%3CReceiver%3E-for-FnArg"],[1675,"impl-From%3CLitByteStr%3E-for-Lit"],[1677,"impl-From%3CLitByte%3E-for-Lit"],[1678,"impl-From%3CLitStr%3E-for-Lit"],[1679,"impl-From%3CLitInt%3E-for-Lit"],[1680,"impl-From%3CLitChar%3E-for-Lit"],[1681,"impl-From%3CLitBool%3E-for-Lit"],[1682,"impl-From%3CLitFloat%3E-for-Lit"],[1698,"impl-From%3CExprMacro%3E-for-Pat"],[1699,"impl-From%3CPatReference%3E-for-Pat"],[1700,"impl-From%3CExprConst%3E-for-Pat"],[1701,"impl-From%3CPatTupleStruct%3E-for-Pat"],[1702,"impl-From%3CPatIdent%3E-for-Pat"],[1703,"impl-From%3CExprLit%3E-for-Pat"],[1704,"impl-From%3CPatRest%3E-for-Pat"],[1705,"impl-From%3CPatOr%3E-for-Pat"],[1706,"impl-From%3CPatParen%3E-for-Pat"],[1707,"impl-From%3CPatType%3E-for-Pat"],[1708,"impl-From%3CPatWild%3E-for-Pat"],[1709,"impl-From%3CExprRange%3E-for-Pat"],[1710,"impl-From%3CPatTuple%3E-for-Pat"],[1711,"impl-From%3CExprPath%3E-for-Pat"],[1712,"impl-From%3CPatSlice%3E-for-Pat"],[1713,"impl-From%3CPatStruct%3E-for-Pat"],[1746,"impl-From%3CTypeBareFn%3E-for-Type"],[1747,"impl-From%3CTypePtr%3E-for-Type"],[1748,"impl-From%3CTypePath%3E-for-Type"],[1749,"impl-From%3CTypeSlice%3E-for-Type"],[1750,"impl-From%3CTypeInfer%3E-for-Type"],[1751,"impl-From%3CTypeParen%3E-for-Type"],[1752,"impl-From%3CTypeNever%3E-for-Type"],[1753,"impl-From%3CTypeReference%3E-for-Type"],[1754,"impl-From%3CTypeTuple%3E-for-Type"],[1755,"impl-From%3CTypeGroup%3E-for-Type"],[1756,"impl-From%3CTypeTraitObject%3E-for-Type"],[1757,"impl-From%3CTypeMacro%3E-for-Type"],[1759,"impl-From%3CTypeArray%3E-for-Type"],[1760,"impl-From%3CTypeImplTrait%3E-for-Type"],[2039,"impl-IntoIterator-for-Fields"],[2040,"impl-IntoIterator-for-%26Fields"],[2041,"impl-IntoIterator-for-%26mut+Fields"],[2263,"impl-Parse-for-LitStr"],[2264,"impl-LitStr"],[2422,"impl-Ident"],[2423,"impl-IdentFragment-for-Ident"],[3734,"impl-Display-for-Error"],[3735,"impl-Debug-for-Error"],[3736,"impl-Display-for-ParseBuffer%3C\'a%3E"],[3737,"impl-Debug-for-ParseBuffer%3C\'a%3E"],[3751,"impl-IntoIterator-for-%26Error"],[3752,"impl-IntoIterator-for-Error"],[3839,"impl-Extend%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[3840,"impl-Extend%3CT%3E-for-Punctuated%3CT,+P%3E"],[3851,"impl-FromIterator%3CT%3E-for-Punctuated%3CT,+P%3E"],[3852,"impl-FromIterator%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[3864,"impl-IntoIterator-for-%26Punctuated%3CT,+P%3E"],[3865,"impl-IntoIterator-for-Punctuated%3CT,+P%3E"],[3866,"impl-IntoIterator-for-%26mut+Punctuated%3CT,+P%3E"]]},\
"tempfile":{"doc":"Temporary files and directories.","t":"FFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHNHNHNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Builder","NamedTempFile","PathPersistError","PersistError","SpooledTempFile","TempDir","TempPath","append","as_file","as_file_mut","as_handle","as_raw_handle","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","close","close","default","deref","drop","drop","eq","error","error","file","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_parts","from_path","into","into","into","into","into","into","into","into_file","into_inner","into_parts","into_path","into_temp_path","is_rolled","keep","keep","make","make_in","new","new","new","new","new_in","new_in","path","path","path","persist","persist","persist_noclobber","persist_noclobber","prefix","rand_bytes","read","read","read","read_exact","read_exact","read_exact","read_to_end","read_to_end","read_to_end","read_to_string","read_to_string","read_to_string","read_vectored","read_vectored","read_vectored","reopen","roll","seek","seek","seek","set_len","source","source","spooled_tempfile","suffix","tempdir","tempdir","tempdir_in","tempdir_in","tempfile","tempfile","tempfile_in","tempfile_in","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_prefix","with_prefix","with_prefix_in","with_prefix_in","write","write","write","write_all","write_all","write_fmt","write_fmt","write_vectored","write_vectored","write_vectored"],"q":[[0,"tempfile"],[169,"std::os::windows::io::handle"],[170,"std::os::windows::io::handle"],[171,"std::os::windows::io::raw"],[172,"std::ffi::os_str"],[173,"std::io::error"],[174,"std::io"],[175,"std::fs"],[176,"core::fmt"],[177,"core::fmt"],[178,"core::result"],[179,"core::ops::function"],[180,"core::convert"],[181,"std::io"],[182,"alloc::string"],[183,"std::io"],[184,"core::option"],[185,"core::any"],[186,"core::fmt"]],"d":["Create a new temporary file or directory with custom …","A named temporary file.","Error returned when persisting a temporary file path fails.","Error returned when persisting a temporary file fails.","An object that behaves like a regular temporary file, but …","A directory in the filesystem that is automatically …","A path to a named temporary file without an open file …","Set the file to be opened in append mode.","Get a reference to the underlying file.","Get a mutable reference to the underlying file.","","","","","","","","","","","","","","","","","","","","","","","Closes and removes the temporary directory, returning a …","Close and remove the temporary file.","Close and remove the temporary file.","","","","","","The underlying IO error.","The underlying IO error.","The temporary file that couldn’t be persisted.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>NamedTempFile</code> from its constituent parts.","Create a new TempPath from an existing path. This can be …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the temporary file into a <code>std::fs::File</code>.","Consumes and returns the inner <code>SpooledData</code> type.","Converts the named temporary file into its constituent …","Persist the temporary directory to disk, returning the …","Closes the file, leaving only the temporary file path.","Returns true if the file has been rolled over to disk.","Keep the temporary file from being deleted. This function …","Keep the temporary file from being deleted. This function …","Attempts to create a temporary file (or file-like object) …","This is the same as <code>Builder::make</code>, except <code>dir</code> is used as …","Attempts to make a temporary directory inside of …","Create a new named temporary file.","","Create a new <code>Builder</code>.","Attempts to make a temporary directory inside of <code>dir</code>. The …","Create a new named temporary file in the specified …","Accesses the <code>Path</code> to the temporary directory.","Get the temporary file’s path.","The temporary file path that couldn’t be persisted.","Persist the temporary file at the target path.","Persist the temporary file at the target path.","Persist the temporary file at the target path if and only …","Persist the temporary file at the target path if and only …","Set a custom filename prefix.","Set the number of random bytes.","","","","","","","","","","","","","","","","Securely reopen the temporary file.","Rolls over to a file on disk, regardless of current size. …","","","","","","","Create a new spooled temporary file.","Set a custom filename suffix.","Create a new temporary directory.","Attempts to make a temporary directory inside of …","Create a new temporary directory in a specific directory.","Attempts to make a temporary directory inside of <code>dir</code>. The …","Create a new temporary file.","Create the named temporary file.","Create a new temporary file in the specified directory.","Create the named temporary file in the specified directory.","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to make a temporary directory with the specified …","Create a new named temporary file with the specified …","Attempts to make a temporary directory with the specified …","Create a new named temporary file with the specified …","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,3,3,3,3,8,10,10,3,8,10,3,19,20,16,1,8,10,3,19,20,16,1,1,1,8,10,3,1,10,8,10,1,19,20,19,3,3,16,8,10,3,19,19,20,20,16,1,8,10,10,3,3,19,20,16,1,3,10,8,10,3,19,20,16,1,3,16,3,8,3,16,10,3,1,1,8,3,16,1,8,3,8,3,20,10,3,10,3,1,1,3,3,16,3,3,16,3,3,16,3,3,16,3,3,16,3,16,3,3,16,16,19,20,0,1,0,1,0,1,0,1,0,1,1,19,20,8,10,3,19,20,16,1,8,10,3,19,20,16,1,8,10,3,19,20,16,1,8,3,8,3,3,3,16,3,3,3,3,3,3,16],"f":[0,0,0,0,0,0,0,[[1,2],1],[[[3,[-1]]],-1,[]],[[[3,[-1]]],-1,[]],[[[3,[-1]]],4,5],[[[3,[-1]]],6,7],[8,9],[10,11],[10,9],[[[3,[-1]]],9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],12,[],[]],[8,[[13,[12]]]],[10,[[13,[12]]]],[[[3,[-1]]],[[13,[12]]],[]],[[],1],[10,9],[8,12],[10,12],[[1,1],2],0,0,0,[[[3,[-1]]],[[13,[12]]],14],[[[3,[15]]],[[13,[12]]]],[16,[[13,[12]]]],[[8,17],18],[[10,17],18],[[[3,[-1]],17],18,[]],[[[19,[-1]],17],18,[]],[[[19,[-1]],17],18,[]],[[20,17],18],[[20,17],18],[[16,17],18],[[1,17],18],[-1,-1,[]],[-1,-1,[]],[20,10],[-1,-1,[]],[[[19,[-1]]],[[3,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,10],[[3,[-1]]],[]],[-1,10,[[22,[21]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],-1,[]],0,[[[3,[-1]]],[[12,[-1,10]]],[]],[8,21],[[[3,[-1]]],10,[]],[16,2],[10,[[23,[21,20]]]],[[[3,[-1]]],[[23,[[12,[-1,21]],[19,[-1]]]]],[]],[[1,-2],[[13,[[3,[-1]]]]],[],[[25,[9],[[24,[[13,[-1]]]]]]]],[[1,-1,-3],[[13,[[3,[-2]]]]],[[26,[9]]],[],[[25,[9],[[24,[[13,[-2]]]]]]]],[[],[[13,[8]]]],[[],[[13,[3]]]],[27,16],[[],1],[-1,[[13,[8]]],[[26,[9]]]],[-1,[[13,[3]]],[[26,[9]]]],[8,9],[[[3,[-1]]],9,[]],0,[[10,-1],[[23,[12,20]]],[[26,[9]]]],[[[3,[-1]],-2],[[23,[-1,[19,[-1]]]]],[],[[26,[9]]]],[[10,-1],[[23,[12,20]]],[[26,[9]]]],[[[3,[-1]],-2],[[23,[-1,[19,[-1]]]]],[],[[26,[9]]]],[[1,-1],1,[[26,[11]],28]],[[1,27],1],[[[3,[-1]],[30,[29]]],[[13,[27]]],31],[[[3,[15]],[30,[29]]],[[13,[27]]]],[[16,[30,[29]]],[[13,[27]]]],[[[3,[15]],[30,[29]]],[[13,[12]]]],[[[3,[-1]],[30,[29]]],[[13,[12]]],31],[[16,[30,[29]]],[[13,[12]]]],[[[3,[-1]],[32,[29]]],[[13,[27]]],31],[[[3,[15]],[32,[29]]],[[13,[27]]]],[[16,[32,[29]]],[[13,[27]]]],[[[3,[15]],33],[[13,[27]]]],[[[3,[-1]],33],[[13,[27]]],31],[[16,33],[[13,[27]]]],[[[3,[-1]],[30,[34]]],[[13,[27]]],31],[[[3,[15]],[30,[34]]],[[13,[27]]]],[[16,[30,[34]]],[[13,[27]]]],[[[3,[15]]],[[13,[15]]]],[16,[[13,[12]]]],[[[3,[15]],35],[[13,[36]]]],[[[3,[-1]],35],[[13,[36]]],37],[[16,35],[[13,[36]]]],[[16,36],[[23,[12,38]]]],[[[19,[-1]]],[[40,[39]]],[]],[20,[[40,[39]]]],[27,16],[[1,-1],1,[[26,[11]],28]],[[],[[13,[8]]]],[1,[[13,[8]]]],[-1,[[13,[8]]],[[26,[9]]]],[[1,-1],[[13,[8]]],[[26,[9]]]],[[],[[13,[15]]]],[1,[[13,[3]]]],[-1,[[13,[15]]],[[26,[9]]]],[[1,-1],[[13,[3]]],[[26,[9]]]],[-1,-2,[],[]],[-1,33,[]],[-1,33,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,[[13,[8]]],[[26,[11]]]],[-1,[[13,[3]]],[[26,[11]]]],[[-1,-2],[[13,[8]]],[[26,[11]]],[[26,[9]]]],[[-1,-2],[[13,[3]]],[[26,[11]]],[[26,[9]]]],[[[3,[-1]],[30,[29]]],[[13,[27]]],14],[[[3,[15]],[30,[29]]],[[13,[27]]]],[[16,[30,[29]]],[[13,[27]]]],[[[3,[15]],[30,[29]]],[[13,[12]]]],[[[3,[-1]],[30,[29]]],[[13,[12]]],14],[[[3,[15]],42],[[13,[12]]]],[[[3,[-1]],42],[[13,[12]]],14],[[[3,[15]],[30,[43]]],[[13,[27]]]],[[[3,[-1]],[30,[43]]],[[13,[27]]],14],[[16,[30,[43]]],[[13,[27]]]]],"c":[],"p":[[5,"Builder",0],[1,"bool"],[5,"NamedTempFile",0],[5,"BorrowedHandle",169],[10,"AsHandle",169],[8,"RawHandle",170],[10,"AsRawHandle",170],[5,"TempDir",0],[5,"Path",171],[5,"TempPath",0],[5,"OsStr",172],[1,"tuple"],[8,"Result",173],[10,"Write",174],[5,"File",175],[5,"SpooledTempFile",0],[5,"Formatter",176],[8,"Result",176],[5,"PersistError",0],[5,"PathPersistError",0],[5,"PathBuf",171],[10,"Into",177],[6,"Result",178],[17,"Output"],[10,"FnMut",179],[10,"AsRef",177],[1,"usize"],[10,"Sized",180],[1,"u8"],[1,"slice"],[10,"Read",174],[5,"Vec",181],[5,"String",182],[5,"IoSliceMut",174],[6,"SeekFrom",174],[1,"u64"],[10,"Seek",174],[5,"Error",173],[10,"Error",183],[6,"Option",184],[5,"TypeId",185],[5,"Arguments",176],[5,"IoSlice",174]],"b":[[13,"impl-AsRef%3COsStr%3E-for-TempPath"],[14,"impl-AsRef%3CPath%3E-for-TempPath"],[43,"impl-Write-for-NamedTempFile%3CF%3E"],[44,"impl-Write-for-%26NamedTempFile"],[49,"impl-Display-for-PersistError%3CF%3E"],[50,"impl-Debug-for-PersistError%3CF%3E"],[51,"impl-Display-for-PathPersistError"],[52,"impl-Debug-for-PathPersistError"],[98,"impl-Read-for-NamedTempFile%3CF%3E"],[99,"impl-Read-for-%26NamedTempFile"],[101,"impl-Read-for-%26NamedTempFile"],[102,"impl-Read-for-NamedTempFile%3CF%3E"],[104,"impl-Read-for-NamedTempFile%3CF%3E"],[105,"impl-Read-for-%26NamedTempFile"],[107,"impl-Read-for-%26NamedTempFile"],[108,"impl-Read-for-NamedTempFile%3CF%3E"],[110,"impl-Read-for-NamedTempFile%3CF%3E"],[111,"impl-Read-for-%26NamedTempFile"],[115,"impl-Seek-for-%26NamedTempFile"],[116,"impl-Seek-for-NamedTempFile%3CF%3E"],[159,"impl-Write-for-NamedTempFile%3CF%3E"],[160,"impl-Write-for-%26NamedTempFile"],[162,"impl-Write-for-%26NamedTempFile"],[163,"impl-Write-for-NamedTempFile%3CF%3E"],[164,"impl-Write-for-%26NamedTempFile"],[165,"impl-Write-for-NamedTempFile%3CF%3E"],[166,"impl-Write-for-%26NamedTempFile"],[167,"impl-Write-for-NamedTempFile%3CF%3E"]]},\
"thiserror":{"doc":"github crates-io docs-rs","t":"Y","n":["Error"],"q":[[0,"thiserror"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"thiserror_impl":{"doc":"","t":"Y","n":["Error"],"q":[[0,"thiserror_impl"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"HH","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[1,"char"],[1,"bool"]],"b":[]},\
"unicode_width":{"doc":"Determine displayed width of <code>char</code> and <code>str</code> types according …","t":"SKKMMMM","n":["UNICODE_VERSION","UnicodeWidthChar","UnicodeWidthStr","width","width","width_cjk","width_cjk"],"q":[[0,"unicode_width"],[7,"core::option"]],"d":["The version of Unicode that this version of unicode-width …","Methods for determining displayed width of Unicode …","Methods for determining displayed width of Unicode strings.","Returns the character’s displayed width in columns, or …","Returns the string’s displayed width in columns.","Returns the character’s displayed width in columns, or …","Returns the string’s displayed width in columns."],"i":[0,0,0,1,4,1,4],"f":[0,0,0,[1,[[3,[2]]]],[4,2],[1,[[3,[2]]]],[4,2]],"c":[],"p":[[10,"UnicodeWidthChar",0],[1,"usize"],[6,"Option",7],[10,"UnicodeWidthStr",0]],"b":[]},\
"utf8parse":{"doc":"A table-driven UTF-8 Parser","t":"FKNNNNMNNNNNMNNNN","n":["Parser","Receiver","advance","borrow","borrow_mut","clone","codepoint","default","eq","fmt","from","into","invalid_sequence","new","try_from","try_into","type_id"],"q":[[0,"utf8parse"],[17,"core::fmt"],[18,"core::fmt"],[19,"core::any"]],"d":["A parser for Utf8 Characters","Handles codepoint and invalid sequence events from the …","Advance the parser","","","","Called whenever a codepoint is parsed successfully","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Called when an invalid_sequence is detected","Create a new Parser","","",""],"i":[0,0,1,1,1,1,4,1,1,1,1,1,4,1,1,1,1],"f":[0,0,[[1,-1,2],3,4],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[4,5],3],[[],1],[[1,1],6],[[1,7],8],[-1,-1,[]],[-1,-2,[],[]],[4,3],[[],1],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[5,"Parser",0],[1,"u8"],[1,"tuple"],[10,"Receiver",0],[1,"char"],[1,"bool"],[5,"Formatter",17],[8,"Result",17],[6,"Result",18],[5,"TypeId",19]],"b":[]},\
"windows_sys":{"doc":"Learn more about Rust for Windows here: …","t":"QQ","n":["s","w"],"q":[[0,"windows_sys"]],"d":["A literal UTF-8 string with a trailing null terminator.","A literal UTF-16 wide string with a trailing null …"],"i":[0,0],"f":[0,0],"c":[],"p":[],"b":[]},\
"windows_targets":{"doc":"Learn more about Rust for Windows here: …","t":"Q","n":["link"],"q":[[0,"windows_targets"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"windows_x86_64_msvc":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]},\
"zeroize":{"doc":"Securely zero memory with a simple trait (<code>Zeroize</code>) built …","t":"KKKKFNNNNNNNNNNNNNNNNNNNNNMNMN","n":["DefaultIsZeroes","TryZeroize","Zeroize","ZeroizeOnDrop","Zeroizing","as_mut","as_ref","borrow","borrow_mut","clone","clone_from","clone_into","default","deref","deref_mut","drop","eq","fmt","from","from","from","into","new","to_owned","try_from","try_into","try_zeroize","type_id","zeroize","zeroize"],"q":[[0,"zeroize"],[30,"core::marker"],[31,"core::convert"],[32,"core::convert"],[33,"core::default"],[34,"core::cmp"],[35,"core::fmt"],[36,"core::fmt"],[37,"core::any"]],"d":["Marker trait for types whose <code>Default</code> is the desired …","Fallible trait for representing cases where zeroization …","Trait for securely erasing values from memory.","Marker trait signifying that this type will …","<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Move value inside a <code>Zeroizing</code> wrapper which ensures it …","","","","Try to zero out this object from memory using Rust …","","Zero out this object from memory using Rust intrinsics …",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,1,4,1],"f":[0,0,0,0,0,[[[1,[-2]]],-1,2,[[3,[-1]],4]],[[[1,[-2]]],-1,2,[[5,[-1]],4]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[4,6]],[[[1,[-1]],[1,[-1]]],7,[4,6]],[[-1,-2],7,[],[]],[[],[[1,[-1]]],[8,4]],[[[1,[-1]]],-1,4],[[[1,[-1]]],-1,4],[[[1,[-1]]],7,4],[[[1,[-1]],[1,[-1]]],9,[10,4]],[[[1,[-1]],11],12,[13,4]],[14,-1,[]],[-1,-1,[]],[-1,[[1,[-1]]],4],[-1,-2,[],[]],[-1,[[1,[-1]]],4],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[16,9],[-1,17,[]],[4,7],[[[1,[-1]]],7,4]],"c":[],"p":[[5,"Zeroizing",0],[10,"Sized",30],[10,"AsMut",31],[10,"Zeroize",0],[10,"AsRef",31],[10,"Clone",32],[1,"tuple"],[10,"Default",33],[1,"bool"],[10,"PartialEq",34],[5,"Formatter",35],[8,"Result",35],[10,"Debug",35],[1,"never"],[6,"Result",36],[10,"TryZeroize",0],[5,"TypeId",37]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
